/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Renderer.js":
/*!*************************!*\
  !*** ./src/Renderer.js ***!
  \*************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "Renderer": function() { return /* binding */ Renderer; },
    /* harmony export */   "executeRenderer": function() { return /* binding */ executeRenderer; },
    /* harmony export */   "isRendererRequired": function() { return /* binding */ isRendererRequired; }
    /* harmony export */ });
    /* harmony import */ var _adloader_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adloader.js */ "./src/adloader.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ "./node_modules/dlv/index.js");
    /* harmony import */ var _polyfill_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./polyfill.js */ "./src/polyfill.js");
    
    
    
    var moduleCode = 'outstream';
    
    /**
     * @typedef {object} Renderer
     *
     * A Renderer stores some functions which are used to render a particular Bid.
     * These are used in Outstream Video Bids, returned on the Bid by the adapter, and will
     * be used to render that bid unless the Publisher overrides them.
     */
    
    function Renderer(options) {
      var _this = this;
      var url = options.url,
        config = options.config,
        id = options.id,
        callback = options.callback,
        loaded = options.loaded,
        adUnitCode = options.adUnitCode,
        renderNow = options.renderNow;
      this.url = url;
      this.config = config;
      this.handlers = {};
      this.id = id;
    
      // a renderer may push to the command queue to delay rendering until the
      // render function is loaded by loadExternalScript, at which point the the command
      // queue will be processed
      this.loaded = loaded;
      this.cmd = [];
      this.push = function (func) {
        if (typeof func !== 'function') {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.logError)('Commands given to Renderer.push must be wrapped in a function');
          return;
        }
        _this.loaded ? func.call() : _this.cmd.push(func);
      };
    
      // bidders may override this with the `callback` property given to `install`
      this.callback = callback || function () {
        _this.loaded = true;
        _this.process();
      };
    
      // use a function, not an arrow, in order to be able to pass "arguments" through
      this.render = function () {
        var _this2 = this;
        var renderArgs = arguments;
        var runRender = function runRender() {
          if (_this2._render) {
            _this2._render.apply(_this2, renderArgs);
          } else {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.logWarn)("No render function was provided, please use .setRender on the renderer");
          }
        };
        if (isRendererPreferredFromAdUnit(adUnitCode)) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.logWarn)("External Js not loaded by Renderer since renderer url and callback is already defined on adUnit ".concat(adUnitCode));
          runRender();
        } else if (renderNow) {
          runRender();
        } else {
          // we expect to load a renderer url once only so cache the request to load script
          this.cmd.unshift(runRender); // should render run first ?
          (0,_adloader_js__WEBPACK_IMPORTED_MODULE_1__.loadExternalScript)(url, moduleCode, this.callback, this.documentContext);
        }
      }.bind(this); // bind the function to this object to avoid 'this' errors
    }
    
    Renderer.install = function (_ref) {
      var url = _ref.url,
        config = _ref.config,
        id = _ref.id,
        callback = _ref.callback,
        loaded = _ref.loaded,
        adUnitCode = _ref.adUnitCode,
        renderNow = _ref.renderNow;
      return new Renderer({
        url: url,
        config: config,
        id: id,
        callback: callback,
        loaded: loaded,
        adUnitCode: adUnitCode,
        renderNow: renderNow
      });
    };
    Renderer.prototype.getConfig = function () {
      return this.config;
    };
    Renderer.prototype.setRender = function (fn) {
      this._render = fn;
    };
    Renderer.prototype.setEventHandlers = function (handlers) {
      this.handlers = handlers;
    };
    Renderer.prototype.handleVideoEvent = function (_ref2) {
      var id = _ref2.id,
        eventName = _ref2.eventName;
      if (typeof this.handlers[eventName] === 'function') {
        this.handlers[eventName]();
      }
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.logMessage)("Prebid Renderer event for id ".concat(id, " type ").concat(eventName));
    };
    
    /*
     * Calls functions that were pushed to the command queue before the
     * renderer was loaded by `loadExternalScript`
     */
    Renderer.prototype.process = function () {
      while (this.cmd.length > 0) {
        try {
          this.cmd.shift().call();
        } catch (error) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.logError)('Error processing Renderer command: ', error);
        }
      }
    };
    
    /**
     * Checks whether creative rendering should be done by Renderer or not.
     * @param {Object} renderer Renderer object installed by adapter
     * @returns {Boolean}
     */
    function isRendererRequired(renderer) {
      return !!(renderer && renderer.url);
    }
    
    /**
     * Render the bid returned by the adapter
     * @param {Object} renderer Renderer object installed by adapter
     * @param {Object} bid Bid response
     * @param {Document} doc context document of bid
     */
    function executeRenderer(renderer, bid, doc) {
      var docContext = null;
      if (renderer.config && renderer.config.documentResolver) {
        docContext = renderer.config.documentResolver(bid, document, doc); // a user provided callback, which should return a Document, and expect the parameters; bid, sourceDocument, renderDocument
      }
    
      if (!docContext) {
        docContext = document;
      }
      renderer.documentContext = docContext;
      renderer.render(bid, renderer.documentContext);
    }
    function isRendererPreferredFromAdUnit(adUnitCode) {
      var adUnits = owpbjs.adUnits;
      var adUnit = (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_2__.find)(adUnits, function (adUnit) {
        return adUnit.code === adUnitCode;
      });
      if (!adUnit) {
        return false;
      }
    
      // renderer defined at adUnit level
      var adUnitRenderer = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"])(adUnit, 'renderer');
      var hasValidAdUnitRenderer = !!(adUnitRenderer && adUnitRenderer.url && adUnitRenderer.render);
    
      // renderer defined at adUnit.mediaTypes level
      var mediaTypeRenderer = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"])(adUnit, 'mediaTypes.video.renderer');
      var hasValidMediaTypeRenderer = !!(mediaTypeRenderer && mediaTypeRenderer.url && mediaTypeRenderer.render);
      return !!(hasValidAdUnitRenderer && !(adUnitRenderer.backupOnly === true) || hasValidMediaTypeRenderer && !(mediaTypeRenderer.backupOnly === true));
    }
    
    /***/ }),
    
    /***/ "./src/adRendering.js":
    /*!****************************!*\
      !*** ./src/adRendering.js ***!
      \****************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "emitAdRenderFail": function() { return /* binding */ emitAdRenderFail; },
    /* harmony export */   "emitAdRenderSucceeded": function() { return /* binding */ emitAdRenderSucceeded; }
    /* harmony export */ });
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
    /* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./events.js */ "./src/events.js");
    /* harmony import */ var _constants_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.json */ "./src/constants.json");
    
    
    
    var _CONSTANTS$EVENTS = _constants_json__WEBPACK_IMPORTED_MODULE_0__.EVENTS,
      AD_RENDER_FAILED = _CONSTANTS$EVENTS.AD_RENDER_FAILED,
      AD_RENDER_SUCCEEDED = _CONSTANTS$EVENTS.AD_RENDER_SUCCEEDED;
    
    /**
     * Emit the AD_RENDER_FAILED event.
     *
     * @param reason one of the values in CONSTANTS.AD_RENDER_FAILED_REASON
     * @param message failure description
     * @param bid? bid response object that failed to render
     * @param id? adId that failed to render
     */
    function emitAdRenderFail(_ref) {
      var reason = _ref.reason,
        message = _ref.message,
        bid = _ref.bid,
        id = _ref.id;
      var data = {
        reason: reason,
        message: message
      };
      if (bid) data.bid = bid;
      if (id) data.adId = id;
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logError)(message);
      _events_js__WEBPACK_IMPORTED_MODULE_2__.emit(AD_RENDER_FAILED, data);
    }
    
    /**
     * Emit the AD_RENDER_SUCCEEDED event.
     * (Note: Invocation of this function indicates that the render function did not generate an error, it does not guarantee that tracking for this event has occurred yet.)
     * @param doc document object that was used to `.write` the ad. Should be `null` if unavailable (e.g. for documents in
     * a cross-origin frame).
     * @param bid bid response object for the ad that was rendered
     * @param id adId that was rendered.
     */
    function emitAdRenderSucceeded(_ref2) {
      var doc = _ref2.doc,
        bid = _ref2.bid,
        id = _ref2.id;
      var data = {
        doc: doc
      };
      if (bid) data.bid = bid;
      if (id) data.adId = id;
      _events_js__WEBPACK_IMPORTED_MODULE_2__.emit(AD_RENDER_SUCCEEDED, data);
    }
    
    /***/ }),
    
    /***/ "./src/adUnits.js":
    /*!************************!*\
      !*** ./src/adUnits.js ***!
      \************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "adunitCounter": function() { return /* binding */ adunitCounter; }
    /* harmony export */ });
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./node_modules/dlv/index.js");
    
    var adUnits = {};
    function ensureAdUnit(adunit, bidderCode) {
      var adUnit = adUnits[adunit] = adUnits[adunit] || {
        bidders: {}
      };
      if (bidderCode) {
        return adUnit.bidders[bidderCode] = adUnit.bidders[bidderCode] || {};
      }
      return adUnit;
    }
    function incrementAdUnitCount(adunit, counter, bidderCode) {
      var adUnit = ensureAdUnit(adunit, bidderCode);
      adUnit[counter] = (adUnit[counter] || 0) + 1;
      return adUnit[counter];
    }
    
    /**
     * Increments and returns current Adunit counter
     * @param {string} adunit id
     * @returns {number} current adunit count
     */
    function incrementRequestsCounter(adunit) {
      return incrementAdUnitCount(adunit, 'requestsCounter');
    }
    
    /**
     * Increments and returns current Adunit requests counter for a bidder
     * @param {string} adunit id
     * @param {string} bidderCode code
     * @returns {number} current adunit bidder requests count
     */
    function incrementBidderRequestsCounter(adunit, bidderCode) {
      return incrementAdUnitCount(adunit, 'requestsCounter', bidderCode);
    }
    
    /**
     * Increments and returns current Adunit wins counter for a bidder
     * @param {string} adunit id
     * @param {string} bidderCode code
     * @returns {number} current adunit bidder requests count
     */
    function incrementBidderWinsCounter(adunit, bidderCode) {
      return incrementAdUnitCount(adunit, 'winsCounter', bidderCode);
    }
    
    /**
     * Returns current Adunit counter
     * @param {string} adunit id
     * @returns {number} current adunit count
     */
    function getRequestsCounter(adunit) {
      return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"])(adUnits, "".concat(adunit, ".requestsCounter")) || 0;
    }
    
    /**
     * Returns current Adunit requests counter for a specific bidder code
     * @param {string} adunit id
     * @param {string} bidder code
     * @returns {number} current adunit bidder requests count
     */
    function getBidderRequestsCounter(adunit, bidder) {
      return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"])(adUnits, "".concat(adunit, ".bidders.").concat(bidder, ".requestsCounter")) || 0;
    }
    
    /**
     * Returns current Adunit requests counter for a specific bidder code
     * @param {string} adunit id
     * @param {string} bidder code
     * @returns {number} current adunit bidder requests count
     */
    function getBidderWinsCounter(adunit, bidder) {
      return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"])(adUnits, "".concat(adunit, ".bidders.").concat(bidder, ".winsCounter")) || 0;
    }
    
    /**
     * A module which counts how many times an adunit was called
     * @module adunitCounter
     */
    var adunitCounter = {
      incrementRequestsCounter: incrementRequestsCounter,
      incrementBidderRequestsCounter: incrementBidderRequestsCounter,
      incrementBidderWinsCounter: incrementBidderWinsCounter,
      getRequestsCounter: getRequestsCounter,
      getBidderRequestsCounter: getBidderRequestsCounter,
      getBidderWinsCounter: getBidderWinsCounter
    };
    
    
    /***/ }),
    
    /***/ "./src/adapter.js":
    /*!************************!*\
      !*** ./src/adapter.js ***!
      \************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ Adapter; }
    /* harmony export */ });
    function Adapter(code) {
      var bidderCode = code;
      function setBidderCode(code) {
        bidderCode = code;
      }
      function getBidderCode() {
        return bidderCode;
      }
      function callBids() {}
      return {
        callBids: callBids,
        setBidderCode: setBidderCode,
        getBidderCode: getBidderCode
      };
    }
    
    /***/ }),
    
    /***/ "./src/adapterManager.js":
    /*!*******************************!*\
      !*** ./src/adapterManager.js ***!
      \*******************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "gdprDataHandler": function() { return /* binding */ gdprDataHandler; },
    /* harmony export */   "getS2SBidderSet": function() { return /* binding */ getS2SBidderSet; },
    /* harmony export */   "gppDataHandler": function() { return /* binding */ gppDataHandler; },
    /* harmony export */   "uspDataHandler": function() { return /* binding */ uspDataHandler; }
    /* harmony export */ });
    /* unused harmony exports PARTITIONS, _filterBidsForAdUnit, filterBidsForAdUnit, coppaDataHandler, setupAdUnitMediaTypes, _partitionBidders, partitionBidders */
    /* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
    /* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
    /* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ "./node_modules/dlv/index.js");
    /* harmony import */ var _sizeMapping_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./sizeMapping.js */ "./src/sizeMapping.js");
    /* harmony import */ var _native_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./native.js */ "./src/native.js");
    /* harmony import */ var _adapters_bidderFactory_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./adapters/bidderFactory.js */ "./src/adapters/bidderFactory.js");
    /* harmony import */ var _ajax_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./ajax.js */ "./src/ajax.js");
    /* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config.js */ "./src/config.js");
    /* harmony import */ var _hook_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./hook.js */ "./src/hook.js");
    /* harmony import */ var _polyfill_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./polyfill.js */ "./src/polyfill.js");
    /* harmony import */ var _adUnits_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./adUnits.js */ "./src/adUnits.js");
    /* harmony import */ var _refererDetection_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./refererDetection.js */ "./src/refererDetection.js");
    /* harmony import */ var _consentHandler_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./consentHandler.js */ "./src/consentHandler.js");
    /* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./events.js */ "./src/events.js");
    /* harmony import */ var _constants_json__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./constants.json */ "./src/constants.json");
    /* harmony import */ var _utils_perfMetrics_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/perfMetrics.js */ "./src/utils/perfMetrics.js");
    /* harmony import */ var _auctionManager_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./auctionManager.js */ "./src/auctionManager.js");
    
    
    
    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
    /** @module adaptermanger */
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    var PARTITIONS = {
      CLIENT: 'client',
      SERVER: 'server'
    };
    var adapterManager = {};
    var _bidderRegistry = adapterManager.bidderRegistry = {};
    var _aliasRegistry = adapterManager.aliasRegistry = {};
    var _s2sConfigs = [];
    _config_js__WEBPACK_IMPORTED_MODULE_1__.config.getConfig('s2sConfig', function (config) {
      if (config && config.s2sConfig) {
        _s2sConfigs = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(config.s2sConfig) ? config.s2sConfig : [config.s2sConfig];
      }
    });
    var _analyticsRegistry = {};
    
    /**
     * @typedef {object} LabelDescriptor
     * @property {boolean} labelAll describes whether or not this object expects all labels to match, or any label to match
     * @property {Array<string>} labels the labels listed on the bidder or adUnit
     * @property {Array<string>} activeLabels the labels specified as being active by requestBids
     */
    
    function getBids(_ref) {
      var bidderCode = _ref.bidderCode,
        auctionId = _ref.auctionId,
        bidderRequestId = _ref.bidderRequestId,
        adUnits = _ref.adUnits,
        src = _ref.src,
        metrics = _ref.metrics;
      return adUnits.reduce(function (result, adUnit) {
        var bids = adUnit.bids.filter(function (bid) {
          return bid.bidder === bidderCode;
        });
        if (bidderCode == null && bids.length === 0 && adUnit.s2sBid != null) {
          bids.push({
            bidder: null
          });
        }
        result.push(bids.reduce(function (bids, bid) {
          bid = Object.assign({}, bid, {
            ortb2Imp: (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.mergeDeep)({}, adUnit.ortb2Imp, bid.ortb2Imp)
          }, (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.getDefinedParams)(adUnit, ['nativeParams', 'nativeOrtbRequest', 'mediaType', 'renderer']));
          var mediaTypes = bid.mediaTypes == null ? adUnit.mediaTypes : bid.mediaTypes;
          if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isValidMediaTypes)(mediaTypes)) {
            bid = Object.assign({}, bid, {
              mediaTypes: mediaTypes
            });
          } else {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)("mediaTypes is not correctly configured for adunit ".concat(adUnit.code));
          }
          bids.push(Object.assign({}, bid, {
            adUnitCode: adUnit.code,
            transactionId: adUnit.transactionId,
            sizes: (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"])(mediaTypes, 'banner.sizes') || (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"])(mediaTypes, 'video.playerSize') || [],
            bidId: bid.bid_id || (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.getUniqueIdentifierStr)(),
            bidderRequestId: bidderRequestId,
            auctionId: auctionId,
            src: src,
            metrics: metrics,
            bidRequestsCount: _adUnits_js__WEBPACK_IMPORTED_MODULE_4__.adunitCounter.getRequestsCounter(adUnit.code),
            bidderRequestsCount: _adUnits_js__WEBPACK_IMPORTED_MODULE_4__.adunitCounter.getBidderRequestsCounter(adUnit.code, bid.bidder),
            bidderWinsCount: _adUnits_js__WEBPACK_IMPORTED_MODULE_4__.adunitCounter.getBidderWinsCounter(adUnit.code, bid.bidder)
          }));
          return bids;
        }, []));
        return result;
      }, []).reduce(_utils_js__WEBPACK_IMPORTED_MODULE_2__.flatten, []).filter(function (val) {
        return val !== '';
      });
    }
    var hookedGetBids = (0,_hook_js__WEBPACK_IMPORTED_MODULE_5__.hook)('sync', getBids, 'getBids');
    
    /**
     * Filter an adUnit's  bids for building client and/or server requests
     *
     * @param bids an array of bids as defined in an adUnit
     * @param s2sConfig null if the adUnit is being routed to a client adapter; otherwise the s2s adapter's config
     * @returns the subset of `bids` that are pertinent for the given `s2sConfig`
     */
    function _filterBidsForAdUnit(bids, s2sConfig) {
      var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref2$getS2SBidders = _ref2.getS2SBidders,
        getS2SBidders = _ref2$getS2SBidders === void 0 ? getS2SBidderSet : _ref2$getS2SBidders;
      if (s2sConfig == null) {
        return bids;
      } else {
        var serverBidders = getS2SBidders(s2sConfig);
        return bids.filter(function (bid) {
          return serverBidders.has(bid.bidder);
        });
      }
    }
    var filterBidsForAdUnit = (0,_hook_js__WEBPACK_IMPORTED_MODULE_5__.hook)('sync', _filterBidsForAdUnit, 'filterBidsForAdUnit');
    function getAdUnitCopyForPrebidServer(adUnits, s2sConfig) {
      var adUnitsCopy = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.deepClone)(adUnits);
      var hasModuleBids = false;
      adUnitsCopy.forEach(function (adUnit) {
        // filter out client side bids
        var s2sBids = adUnit.bids.filter(function (b) {
          var _b$params;
          return b.module === 'pbsBidAdapter' && ((_b$params = b.params) === null || _b$params === void 0 ? void 0 : _b$params.configName) === s2sConfig.configName;
        });
        if (s2sBids.length === 1) {
          adUnit.s2sBid = s2sBids[0];
          hasModuleBids = true;
          adUnit.ortb2Imp = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.mergeDeep)({}, adUnit.s2sBid.ortb2Imp, adUnit.ortb2Imp);
        } else if (s2sBids.length > 1) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)('Multiple "module" bids for the same s2s configuration; all will be ignored', s2sBids);
        }
        adUnit.bids = filterBidsForAdUnit(adUnit.bids, s2sConfig).map(function (bid) {
          bid.bid_id = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.getUniqueIdentifierStr)();
          return bid;
        });
      });
    
      // don't send empty requests
      adUnitsCopy = adUnitsCopy.filter(function (adUnit) {
        return adUnit.bids.length !== 0 || adUnit.s2sBid != null;
      });
      return {
        adUnits: adUnitsCopy,
        hasModuleBids: hasModuleBids
      };
    }
    function getAdUnitCopyForClientAdapters(adUnits) {
      var adUnitsClientCopy = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.deepClone)(adUnits);
      adUnitsClientCopy.forEach(function (adUnit) {
        adUnit.bids = filterBidsForAdUnit(adUnit.bids, null);
      });
    
      // don't send empty requests
      adUnitsClientCopy = adUnitsClientCopy.filter(function (adUnit) {
        return adUnit.bids.length !== 0;
      });
      return adUnitsClientCopy;
    }
    var gdprDataHandler = new _consentHandler_js__WEBPACK_IMPORTED_MODULE_6__.GdprConsentHandler();
    var uspDataHandler = new _consentHandler_js__WEBPACK_IMPORTED_MODULE_6__.UspConsentHandler();
    var gppDataHandler = new _consentHandler_js__WEBPACK_IMPORTED_MODULE_6__.GppConsentHandler();
    var coppaDataHandler = {
      getCoppa: function getCoppa() {
        return !!_config_js__WEBPACK_IMPORTED_MODULE_1__.config.getConfig('coppa');
      }
    };
    
    /**
     * Filter and/or modify media types for ad units based on the given labels.
     *
     * This should return adUnits that are active for the given labels, modified to have their `mediaTypes`
     * conform to size mapping configuration. If different bids for the same adUnit should use different `mediaTypes`,
     * they should be exposed under `adUnit.bids[].mediaTypes`.
     */
    var setupAdUnitMediaTypes = (0,_hook_js__WEBPACK_IMPORTED_MODULE_5__.hook)('sync', function (adUnits, labels) {
      return (0,_sizeMapping_js__WEBPACK_IMPORTED_MODULE_7__.processAdUnitsForLabels)(adUnits, labels);
    }, 'setupAdUnitMediaTypes');
    
    /**
     * @param {{}|Array<{}>} s2sConfigs
     * @returns {Set<String>} a set of all the bidder codes that should be routed through the S2S adapter(s)
     *                        as defined in `s2sConfigs`
     */
    function getS2SBidderSet(s2sConfigs) {
      if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(s2sConfigs)) s2sConfigs = [s2sConfigs];
      // `null` represents the "no bid bidder" - when an ad unit is meant only for S2S adapters, like stored impressions
      var serverBidders = new Set([null]);
      s2sConfigs.filter(function (s2s) {
        return s2s && s2s.enabled;
      }).flatMap(function (s2s) {
        return s2s.bidders;
      }).forEach(function (bidder) {
        return serverBidders.add(bidder);
      });
      return serverBidders;
    }
    
    /**
     * @returns {{[PARTITIONS.CLIENT]: Array<String>, [PARTITIONS.SERVER]: Array<String>}}
     *           All the bidder codes in the given `adUnits`, divided in two arrays -
     *           those that should be routed to client, and server adapters (according to the configuration in `s2sConfigs`).
     */
    function _partitionBidders(adUnits, s2sConfigs) {
      var _getBidderCodes$reduc;
      var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref3$getS2SBidders = _ref3.getS2SBidders,
        getS2SBidders = _ref3$getS2SBidders === void 0 ? getS2SBidderSet : _ref3$getS2SBidders;
      var serverBidders = getS2SBidders(s2sConfigs);
      return (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.getBidderCodes)(adUnits).reduce(function (memo, bidder) {
        var partition = serverBidders.has(bidder) ? PARTITIONS.SERVER : PARTITIONS.CLIENT;
        memo[partition].push(bidder);
        return memo;
      }, (_getBidderCodes$reduc = {}, (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(_getBidderCodes$reduc, PARTITIONS.CLIENT, []), (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(_getBidderCodes$reduc, PARTITIONS.SERVER, []), _getBidderCodes$reduc));
    }
    var partitionBidders = (0,_hook_js__WEBPACK_IMPORTED_MODULE_5__.hook)('sync', _partitionBidders, 'partitionBidders');
    adapterManager.makeBidRequests = (0,_hook_js__WEBPACK_IMPORTED_MODULE_5__.hook)('sync', function (adUnits, auctionStart, auctionId, cbTimeout, labels) {
      var ortb2Fragments = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
      var auctionMetrics = arguments.length > 6 ? arguments[6] : undefined;
      auctionMetrics = (0,_utils_perfMetrics_js__WEBPACK_IMPORTED_MODULE_8__.useMetrics)(auctionMetrics);
      /**
       * emit and pass adunits for external modification
       * @see {@link https://github.com/prebid/Prebid.js/issues/4149|Issue}
       */
      _events_js__WEBPACK_IMPORTED_MODULE_9__.emit(_constants_json__WEBPACK_IMPORTED_MODULE_10__.EVENTS.BEFORE_REQUEST_BIDS, adUnits);
      if (true) {
        (0,_native_js__WEBPACK_IMPORTED_MODULE_11__.decorateAdUnitsWithNativeParams)(adUnits);
      }
      adUnits = setupAdUnitMediaTypes(adUnits, labels);
      var _partitionBidders2 = partitionBidders(adUnits, _s2sConfigs),
        clientBidders = _partitionBidders2[PARTITIONS.CLIENT],
        serverBidders = _partitionBidders2[PARTITIONS.SERVER];
      if (_config_js__WEBPACK_IMPORTED_MODULE_1__.config.getConfig('bidderSequence') === _config_js__WEBPACK_IMPORTED_MODULE_1__.RANDOM) {
        clientBidders = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.shuffle)(clientBidders);
      }
      var refererInfo = (0,_refererDetection_js__WEBPACK_IMPORTED_MODULE_12__.getRefererInfo)();
      var bidRequests = [];
      var ortb2 = ortb2Fragments.global || {};
      var bidderOrtb2 = ortb2Fragments.bidder || {};
      function addOrtb2(bidderRequest) {
        var fpd = Object.freeze((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.mergeDeep)({}, ortb2, bidderOrtb2[bidderRequest.bidderCode]));
        bidderRequest.ortb2 = fpd;
        bidderRequest.bids.forEach(function (bid) {
          return bid.ortb2 = fpd;
        });
        return bidderRequest;
      }
      _s2sConfigs.forEach(function (s2sConfig) {
        if (s2sConfig && s2sConfig.enabled) {
          var _getAdUnitCopyForPreb = getAdUnitCopyForPrebidServer(adUnits, s2sConfig),
            adUnitsS2SCopy = _getAdUnitCopyForPreb.adUnits,
            hasModuleBids = _getAdUnitCopyForPreb.hasModuleBids;
    
          // uniquePbsTid is so we know which server to send which bids to during the callBids function
          var uniquePbsTid = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.generateUUID)();
          (serverBidders.length === 0 && hasModuleBids ? [null] : serverBidders).forEach(function (bidderCode) {
            var bidderRequestId = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.getUniqueIdentifierStr)();
            var metrics = auctionMetrics.fork();
            var bidderRequest = addOrtb2({
              bidderCode: bidderCode,
              auctionId: auctionId,
              bidderRequestId: bidderRequestId,
              uniquePbsTid: uniquePbsTid,
              bids: hookedGetBids({
                bidderCode: bidderCode,
                auctionId: auctionId,
                bidderRequestId: bidderRequestId,
                'adUnits': (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.deepClone)(adUnitsS2SCopy),
                src: _constants_json__WEBPACK_IMPORTED_MODULE_10__.S2S.SRC,
                metrics: metrics
              }),
              auctionStart: auctionStart,
              timeout: s2sConfig.timeout,
              src: _constants_json__WEBPACK_IMPORTED_MODULE_10__.S2S.SRC,
              refererInfo: refererInfo,
              metrics: metrics
            });
            if (bidderRequest.bids.length !== 0) {
              bidRequests.push(bidderRequest);
            }
          });
    
          // update the s2sAdUnits object and remove all bids that didn't pass sizeConfig/label checks from getBids()
          // this is to keep consistency and only allow bids/adunits that passed the checks to go to pbs
          adUnitsS2SCopy.forEach(function (adUnitCopy) {
            var validBids = adUnitCopy.bids.filter(function (adUnitBid) {
              return (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_13__.find)(bidRequests, function (request) {
                return (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_13__.find)(request.bids, function (reqBid) {
                  return reqBid.bidId === adUnitBid.bid_id;
                });
              });
            });
            adUnitCopy.bids = validBids;
          });
          bidRequests.forEach(function (request) {
            if (request.adUnitsS2SCopy === undefined) {
              request.adUnitsS2SCopy = adUnitsS2SCopy.filter(function (au) {
                return au.bids.length > 0 || au.s2sBid != null;
              });
            }
          });
        }
      });
    
      // client adapters
      var adUnitsClientCopy = getAdUnitCopyForClientAdapters(adUnits);
      clientBidders.forEach(function (bidderCode) {
        var bidderRequestId = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.getUniqueIdentifierStr)();
        var metrics = auctionMetrics.fork();
        var bidderRequest = addOrtb2({
          bidderCode: bidderCode,
          auctionId: auctionId,
          bidderRequestId: bidderRequestId,
          bids: hookedGetBids({
            bidderCode: bidderCode,
            auctionId: auctionId,
            bidderRequestId: bidderRequestId,
            'adUnits': (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.deepClone)(adUnitsClientCopy),
            labels: labels,
            src: 'client',
            metrics: metrics
          }),
          auctionStart: auctionStart,
          timeout: cbTimeout,
          refererInfo: refererInfo,
          metrics: metrics
        });
        var adapter = _bidderRegistry[bidderCode];
        if (!adapter) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)("Trying to make a request for bidder that does not exist: ".concat(bidderCode));
        }
        if (adapter && bidderRequest.bids && bidderRequest.bids.length !== 0) {
          bidRequests.push(bidderRequest);
        }
      });
      bidRequests.forEach(function (bidRequest) {
        if (gdprDataHandler.getConsentData()) {
          bidRequest['gdprConsent'] = gdprDataHandler.getConsentData();
        }
        if (uspDataHandler.getConsentData()) {
          bidRequest['uspConsent'] = uspDataHandler.getConsentData();
        }
        if (gppDataHandler.getConsentData()) {
          bidRequest['gppConsent'] = gppDataHandler.getConsentData();
        }
      });
      bidRequests.forEach(function (bidRequest) {
        _config_js__WEBPACK_IMPORTED_MODULE_1__.config.runWithBidder(bidRequest.bidderCode, function () {
          var fledgeEnabledFromConfig = _config_js__WEBPACK_IMPORTED_MODULE_1__.config.getConfig('fledgeEnabled');
          bidRequest['fledgeEnabled'] = navigator.runAdAuction && fledgeEnabledFromConfig;
        });
      });
      return bidRequests;
    }, 'makeBidRequests');
    adapterManager.callBids = function (adUnits, bidRequests, addBidResponse, doneCb, requestCallbacks, requestBidsTimeout, onTimelyResponse) {
      var ortb2Fragments = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : {};
      if (!bidRequests.length) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)('callBids executed with no bidRequests.  Were they filtered by labels or sizing?');
        return;
      }
      var _bidRequests$reduce = bidRequests.reduce(function (partitions, bidRequest) {
          partitions[Number(typeof bidRequest.src !== 'undefined' && bidRequest.src === _constants_json__WEBPACK_IMPORTED_MODULE_10__.S2S.SRC)].push(bidRequest);
          return partitions;
        }, [[], []]),
        _bidRequests$reduce2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_14__["default"])(_bidRequests$reduce, 2),
        clientBidRequests = _bidRequests$reduce2[0],
        serverBidRequests = _bidRequests$reduce2[1];
      var uniqueServerBidRequests = [];
      serverBidRequests.forEach(function (serverBidRequest) {
        var index = -1;
        for (var i = 0; i < uniqueServerBidRequests.length; ++i) {
          if (serverBidRequest.uniquePbsTid === uniqueServerBidRequests[i].uniquePbsTid) {
            index = i;
            break;
          }
        }
        if (index <= -1) {
          uniqueServerBidRequests.push(serverBidRequest);
        }
      });
      var counter = 0;
      _s2sConfigs.forEach(function (s2sConfig) {
        if (s2sConfig && uniqueServerBidRequests[counter] && getS2SBidderSet(s2sConfig).has(uniqueServerBidRequests[counter].bidderCode)) {
          // s2s should get the same client side timeout as other client side requests.
          var s2sAjax = (0,_ajax_js__WEBPACK_IMPORTED_MODULE_15__.ajaxBuilder)(requestBidsTimeout, requestCallbacks ? {
            request: requestCallbacks.request.bind(null, 's2s'),
            done: requestCallbacks.done
          } : undefined);
          var adaptersServerSide = s2sConfig.bidders;
          var s2sAdapter = _bidderRegistry[s2sConfig.adapter];
          var uniquePbsTid = uniqueServerBidRequests[counter].uniquePbsTid;
          var adUnitsS2SCopy = uniqueServerBidRequests[counter].adUnitsS2SCopy;
          var uniqueServerRequests = serverBidRequests.filter(function (serverBidRequest) {
            return serverBidRequest.uniquePbsTid === uniquePbsTid;
          });
          if (s2sAdapter) {
            var s2sBidRequest = {
              'ad_units': adUnitsS2SCopy,
              s2sConfig: s2sConfig,
              ortb2Fragments: ortb2Fragments
            };
            if (s2sBidRequest.ad_units.length) {
              var doneCbs = uniqueServerRequests.map(function (bidRequest) {
                bidRequest.start = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.timestamp)();
                return doneCb.bind(bidRequest);
              });
              var bidders = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.getBidderCodes)(s2sBidRequest.ad_units).filter(function (bidder) {
                return adaptersServerSide.includes(bidder);
              });
              (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logMessage)("CALLING S2S HEADER BIDDERS ==== ".concat(bidders.length > 0 ? bidders.join(', ') : 'No bidder specified, using "ortb2Imp" definition(s) only'));
    
              // fire BID_REQUESTED event for each s2s bidRequest
              uniqueServerRequests.forEach(function (bidRequest) {
                // add the new sourceTid
                _events_js__WEBPACK_IMPORTED_MODULE_9__.emit(_constants_json__WEBPACK_IMPORTED_MODULE_10__.EVENTS.BID_REQUESTED, _objectSpread(_objectSpread({}, bidRequest), {}, {
                  tid: bidRequest.auctionId
                }));
              });
    
              // make bid requests
              s2sAdapter.callBids(s2sBidRequest, serverBidRequests, addBidResponse, function () {
                return doneCbs.forEach(function (done) {
                  return done();
                });
              }, s2sAjax);
            }
          } else {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)('missing ' + s2sConfig.adapter);
          }
          counter++;
        }
      });
    
      // handle client adapter requests
      clientBidRequests.forEach(function (bidRequest) {
        bidRequest.start = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.timestamp)();
        // TODO : Do we check for bid in pool from here and skip calling adapter again ?
        var adapter = _bidderRegistry[bidRequest.bidderCode];
        _config_js__WEBPACK_IMPORTED_MODULE_1__.config.runWithBidder(bidRequest.bidderCode, function () {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logMessage)("CALLING BIDDER");
          _events_js__WEBPACK_IMPORTED_MODULE_9__.emit(_constants_json__WEBPACK_IMPORTED_MODULE_10__.EVENTS.BID_REQUESTED, bidRequest);
        });
        var ajax = (0,_ajax_js__WEBPACK_IMPORTED_MODULE_15__.ajaxBuilder)(requestBidsTimeout, requestCallbacks ? {
          request: requestCallbacks.request.bind(null, bidRequest.bidderCode),
          done: requestCallbacks.done
        } : undefined);
        var adapterDone = doneCb.bind(bidRequest);
        try {
          _config_js__WEBPACK_IMPORTED_MODULE_1__.config.runWithBidder(bidRequest.bidderCode, _utils_js__WEBPACK_IMPORTED_MODULE_2__.bind.call(adapter.callBids, adapter, bidRequest, addBidResponse, adapterDone, ajax, onTimelyResponse, _config_js__WEBPACK_IMPORTED_MODULE_1__.config.callbackWithBidder(bidRequest.bidderCode)));
        } catch (e) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)("".concat(bidRequest.bidderCode, " Bid Adapter emitted an uncaught error when parsing their bidRequest"), {
            e: e,
            bidRequest: bidRequest
          });
          adapterDone();
        }
      });
    };
    function getSupportedMediaTypes(bidderCode) {
      var supportedMediaTypes = [];
      if ((0,_polyfill_js__WEBPACK_IMPORTED_MODULE_13__.includes)(adapterManager.videoAdapters, bidderCode)) supportedMediaTypes.push('video');
      if ( true && (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_13__.includes)(_native_js__WEBPACK_IMPORTED_MODULE_11__.nativeAdapters, bidderCode)) supportedMediaTypes.push('native');
      return supportedMediaTypes;
    }
    adapterManager.videoAdapters = []; // added by adapterLoader for now
    
    adapterManager.registerBidAdapter = function (bidAdapter, bidderCode) {
      var _ref4 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref4$supportedMediaT = _ref4.supportedMediaTypes,
        supportedMediaTypes = _ref4$supportedMediaT === void 0 ? [] : _ref4$supportedMediaT;
      if (bidAdapter && bidderCode) {
        if (typeof bidAdapter.callBids === 'function') {
          _bidderRegistry[bidderCode] = bidAdapter;
          if ((0,_polyfill_js__WEBPACK_IMPORTED_MODULE_13__.includes)(supportedMediaTypes, 'video')) {
            adapterManager.videoAdapters.push(bidderCode);
          }
          if ( true && (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_13__.includes)(supportedMediaTypes, 'native')) {
            _native_js__WEBPACK_IMPORTED_MODULE_11__.nativeAdapters.push(bidderCode);
          }
        } else {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)('Bidder adaptor error for bidder code: ' + bidderCode + 'bidder must implement a callBids() function');
        }
      } else {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)('bidAdapter or bidderCode not specified');
      }
    };
    adapterManager.aliasBidAdapter = function (bidderCode, alias, options) {
      var existingAlias = _bidderRegistry[alias];
      if (typeof existingAlias === 'undefined') {
        var bidAdapter = _bidderRegistry[bidderCode];
        if (typeof bidAdapter === 'undefined') {
          // check if alias is part of s2sConfig and allow them to register if so (as base bidder may be s2s-only)
          var nonS2SAlias = [];
          _s2sConfigs.forEach(function (s2sConfig) {
            if (s2sConfig.bidders && s2sConfig.bidders.length) {
              var s2sBidders = s2sConfig && s2sConfig.bidders;
              if (!(s2sConfig && (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_13__.includes)(s2sBidders, alias))) {
                nonS2SAlias.push(bidderCode);
              } else {
                _aliasRegistry[alias] = bidderCode;
              }
            }
          });
          nonS2SAlias.forEach(function (bidderCode) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)('bidderCode "' + bidderCode + '" is not an existing bidder.', 'adapterManager.aliasBidAdapter');
          });
        } else {
          try {
            var newAdapter;
            var supportedMediaTypes = getSupportedMediaTypes(bidderCode);
            // Have kept old code to support backward compatibilitiy.
            // Remove this if loop when all adapters are supporting bidderFactory. i.e When Prebid.js is 1.0
            if (bidAdapter.constructor.prototype != Object.prototype) {
              newAdapter = new bidAdapter.constructor();
              newAdapter.setBidderCode(alias);
            } else {
              var spec = bidAdapter.getSpec();
              var gvlid = options && options.gvlid;
              var skipPbsAliasing = options && options.skipPbsAliasing;
              newAdapter = (0,_adapters_bidderFactory_js__WEBPACK_IMPORTED_MODULE_16__.newBidder)(Object.assign({}, spec, {
                code: alias,
                gvlid: gvlid,
                skipPbsAliasing: skipPbsAliasing
              }));
              _aliasRegistry[alias] = bidderCode;
            }
            adapterManager.registerBidAdapter(newAdapter, alias, {
              supportedMediaTypes: supportedMediaTypes
            });
          } catch (e) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)(bidderCode + ' bidder does not currently support aliasing.', 'adapterManager.aliasBidAdapter');
          }
        }
      } else {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logMessage)('alias name "' + alias + '" has been already specified.');
      }
    };
    adapterManager.registerAnalyticsAdapter = function (_ref5) {
      var adapter = _ref5.adapter,
        code = _ref5.code,
        gvlid = _ref5.gvlid;
      if (adapter && code) {
        if (typeof adapter.enableAnalytics === 'function') {
          adapter.code = code;
          _analyticsRegistry[code] = {
            adapter: adapter,
            gvlid: gvlid
          };
        } else {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)("Prebid Error: Analytics adaptor error for analytics \"".concat(code, "\"\n        analytics adapter must implement an enableAnalytics() function"));
        }
      } else {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)('Prebid Error: analyticsAdapter or analyticsCode not specified');
      }
    };
    adapterManager.enableAnalytics = function (config) {
      if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(config)) {
        config = [config];
      }
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__._each)(config, function (adapterConfig) {
        var entry = _analyticsRegistry[adapterConfig.provider];
        if (entry && entry.adapter) {
          entry.adapter.enableAnalytics(adapterConfig);
        } else {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)("Prebid Error: no analytics adapter found in registry for '".concat(adapterConfig.provider, "'."));
        }
      });
    };
    adapterManager.getBidAdapter = function (bidder) {
      return _bidderRegistry[bidder];
    };
    adapterManager.getAnalyticsAdapter = function (code) {
      return _analyticsRegistry[code];
    };
    function getBidderMethod(bidder, method) {
      var adapter = _bidderRegistry[bidder];
      var spec = (adapter === null || adapter === void 0 ? void 0 : adapter.getSpec) && adapter.getSpec();
      if (spec && spec[method] && typeof spec[method] === 'function') {
        return [spec, spec[method]];
      }
    }
    function invokeBidderMethod(bidder, method, spec, fn) {
      try {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logInfo)("Invoking ".concat(bidder, ".").concat(method));
        for (var _len = arguments.length, params = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
          params[_key - 4] = arguments[_key];
        }
        _config_js__WEBPACK_IMPORTED_MODULE_1__.config.runWithBidder(bidder, fn.bind.apply(fn, [spec].concat(params)));
      } catch (e) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)("Error calling ".concat(method, " of ").concat(bidder));
      }
    }
    function tryCallBidderMethod(bidder, method, param) {
      var target = getBidderMethod(bidder, method);
      if (target != null) {
        invokeBidderMethod.apply(void 0, [bidder, method].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_17__["default"])(target), [param]));
      }
    }
    adapterManager.callTimedOutBidders = function (adUnits, timedOutBidders, cbTimeout) {
      timedOutBidders = timedOutBidders.map(function (timedOutBidder) {
        // Adding user configured params & timeout to timeout event data
        timedOutBidder.params = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.getUserConfiguredParams)(adUnits, timedOutBidder.adUnitCode, timedOutBidder.bidder);
        timedOutBidder.timeout = cbTimeout;
        return timedOutBidder;
      });
      timedOutBidders = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.groupBy)(timedOutBidders, 'bidder');
      Object.keys(timedOutBidders).forEach(function (bidder) {
        tryCallBidderMethod(bidder, 'onTimeout', timedOutBidders[bidder]);
      });
    };
    adapterManager.callBidWonBidder = function (bidder, bid, adUnits) {
      // Adding user configured params to bidWon event data
      bid.params = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.getUserConfiguredParams)(adUnits, bid.adUnitCode, bid.bidder);
      _adUnits_js__WEBPACK_IMPORTED_MODULE_4__.adunitCounter.incrementBidderWinsCounter(bid.adUnitCode, bid.bidder);
      tryCallBidderMethod(bidder, 'onBidWon', bid);
    };
    adapterManager.callSetTargetingBidder = function (bidder, bid) {
      tryCallBidderMethod(bidder, 'onSetTargeting', bid);
    };
    adapterManager.callBidViewableBidder = function (bidder, bid) {
      tryCallBidderMethod(bidder, 'onBidViewable', bid);
    };
    adapterManager.callBidderError = function (bidder, error, bidderRequest) {
      var param = {
        error: error,
        bidderRequest: bidderRequest
      };
      tryCallBidderMethod(bidder, 'onBidderError', param);
    };
    function resolveAlias(alias) {
      var seen = new Set();
      while (_aliasRegistry.hasOwnProperty(alias) && !seen.has(alias)) {
        seen.add(alias);
        alias = _aliasRegistry[alias];
      }
      return alias;
    }
    /**
     * Ask every adapter to delete PII.
     * See https://github.com/prebid/Prebid.js/issues/9081
     */
    adapterManager.callDataDeletionRequest = (0,_hook_js__WEBPACK_IMPORTED_MODULE_5__.hook)('sync', function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      var method = 'onDataDeletionRequest';
      Object.keys(_bidderRegistry).filter(function (bidder) {
        return !_aliasRegistry.hasOwnProperty(bidder);
      }).forEach(function (bidder) {
        var target = getBidderMethod(bidder, method);
        if (target != null) {
          var bidderRequests = _auctionManager_js__WEBPACK_IMPORTED_MODULE_18__.auctionManager.getBidsRequested().filter(function (br) {
            return resolveAlias(br.bidderCode) === bidder;
          });
          invokeBidderMethod.apply(void 0, [bidder, method].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_17__["default"])(target), [bidderRequests], args));
        }
      });
      Object.entries(_analyticsRegistry).forEach(function (_ref6) {
        var _entry$adapter;
        var _ref7 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_14__["default"])(_ref6, 2),
          name = _ref7[0],
          entry = _ref7[1];
        var fn = entry === null || entry === void 0 ? void 0 : (_entry$adapter = entry.adapter) === null || _entry$adapter === void 0 ? void 0 : _entry$adapter[method];
        if (typeof fn === 'function') {
          try {
            fn.apply(entry.adapter, args);
          } catch (e) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)("error calling ".concat(method, " of ").concat(name), e);
          }
        }
      });
    });
    /* harmony default export */ __webpack_exports__["default"] = (adapterManager);
    
    /***/ }),
    
    /***/ "./src/adapters/bidderFactory.js":
    /*!***************************************!*\
      !*** ./src/adapters/bidderFactory.js ***!
      \***************************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "getIabSubCategory": function() { return /* binding */ getIabSubCategory; },
    /* harmony export */   "newBidder": function() { return /* binding */ newBidder; },
    /* harmony export */   "registerBidder": function() { return /* binding */ registerBidder; }
    /* harmony export */ });
    /* unused harmony exports storage, processBidderRequests, registerSyncInner, addComponentAuction, preloadBidderMappingFile, isValid */
    /* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
    /* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");
    /* harmony import */ var _adapter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../adapter.js */ "./src/adapter.js");
    /* harmony import */ var _adapterManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../adapterManager.js */ "./src/adapterManager.js");
    /* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../config.js */ "./src/config.js");
    /* harmony import */ var _bidfactory_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../bidfactory.js */ "./src/bidfactory.js");
    /* harmony import */ var _userSync_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../userSync.js */ "./src/userSync.js");
    /* harmony import */ var _native_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../native.js */ "./src/native.js");
    /* harmony import */ var _video_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../video.js */ "./src/video.js");
    /* harmony import */ var _constants_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../constants.json */ "./src/constants.json");
    /* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../events.js */ "./src/events.js");
    /* harmony import */ var _polyfill_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../polyfill.js */ "./src/polyfill.js");
    /* harmony import */ var _ajax_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../ajax.js */ "./src/ajax.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils.js */ "./src/utils.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../utils.js */ "./node_modules/dlv/index.js");
    /* harmony import */ var _mediaTypes_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../mediaTypes.js */ "./src/mediaTypes.js");
    /* harmony import */ var _hook_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../hook.js */ "./src/hook.js");
    /* harmony import */ var _storageManager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../storageManager.js */ "./src/storageManager.js");
    /* harmony import */ var _auctionManager_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../auctionManager.js */ "./src/auctionManager.js");
    /* harmony import */ var _bidderSettings_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../bidderSettings.js */ "./src/bidderSettings.js");
    /* harmony import */ var _utils_perfMetrics_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/perfMetrics.js */ "./src/utils/perfMetrics.js");
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    var storage = (0,_storageManager_js__WEBPACK_IMPORTED_MODULE_0__.getCoreStorageManager)('bidderFactory');
    
    /**
     * This file aims to support Adapters during the Prebid 0.x -> 1.x transition.
     *
     * Prebid 1.x and Prebid 0.x will be in separate branches--perhaps for a long time.
     * This function defines an API for adapter construction which is compatible with both versions.
     * Adapters which use it can maintain their code in master, and only this file will need to change
     * in the 1.x branch.
     *
     * Typical usage looks something like:
     *
     * const adapter = registerBidder({
     *   code: 'myBidderCode',
     *   aliases: ['alias1', 'alias2'],
     *   supportedMediaTypes: ['video', 'native'],
     *   isBidRequestValid: function(paramsObject) { return true/false },
     *   buildRequests: function(bidRequests, bidderRequest) { return some ServerRequest(s) },
     *   interpretResponse: function(oneServerResponse) { return some Bids, or throw an error. }
     * });
     *
     * @see BidderSpec for the full API and more thorough descriptions.
     *
     */
    
    /**
     * @typedef {object} BidderSpec An object containing the adapter-specific functions needed to
     * make a Bidder.
     *
     * @property {string} code A code which will be used to uniquely identify this bidder. This should be the same
     *   one as is used in the call to registerBidAdapter
     * @property {string[]} [aliases] A list of aliases which should also resolve to this bidder.
     * @property {MediaType[]} [supportedMediaTypes]: A list of Media Types which the adapter supports.
     * @property {function(object): boolean} isBidRequestValid Determines whether or not the given bid has all the params
     *   needed to make a valid request.
     * @property {function(BidRequest[], bidderRequest): ServerRequest|ServerRequest[]} buildRequests Build the request to the Server
     *   which requests Bids for the given array of Requests. Each BidRequest in the argument array is guaranteed to have
     *   passed the isBidRequestValid() test.
     * @property {function(ServerResponse, BidRequest): Bid[]} interpretResponse Given a successful response from the Server,
     *   interpret it and return the Bid objects. This function will be run inside a try/catch.
     *   If it throws any errors, your bids will be discarded.
     * @property {function(SyncOptions, ServerResponse[]): UserSync[]} [getUserSyncs] Given an array of all the responses
     *   from the server, determine which user syncs should occur. The argument array will contain every element
     *   which has been sent through to interpretResponse. The order of syncs in this array matters. The most
     *   important ones should come first, since publishers may limit how many are dropped on their page.
     * @property {function(object): object} transformBidParams Updates bid params before creating bid request
     }}
     */
    
    /**
     * @typedef {object} BidRequest
     *
     * @property {string} bidId A string which uniquely identifies this BidRequest in the current Auction.
     * @property {object} params Any bidder-specific params which the publisher used in their bid request.
     */
    
    /**
     * @typedef {object} BidderAuctionResponse An object encapsulating an adapter response for current Auction
     *
     * @property {Array<Bid>} bids Contextual bids returned by this adapter, if any
     * @property {object|null} fledgeAuctionConfigs Optional FLEDGE response, as a map of impid -> auction_config
     */
    
    /**
     * @typedef {object} ServerRequest
     *
     * @property {('GET'|'POST')} method The type of request which this is.
     * @property {string} url The endpoint for the request. For example, "//bids.example.com".
     * @property {string|object} data Data to be sent in the request.
     * @property {object} options Content-Type set in the header of the bid request, overrides default 'text/plain'.
     *   If this is a GET request, they'll become query params. If it's a POST request, they'll be added to the body.
     *   Strings will be added as-is. Objects will be unpacked into query params based on key/value mappings, or
     *   JSON-serialized into the Request body.
     */
    
    /**
     * @typedef {object} ServerResponse
     *
     * @property {*} body The response body. If this is legal JSON, then it will be parsed. Otherwise it'll be a
     *   string with the body's content.
     * @property {{get: function(string): string} headers The response headers.
     *   Call this like `ServerResponse.headers.get("Content-Type")`
     */
    
    /**
     * @typedef {object} Bid
     *
     * @property {string} requestId The specific BidRequest which this bid is aimed at.
     *   This should match the BidRequest.bidId which this Bid targets.
     * @property {string} ad A URL which can be used to load this ad, if it's chosen by the publisher.
     * @property {string} currency The currency code for the cpm value
     * @property {number} cpm The bid price, in US cents per thousand impressions.
     * @property {number} ttl Time-to-live - how long (in seconds) Prebid can use this bid.
     * @property {boolean} netRevenue Boolean defining whether the bid is Net or Gross.  The default is true (Net).
     * @property {number} height The height of the ad, in pixels.
     * @property {number} width The width of the ad, in pixels.
     *
     * @property {object} [native] Object for storing native creative assets
     * @property {object} [video] Object for storing video response data
     * @property {object} [meta] Object for storing bid meta data
     * @property {string} [meta.primaryCatId] The IAB primary category ID
     * @property [Renderer] renderer A Renderer which can be used as a default for this bid,
     *   if the publisher doesn't override it. This is only relevant for Outstream Video bids.
     */
    
    /**
     * @typedef {Object} SyncOptions
     *
     * An object containing information about usersyncs which the adapter should obey.
     *
     * @property {boolean} iframeEnabled True if iframe usersyncs are allowed, and false otherwise
     * @property {boolean} pixelEnabled True if image usersyncs are allowed, and false otherwise
     */
    
    /**
     * TODO: Move this to the UserSync module after that PR is merged.
     *
     * @typedef {object} UserSync
     *
     * @property {('image'|'iframe')} type The type of user sync to be done.
     * @property {string} url The URL which makes the sync happen.
     */
    
    // common params for all mediaTypes
    var COMMON_BID_RESPONSE_KEYS = ['cpm', 'ttl', 'creativeId', 'netRevenue', 'currency'];
    var DEFAULT_REFRESHIN_DAYS = 1;
    
    /**
     * Register a bidder with prebid, using the given spec.
     *
     * If possible, Adapter modules should use this function instead of adapterManager.registerBidAdapter().
     *
     * @param {BidderSpec} spec An object containing the bare-bones functions we need to make a Bidder.
     */
    function registerBidder(spec) {
      var mediaTypes = Array.isArray(spec.supportedMediaTypes) ? {
        supportedMediaTypes: spec.supportedMediaTypes
      } : undefined;
      function putBidder(spec) {
        var bidder = newBidder(spec);
        _adapterManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].registerBidAdapter(bidder, spec.code, mediaTypes);
      }
      putBidder(spec);
      if (Array.isArray(spec.aliases)) {
        spec.aliases.forEach(function (alias) {
          var aliasCode = alias;
          var gvlid;
          var skipPbsAliasing;
          if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isPlainObject)(alias)) {
            aliasCode = alias.code;
            gvlid = alias.gvlid;
            skipPbsAliasing = alias.skipPbsAliasing;
          }
          _adapterManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].aliasRegistry[aliasCode] = spec.code;
          putBidder(Object.assign({}, spec, {
            code: aliasCode,
            gvlid: gvlid,
            skipPbsAliasing: skipPbsAliasing
          }));
        });
      }
    }
    
    /**
     * Make a new bidder from the given spec. This is exported mainly for testing.
     * Adapters will probably find it more convenient to use registerBidder instead.
     *
     * @param {BidderSpec} spec
     */
    function newBidder(spec) {
      return Object.assign(new _adapter_js__WEBPACK_IMPORTED_MODULE_3__["default"](spec.code), {
        getSpec: function getSpec() {
          return Object.freeze(spec);
        },
        registerSyncs: registerSyncs,
        callBids: function callBids(bidderRequest, addBidResponse, done, ajax, onTimelyResponse, configEnabledCallback) {
          if (!Array.isArray(bidderRequest.bids)) {
            return;
          }
          var adUnitCodesHandled = {};
          function addBidWithCode(adUnitCode, bid) {
            var metrics = (0,_utils_perfMetrics_js__WEBPACK_IMPORTED_MODULE_4__.useMetrics)(bid.metrics);
            metrics.checkpoint('addBidResponse');
            adUnitCodesHandled[adUnitCode] = true;
            if (metrics.measureTime('addBidResponse.validate', function () {
              return isValid(adUnitCode, bid);
            })) {
              addBidResponse(adUnitCode, bid);
            } else {
              addBidResponse.reject(adUnitCode, bid, _constants_json__WEBPACK_IMPORTED_MODULE_5__.REJECTION_REASON.INVALID);
            }
          }
    
          // After all the responses have come back, call done() and
          // register any required usersync pixels.
          var responses = [];
          function afterAllResponses() {
            done();
            _config_js__WEBPACK_IMPORTED_MODULE_6__.config.runWithBidder(spec.code, function () {
              _events_js__WEBPACK_IMPORTED_MODULE_7__.emit(_constants_json__WEBPACK_IMPORTED_MODULE_5__.EVENTS.BIDDER_DONE, bidderRequest);
              registerSyncs(responses, bidderRequest.gdprConsent, bidderRequest.uspConsent, bidderRequest.gppConsent);
            });
          }
          var validBidRequests = adapterMetrics(bidderRequest).measureTime('validate', function () {
            return bidderRequest.bids.filter(filterAndWarn);
          });
          if (validBidRequests.length === 0) {
            afterAllResponses();
            return;
          }
          var bidRequestMap = {};
          validBidRequests.forEach(function (bid) {
            bidRequestMap[bid.bidId] = bid;
            // Delete this once we are 1.0
            if (!bid.adUnitCode) {
              bid.adUnitCode = bid.placementCode;
            }
          });
          processBidderRequests(spec, validBidRequests, bidderRequest, ajax, configEnabledCallback, {
            onRequest: function onRequest(requestObject) {
              return _events_js__WEBPACK_IMPORTED_MODULE_7__.emit(_constants_json__WEBPACK_IMPORTED_MODULE_5__.EVENTS.BEFORE_BIDDER_HTTP, bidderRequest, requestObject);
            },
            onResponse: function onResponse(resp) {
              onTimelyResponse(spec.code);
              responses.push(resp);
            },
            /** Process eventual BidderAuctionResponse.fledgeAuctionConfig field in response.
             * @param {Array<FledgeAuctionConfig>} fledgeAuctionConfigs
             */
            onFledgeAuctionConfigs: function onFledgeAuctionConfigs(fledgeAuctionConfigs) {
              fledgeAuctionConfigs.forEach(function (fledgeAuctionConfig) {
                var bidRequest = bidRequestMap[fledgeAuctionConfig.bidId];
                if (bidRequest) {
                  addComponentAuction(bidRequest, fledgeAuctionConfig);
                }
              });
            },
            // If the server responds with an error, there's not much we can do beside logging.
            onError: function onError(errorMessage, error) {
              onTimelyResponse(spec.code);
              _adapterManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].callBidderError(spec.code, error, bidderRequest);
              _events_js__WEBPACK_IMPORTED_MODULE_7__.emit(_constants_json__WEBPACK_IMPORTED_MODULE_5__.EVENTS.BIDDER_ERROR, {
                error: error,
                bidderRequest: bidderRequest
              });
              (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)("Server call for ".concat(spec.code, " failed: ").concat(errorMessage, " ").concat(error.status, ". Continuing without bids."));
            },
            onBid: function onBid(bid) {
              var bidRequest = bidRequestMap[bid.requestId];
              if (bidRequest) {
                bid.adapterCode = bidRequest.bidder;
                if (isInvalidAlternateBidder(bid.bidderCode, bidRequest.bidder)) {
                  (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)("".concat(bid.bidderCode, " is not a registered partner or known bidder of ").concat(bidRequest.bidder, ", hence continuing without bid. If you wish to support this bidder, please mark allowAlternateBidderCodes as true in bidderSettings."));
                  addBidResponse.reject(bidRequest.adUnitCode, bid, _constants_json__WEBPACK_IMPORTED_MODULE_5__.REJECTION_REASON.BIDDER_DISALLOWED);
                  return;
                }
                // creating a copy of original values as cpm and currency are modified later
                bid.originalCpm = bid.cpm;
                bid.originalCurrency = bid.currency;
                bid.meta = bid.meta || Object.assign({}, bid[bidRequest.bidder]);
                var prebidBid = Object.assign((0,_bidfactory_js__WEBPACK_IMPORTED_MODULE_8__.createBid)(_constants_json__WEBPACK_IMPORTED_MODULE_5__.STATUS.GOOD, bidRequest), bid);
                addBidWithCode(bidRequest.adUnitCode, prebidBid);
              } else {
                (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)("Bidder ".concat(spec.code, " made bid for unknown request ID: ").concat(bid.requestId, ". Ignoring."));
                addBidResponse.reject(null, bid, _constants_json__WEBPACK_IMPORTED_MODULE_5__.REJECTION_REASON.INVALID_REQUEST_ID);
              }
            },
            onCompletion: afterAllResponses
          });
        }
      });
      function isInvalidAlternateBidder(responseBidder, requestBidder) {
        var allowAlternateBidderCodes = _bidderSettings_js__WEBPACK_IMPORTED_MODULE_9__.bidderSettings.get(requestBidder, 'allowAlternateBidderCodes') || false;
        var alternateBiddersList = _bidderSettings_js__WEBPACK_IMPORTED_MODULE_9__.bidderSettings.get(requestBidder, 'allowedAlternateBidderCodes');
        if (!!responseBidder && !!requestBidder && requestBidder !== responseBidder) {
          alternateBiddersList = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(alternateBiddersList) ? alternateBiddersList.map(function (val) {
            return val.trim().toLowerCase();
          }).filter(function (val) {
            return !!val;
          }).filter(_utils_js__WEBPACK_IMPORTED_MODULE_2__.uniques) : alternateBiddersList;
          if (!allowAlternateBidderCodes || (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(alternateBiddersList) && alternateBiddersList[0] !== '*' && !alternateBiddersList.includes(responseBidder)) {
            return true;
          }
        }
        return false;
      }
      function registerSyncs(responses, gdprConsent, uspConsent, gppConsent) {
        registerSyncInner(spec, responses, gdprConsent, uspConsent, gppConsent);
      }
      function filterAndWarn(bid) {
        if (!spec.isBidRequestValid(bid)) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)("Invalid bid sent to bidder ".concat(spec.code, ": ").concat(JSON.stringify(bid)));
          return false;
        }
        return true;
      }
    }
    
    /**
     * Run a set of bid requests - that entails converting them to HTTP requests, sending
     * them over the network, and parsing the responses.
     *
     * @param spec bid adapter spec
     * @param bids bid requests to run
     * @param bidderRequest the bid request object that `bids` is connected to
     * @param ajax ajax method to use
     * @param wrapCallback {function(callback)} a function used to wrap every callback (for the purpose of `config.currentBidder`)
     * @param onRequest {function({})} invoked once for each HTTP request built by the adapter - with the raw request
     * @param onResponse {function({})} invoked once on each successful HTTP response - with the raw response
     * @param onError {function(String, {})} invoked once for each HTTP error - with status code and response
     * @param onBid {function({})} invoked once for each bid in the response - with the bid as returned by interpretResponse
     * @param onCompletion {function()} invoked once when all bid requests have been processed
     */
    var processBidderRequests = (0,_hook_js__WEBPACK_IMPORTED_MODULE_10__.hook)('sync', function (spec, bids, bidderRequest, ajax, wrapCallback, _ref) {
      var onRequest = _ref.onRequest,
        onResponse = _ref.onResponse,
        onFledgeAuctionConfigs = _ref.onFledgeAuctionConfigs,
        onError = _ref.onError,
        onBid = _ref.onBid,
        onCompletion = _ref.onCompletion;
      var metrics = adapterMetrics(bidderRequest);
      onCompletion = metrics.startTiming('total').stopBefore(onCompletion);
      var requests = metrics.measureTime('buildRequests', function () {
        return spec.buildRequests(bids, bidderRequest);
      });
      if (!requests || requests.length === 0) {
        onCompletion();
        return;
      }
      if (!Array.isArray(requests)) {
        requests = [requests];
      }
      var requestDone = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.delayExecution)(onCompletion, requests.length);
      requests.forEach(function (request) {
        var requestMetrics = metrics.fork();
        function addBid(bid) {
          if (bid != null) bid.metrics = requestMetrics.fork().renameWith();
          onBid(bid);
        }
        // If the server responds successfully, use the adapter code to unpack the Bids from it.
        // If the adapter code fails, no bids should be added. After all the bids have been added,
        // make sure to call the `requestDone` function so that we're one step closer to calling onCompletion().
        var onSuccess = wrapCallback(function (response, responseObj) {
          networkDone();
          try {
            response = JSON.parse(response);
          } catch (e) {/* response might not be JSON... that's ok. */}
    
          // Make response headers available for #1742. These are lazy-loaded because most adapters won't need them.
          response = {
            body: response,
            headers: headerParser(responseObj)
          };
          onResponse(response);
          try {
            response = requestMetrics.measureTime('interpretResponse', function () {
              return spec.interpretResponse(response, request);
            });
          } catch (err) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)("Bidder ".concat(spec.code, " failed to interpret the server's response. Continuing without bids"), null, err);
            requestDone();
            return;
          }
          var bids;
          // Extract additional data from a structured {BidderAuctionResponse} response
          if (response && (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(response.fledgeAuctionConfigs)) {
            onFledgeAuctionConfigs(response.fledgeAuctionConfigs);
            bids = response.bids;
          } else {
            bids = response;
          }
          if (bids) {
            if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(bids)) {
              bids.forEach(addBid);
            } else {
              addBid(bids);
            }
          }
          requestDone();
          function headerParser(xmlHttpResponse) {
            return {
              get: responseObj.getResponseHeader.bind(responseObj)
            };
          }
        });
        var onFailure = wrapCallback(function (errorMessage, error) {
          networkDone();
          onError(errorMessage, error);
          requestDone();
        });
        onRequest(request);
        var networkDone = requestMetrics.startTiming('net');
        switch (request.method) {
          case 'GET':
            ajax("".concat(request.url).concat(formatGetParameters(request.data)), {
              success: onSuccess,
              error: onFailure
            }, undefined, Object.assign({
              method: 'GET',
              withCredentials: true
            }, request.options));
            break;
          case 'POST':
            ajax(request.url, {
              success: onSuccess,
              error: onFailure
            }, typeof request.data === 'string' ? request.data : JSON.stringify(request.data), Object.assign({
              method: 'POST',
              contentType: 'text/plain',
              withCredentials: true
            }, request.options));
            break;
          default:
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)("Skipping invalid request from ".concat(spec.code, ". Request type ").concat(request.type, " must be GET or POST"));
            requestDone();
        }
        function formatGetParameters(data) {
          if (data) {
            return "?".concat((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_11__["default"])(data) === 'object' ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.parseQueryStringParameters)(data) : data);
          }
          return '';
        }
      });
    }, 'processBidderRequests');
    var registerSyncInner = (0,_hook_js__WEBPACK_IMPORTED_MODULE_10__.hook)('async', function (spec, responses, gdprConsent, uspConsent, gppConsent) {
      var aliasSyncEnabled = _config_js__WEBPACK_IMPORTED_MODULE_6__.config.getConfig('userSync.aliasSyncEnabled');
      if (spec.getUserSyncs && (aliasSyncEnabled || !_adapterManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].aliasRegistry[spec.code])) {
        var filterConfig = _config_js__WEBPACK_IMPORTED_MODULE_6__.config.getConfig('userSync.filterSettings');
        var syncs = spec.getUserSyncs({
          iframeEnabled: !!(filterConfig && (filterConfig.iframe || filterConfig.all)),
          pixelEnabled: !!(filterConfig && (filterConfig.image || filterConfig.all))
        }, responses, gdprConsent, uspConsent, gppConsent);
        if (syncs) {
          if (!Array.isArray(syncs)) {
            syncs = [syncs];
          }
          syncs.forEach(function (sync) {
            _userSync_js__WEBPACK_IMPORTED_MODULE_12__.userSync.registerSync(sync.type, spec.code, sync.url);
          });
        }
      }
    }, 'registerSyncs');
    var addComponentAuction = (0,_hook_js__WEBPACK_IMPORTED_MODULE_10__.hook)('sync', function (_bidRequest, fledgeAuctionConfig) {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logInfo)("bidderFactory.addComponentAuction", fledgeAuctionConfig);
    }, 'addComponentAuction');
    function preloadBidderMappingFile(fn, adUnits) {
      if (!_config_js__WEBPACK_IMPORTED_MODULE_6__.config.getConfig('adpod.brandCategoryExclusion')) {
        return fn.call(this, adUnits);
      }
      var adPodBidders = adUnits.filter(function (adUnit) {
        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_13__["default"])(adUnit, 'mediaTypes.video.context') === _mediaTypes_js__WEBPACK_IMPORTED_MODULE_14__.ADPOD;
      }).map(function (adUnit) {
        return adUnit.bids.map(function (bid) {
          return bid.bidder;
        });
      }).reduce(_utils_js__WEBPACK_IMPORTED_MODULE_2__.flatten, []).filter(_utils_js__WEBPACK_IMPORTED_MODULE_2__.uniques);
      adPodBidders.forEach(function (bidder) {
        var bidderSpec = _adapterManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].getBidAdapter(bidder);
        if (bidderSpec.getSpec().getMappingFileInfo) {
          var info = bidderSpec.getSpec().getMappingFileInfo();
          var refreshInDays = info.refreshInDays ? info.refreshInDays : DEFAULT_REFRESHIN_DAYS;
          var key = info.localStorageKey ? info.localStorageKey : bidderSpec.getSpec().code;
          var mappingData = storage.getDataFromLocalStorage(key);
          try {
            mappingData = mappingData ? JSON.parse(mappingData) : undefined;
            if (!mappingData || (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.timestamp)() > mappingData.lastUpdated + refreshInDays * 24 * 60 * 60 * 1000) {
              (0,_ajax_js__WEBPACK_IMPORTED_MODULE_15__.ajax)(info.url, {
                success: function success(response) {
                  try {
                    response = JSON.parse(response);
                    var mapping = {
                      lastUpdated: (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.timestamp)(),
                      mapping: response.mapping
                    };
                    storage.setDataInLocalStorage(key, JSON.stringify(mapping));
                  } catch (error) {
                    (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)("Failed to parse ".concat(bidder, " bidder translation mapping file"));
                  }
                },
                error: function error() {
                  (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)("Failed to load ".concat(bidder, " bidder translation file"));
                }
              });
            }
          } catch (error) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)("Failed to parse ".concat(bidder, " bidder translation mapping file"));
          }
        }
      });
      fn.call(this, adUnits);
    }
    (0,_hook_js__WEBPACK_IMPORTED_MODULE_10__.getHook)('checkAdUnitSetup').before(preloadBidderMappingFile);
    
    /**
     * Reads the data stored in localstorage and returns iab subcategory
     * @param {string} bidderCode bidderCode
     * @param {string} category bidders category
     */
    function getIabSubCategory(bidderCode, category) {
      var bidderSpec = _adapterManager_js__WEBPACK_IMPORTED_MODULE_1__["default"].getBidAdapter(bidderCode);
      if (bidderSpec.getSpec().getMappingFileInfo) {
        var info = bidderSpec.getSpec().getMappingFileInfo();
        var key = info.localStorageKey ? info.localStorageKey : bidderSpec.getBidderCode();
        var data = storage.getDataFromLocalStorage(key);
        if (data) {
          try {
            data = JSON.parse(data);
          } catch (error) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)("Failed to parse ".concat(bidderCode, " mapping data stored in local storage"));
          }
          return data.mapping[category] ? data.mapping[category] : null;
        }
      }
    }
    
    // check that the bid has a width and height set
    function validBidSize(adUnitCode, bid) {
      var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref2$index = _ref2.index,
        index = _ref2$index === void 0 ? _auctionManager_js__WEBPACK_IMPORTED_MODULE_16__.auctionManager.index : _ref2$index;
      if ((bid.width || parseInt(bid.width, 10) === 0) && (bid.height || parseInt(bid.height, 10) === 0)) {
        bid.width = parseInt(bid.width, 10);
        bid.height = parseInt(bid.height, 10);
        return true;
      }
      var bidRequest = index.getBidRequest(bid);
      var mediaTypes = index.getMediaTypes(bid);
      var sizes = bidRequest && bidRequest.sizes || mediaTypes && mediaTypes.banner && mediaTypes.banner.sizes;
      var parsedSizes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.parseSizesInput)(sizes);
    
      // if a banner impression has one valid size, we assign that size to any bid
      // response that does not explicitly set width or height
      if (parsedSizes.length === 1) {
        var _parsedSizes$0$split = parsedSizes[0].split('x'),
          _parsedSizes$0$split2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_17__["default"])(_parsedSizes$0$split, 2),
          width = _parsedSizes$0$split2[0],
          height = _parsedSizes$0$split2[1];
        bid.width = parseInt(width, 10);
        bid.height = parseInt(height, 10);
        return true;
      }
      return false;
    }
    
    // Validate the arguments sent to us by the adapter. If this returns false, the bid should be totally ignored.
    function isValid(adUnitCode, bid) {
      var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref3$index = _ref3.index,
        index = _ref3$index === void 0 ? _auctionManager_js__WEBPACK_IMPORTED_MODULE_16__.auctionManager.index : _ref3$index;
      function hasValidKeys() {
        var bidKeys = Object.keys(bid);
        return COMMON_BID_RESPONSE_KEYS.every(function (key) {
          return (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_18__.includes)(bidKeys, key) && !(0,_polyfill_js__WEBPACK_IMPORTED_MODULE_18__.includes)([undefined, null], bid[key]);
        });
      }
      function errorMessage(msg) {
        return "Invalid bid from ".concat(bid.bidderCode, ". Ignoring bid: ").concat(msg);
      }
      if (!adUnitCode) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)('No adUnitCode was supplied to addBidResponse.');
        return false;
      }
      if (!bid) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)("Some adapter tried to add an undefined bid for ".concat(adUnitCode, "."));
        return false;
      }
      if (!hasValidKeys()) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)(errorMessage("Bidder ".concat(bid.bidderCode, " is missing required params. Check http://prebid.org/dev-docs/bidder-adapter-1.html for list of params.")));
        return false;
      }
      if ( true && bid.mediaType === 'native' && !(0,_native_js__WEBPACK_IMPORTED_MODULE_19__.nativeBidIsValid)(bid, {
        index: index
      })) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)(errorMessage('Native bid missing some required properties.'));
        return false;
      }
      if (bid.mediaType === 'video' && !(0,_video_js__WEBPACK_IMPORTED_MODULE_20__.isValidVideoBid)(bid, {
        index: index
      })) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)(errorMessage("Video bid does not have required vastUrl or renderer property"));
        return false;
      }
      if (bid.mediaType === 'banner' && !validBidSize(adUnitCode, bid, {
        index: index
      })) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)(errorMessage("Banner bids require a width and height"));
        return false;
      }
      return true;
    }
    function adapterMetrics(bidderRequest) {
      return (0,_utils_perfMetrics_js__WEBPACK_IMPORTED_MODULE_4__.useMetrics)(bidderRequest.metrics).renameWith(function (n) {
        return ["adapter.client.".concat(n), "adapters.client.".concat(bidderRequest.bidderCode, ".").concat(n)];
      });
    }
    
    /***/ }),
    
    /***/ "./src/adloader.js":
    /*!*************************!*\
      !*** ./src/adloader.js ***!
      \*************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "loadExternalScript": function() { return /* binding */ loadExternalScript; }
    /* harmony export */ });
    /* harmony import */ var _polyfill_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./polyfill.js */ "./src/polyfill.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
    
    
    var _requestCache = new WeakMap();
    // The below list contains modules or vendors whom Prebid allows to load external JS.
    var _approvedLoadExternalJSList = ['debugging', 'adloox', 'criteo', 'outstream', 'adagio', 'spotx', 'browsi', 'brandmetrics', 'justtag', 'tncId', 'akamaidap', 'ftrackId', 'inskin', 'hadron', 'medianet', 'improvedigital', 'aaxBlockmeter', 'pbjs-debug-ui', 'confiant', 'arcspan'];
    
    /**
     * Loads external javascript. Can only be used if external JS is approved by Prebid. See https://github.com/prebid/prebid-js-external-js-template#policy
     * Each unique URL will be loaded at most 1 time.
     * @param {string} url the url to load
     * @param {string} moduleCode bidderCode or module code of the module requesting this resource
     * @param {function} [callback] callback function to be called after the script is loaded
     * @param {Document} [doc] the context document, in which the script will be loaded, defaults to loaded document
     * @param {object} an object of attributes to be added to the script with setAttribute by [key] and [value]; Only the attributes passed in the first request of a url will be added.
     */
    function loadExternalScript(url, moduleCode, callback, doc, attributes) {
      if (!moduleCode || !url) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.logError)('cannot load external script without url and moduleCode');
        return;
      }
      if (!(0,_polyfill_js__WEBPACK_IMPORTED_MODULE_1__.includes)(_approvedLoadExternalJSList, moduleCode)) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.logError)("".concat(moduleCode, " not whitelisted for loading external JavaScript"));
        return;
      }
      if (!doc) {
        doc = document; // provide a "valid" key for the WeakMap
      }
      // only load each asset once
      var storedCachedObject = getCacheObject(doc, url);
      if (storedCachedObject) {
        if (callback && typeof callback === 'function') {
          if (storedCachedObject.loaded) {
            // invokeCallbacks immediately
            callback();
          } else {
            // queue the callback
            storedCachedObject.callbacks.push(callback);
          }
        }
        return storedCachedObject.tag;
      }
      var cachedDocObj = _requestCache.get(doc) || {};
      var cacheObject = {
        loaded: false,
        tag: null,
        callbacks: []
      };
      cachedDocObj[url] = cacheObject;
      _requestCache.set(doc, cachedDocObj);
      if (callback && typeof callback === 'function') {
        cacheObject.callbacks.push(callback);
      }
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.logWarn)("module ".concat(moduleCode, " is loading external JavaScript"));
      return requestResource(url, function () {
        cacheObject.loaded = true;
        try {
          for (var i = 0; i < cacheObject.callbacks.length; i++) {
            cacheObject.callbacks[i]();
          }
        } catch (e) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.logError)('Error executing callback', 'adloader.js:loadExternalScript', e);
        }
      }, doc, attributes);
      function requestResource(tagSrc, callback, doc, attributes) {
        if (!doc) {
          doc = document;
        }
        var jptScript = doc.createElement('script');
        jptScript.type = 'text/javascript';
        jptScript.async = true;
        var cacheObject = getCacheObject(doc, url);
        if (cacheObject) {
          cacheObject.tag = jptScript;
        }
        if (jptScript.readyState) {
          jptScript.onreadystatechange = function () {
            if (jptScript.readyState === 'loaded' || jptScript.readyState === 'complete') {
              jptScript.onreadystatechange = null;
              callback();
            }
          };
        } else {
          jptScript.onload = function () {
            callback();
          };
        }
        jptScript.src = tagSrc;
        if (attributes) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.setScriptAttributes)(jptScript, attributes);
        }
    
        // add the new script tag to the page
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.insertElement)(jptScript, doc);
        return jptScript;
      }
      function getCacheObject(doc, url) {
        var cachedDocObj = _requestCache.get(doc);
        if (cachedDocObj && cachedDocObj[url]) {
          return cachedDocObj[url];
        }
        return null; // return new cache object?
      }
    }
    
    ;
    
    /***/ }),
    
    /***/ "./src/ajax.js":
    /*!*********************!*\
      !*** ./src/ajax.js ***!
      \*********************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "ajax": function() { return /* binding */ ajax; },
    /* harmony export */   "ajaxBuilder": function() { return /* binding */ ajaxBuilder; }
    /* harmony export */ });
    /* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");
    /* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config.js */ "./src/config.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
    
    
    
    var XHR_DONE = 4;
    
    /**
     * Simple IE9+ and cross-browser ajax request function
     * Note: x-domain requests in IE9 do not support the use of cookies
     *
     * @param url string url
     * @param callback {object | function} callback
     * @param data mixed data
     * @param options object
     */
    var ajax = ajaxBuilder();
    function ajaxBuilder() {
      var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3000;
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        request = _ref.request,
        done = _ref.done;
      return function (url, callback, data) {
        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        try {
          var x;
          var method = options.method || (data ? 'POST' : 'GET');
          var parser = document.createElement('a');
          parser.href = url;
          var callbacks = (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(callback) === 'object' && callback !== null ? callback : {
            success: function success() {
              (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logMessage)('xhr success');
            },
            error: function error(e) {
              (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logError)('xhr error', null, e);
            }
          };
          if (typeof callback === 'function') {
            callbacks.success = callback;
          }
          x = new window.XMLHttpRequest();
          x.onreadystatechange = function () {
            if (x.readyState === XHR_DONE) {
              if (typeof done === 'function') {
                done(parser.origin);
              }
              var status = x.status;
              if (status >= 200 && status < 300 || status === 304) {
                callbacks.success(x.responseText, x);
              } else {
                callbacks.error(x.statusText, x);
              }
            }
          };
          // Disabled timeout temporarily to avoid xhr failed requests. https://github.com/prebid/Prebid.js/issues/2648
          if (!_config_js__WEBPACK_IMPORTED_MODULE_2__.config.getConfig('disableAjaxTimeout')) {
            x.ontimeout = function () {
              (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logError)('  xhr timeout after ', x.timeout, 'ms');
            };
          }
          if (method === 'GET' && data) {
            var urlInfo = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.parseUrl)(url, options);
            Object.assign(urlInfo.search, data);
            url = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.buildUrl)(urlInfo);
          }
          x.open(method, url, true);
          // IE needs timeout to be set after open - see #1410
          // Disabled timeout temporarily to avoid xhr failed requests. https://github.com/prebid/Prebid.js/issues/2648
          if (!_config_js__WEBPACK_IMPORTED_MODULE_2__.config.getConfig('disableAjaxTimeout')) {
            x.timeout = timeout;
          }
          if (options.withCredentials) {
            x.withCredentials = true;
          }
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__._each)(options.customHeaders, function (value, header) {
            x.setRequestHeader(header, value);
          });
          if (options.preflight) {
            x.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
          }
          x.setRequestHeader('Content-Type', options.contentType || 'text/plain');
          if (typeof request === 'function') {
            request(parser.origin);
          }
          if (method === 'POST' && data) {
            x.send(data);
          } else {
            x.send();
          }
        } catch (error) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logError)('xhr construction', error);
          (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(callback) === 'object' && callback !== null && callback.error(error);
        }
      };
    }
    
    /***/ }),
    
    /***/ "./src/auction.js":
    /*!************************!*\
      !*** ./src/auction.js ***!
      \************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "AUCTION_COMPLETED": function() { return /* binding */ AUCTION_COMPLETED; },
    /* harmony export */   "AUCTION_IN_PROGRESS": function() { return /* binding */ AUCTION_IN_PROGRESS; },
    /* harmony export */   "addBidToAuction": function() { return /* binding */ addBidToAuction; },
    /* harmony export */   "callPrebidCache": function() { return /* binding */ callPrebidCache; },
    /* harmony export */   "doCallbacksIfTimedout": function() { return /* binding */ doCallbacksIfTimedout; },
    /* harmony export */   "getPriceByGranularity": function() { return /* binding */ getPriceByGranularity; },
    /* harmony export */   "getPriceGranularity": function() { return /* binding */ getPriceGranularity; },
    /* harmony export */   "getStandardBidderSettings": function() { return /* binding */ getStandardBidderSettings; },
    /* harmony export */   "newAuction": function() { return /* binding */ newAuction; }
    /* harmony export */ });
    /* unused harmony exports AUCTION_STARTED, resetAuctionState, addBidResponse, addBidderRequests, bidsBackCallback, auctionCallbacks, batchingCache, getMediaTypeGranularity, getAdvertiserDomain, getPrimaryCatId, getKeyValueTargetingPairs, adjustBids */
    /* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
    /* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils.js */ "./node_modules/dlv/index.js");
    /* harmony import */ var _cpmBucketManager_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./cpmBucketManager.js */ "./src/cpmBucketManager.js");
    /* harmony import */ var _native_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./native.js */ "./src/native.js");
    /* harmony import */ var _videoCache_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./videoCache.js */ "./src/videoCache.js");
    /* harmony import */ var _Renderer_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./Renderer.js */ "./src/Renderer.js");
    /* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./config.js */ "./src/config.js");
    /* harmony import */ var _userSync_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./userSync.js */ "./src/userSync.js");
    /* harmony import */ var _hook_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./hook.js */ "./src/hook.js");
    /* harmony import */ var _polyfill_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./polyfill.js */ "./src/polyfill.js");
    /* harmony import */ var _video_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./video.js */ "./src/video.js");
    /* harmony import */ var _mediaTypes_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./mediaTypes.js */ "./src/mediaTypes.js");
    /* harmony import */ var _auctionManager_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./auctionManager.js */ "./src/auctionManager.js");
    /* harmony import */ var _bidderSettings_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./bidderSettings.js */ "./src/bidderSettings.js");
    /* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./events.js */ "./src/events.js");
    /* harmony import */ var _adapterManager_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./adapterManager.js */ "./src/adapterManager.js");
    /* harmony import */ var _constants_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.json */ "./src/constants.json");
    /* harmony import */ var _utils_promise_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/promise.js */ "./src/utils/promise.js");
    /* harmony import */ var _utils_perfMetrics_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/perfMetrics.js */ "./src/utils/perfMetrics.js");
    /* harmony import */ var _bidfactory_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./bidfactory.js */ "./src/bidfactory.js");
    /* harmony import */ var _utils_cpm_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./utils/cpm.js */ "./src/utils/cpm.js");
    
    
    /**
     * Module for auction instances.
     *
     * In Prebid 0.x, $$PREBID_GLOBAL$$ had _bidsRequested and _bidsReceived as public properties.
     * Starting 1.0, Prebid will support concurrent auctions. Each auction instance will store private properties, bidsRequested and bidsReceived.
     *
     * AuctionManager will create instance of auction and will store all the auctions.
     *
     */
    
    /**
      * @typedef {Object} AdUnit An object containing the adUnit configuration.
      *
      * @property {string} code A code which will be used to uniquely identify this bidder. This should be the same
      *   one as is used in the call to registerBidAdapter
      * @property {Array.<size>} sizes A list of size for adUnit.
      * @property {object} params Any bidder-specific params which the publisher used in their bid request.
      *   This is guaranteed to have passed the spec.areParamsValid() test.
      */
    
    /**
     * @typedef {Array.<number>} size
     */
    
    /**
     * @typedef {Array.<string>} AdUnitCode
     */
    
    /**
     * @typedef {Object} BidderRequest
     *
     * @property {string} bidderCode - adUnit bidder
     * @property {number} auctionId - random UUID
     * @property {string} bidderRequestId - random string, unique key set on all bidRequest.bids[]
     * @property {Array.<Bid>} bids
     * @property {number} auctionStart - Date.now() at auction start
     * @property {number} timeout - callback timeout
     * @property {refererInfo} refererInfo - referer info object
     * @property {string} [tid] - random UUID (used for s2s)
     * @property {string} [src] - s2s or client (used for s2s)
     */
    
    /**
     * @typedef {Object} BidReceived
     * //TODO add all properties
     */
    
    /**
     * @typedef {Object} Auction
     *
     * @property {function(): string} getAuctionStatus - returns the auction status which can be any one of 'started', 'in progress' or 'completed'
     * @property {function(): AdUnit[]} getAdUnits - return the adUnits for this auction instance
     * @property {function(): AdUnitCode[]} getAdUnitCodes - return the adUnitCodes for this auction instance
     * @property {function(): BidRequest[]} getBidRequests - get all bid requests for this auction instance
     * @property {function(): BidReceived[]} getBidsReceived - get all bid received for this auction instance
     * @property {function(): void} startAuctionTimer - sets the bidsBackHandler callback and starts the timer for auction
     * @property {function(): void} callBids - sends requests to all adapters for bids
     */
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    var syncUsers = _userSync_js__WEBPACK_IMPORTED_MODULE_0__.userSync.syncUsers;
    var AUCTION_STARTED = 'started';
    var AUCTION_IN_PROGRESS = 'inProgress';
    var AUCTION_COMPLETED = 'completed';
    
    // register event for bid adjustment
    _events_js__WEBPACK_IMPORTED_MODULE_1__.on(_constants_json__WEBPACK_IMPORTED_MODULE_2__.EVENTS.BID_ADJUSTMENT, function (bid) {
      adjustBids(bid);
    });
    var MAX_REQUESTS_PER_ORIGIN = 4;
    var outstandingRequests = {};
    var sourceInfo = {};
    var queuedCalls = [];
    
    /**
     * Clear global state for tests
     */
    function resetAuctionState() {
      queuedCalls.length = 0;
      [outstandingRequests, sourceInfo].forEach(function (ob) {
        return Object.keys(ob).forEach(function (k) {
          delete ob[k];
        });
      });
    }
    
    /**
      * Creates new auction instance
      *
      * @param {Object} requestConfig
      * @param {AdUnit} requestConfig.adUnits
      * @param {AdUnitCode} requestConfig.adUnitCodes
      * @param {function():void} requestConfig.callback
      * @param {number} requestConfig.cbTimeout
      * @param {Array.<string>} requestConfig.labels
      * @param {string} requestConfig.auctionId
      * @param {{global: {}, bidder: {}}} ortb2Fragments first party data, separated into global
      *    (from getConfig('ortb2') + requestBids({ortb2})) and bidder (a map from bidderCode to ortb2)
      * @returns {Auction} auction instance
      */
    function newAuction(_ref) {
      var adUnits = _ref.adUnits,
        adUnitCodes = _ref.adUnitCodes,
        callback = _ref.callback,
        cbTimeout = _ref.cbTimeout,
        labels = _ref.labels,
        auctionId = _ref.auctionId,
        ortb2Fragments = _ref.ortb2Fragments,
        metrics = _ref.metrics;
      metrics = (0,_utils_perfMetrics_js__WEBPACK_IMPORTED_MODULE_3__.useMetrics)(metrics);
      var _adUnits = adUnits;
      var _labels = labels;
      var _adUnitCodes = adUnitCodes;
      var _auctionId = auctionId || (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.generateUUID)();
      var _timeout = cbTimeout;
      var _timelyBidders = new Set();
      var _bidsRejected = [];
      var _callback = callback;
      var _bidderRequests = [];
      var _bidsReceived = [];
      var _noBids = [];
      var _winningBids = [];
      var _auctionStart;
      var _auctionEnd;
      var _timer;
      var _auctionStatus;
      var _nonBids = [];
      function addBidRequests(bidderRequests) {
        _bidderRequests = _bidderRequests.concat(bidderRequests);
      }
      function addBidReceived(bidsReceived) {
        _bidsReceived = _bidsReceived.concat(bidsReceived);
      }
      function addBidRejected(bidsRejected) {
        _bidsRejected = _bidsRejected.concat(bidsRejected);
      }
      function addNoBid(noBid) {
        _noBids = _noBids.concat(noBid);
      }
      function addNonBids(seatnonbids) {
        _nonBids = _nonBids.concat(seatnonbids);
      }
      function getProperties() {
        return {
          auctionId: _auctionId,
          timestamp: _auctionStart,
          auctionEnd: _auctionEnd,
          auctionStatus: _auctionStatus,
          adUnits: _adUnits,
          adUnitCodes: _adUnitCodes,
          labels: _labels,
          bidderRequests: _bidderRequests,
          noBids: _noBids,
          bidsReceived: _bidsReceived,
          bidsRejected: _bidsRejected,
          winningBids: _winningBids,
          timeout: _timeout,
          metrics: metrics,
          seatNonBids: _nonBids
        };
      }
      function startAuctionTimer() {
        var timedOut = true;
        var timeoutCallback = executeCallback.bind(null, timedOut);
        var timer = setTimeout(timeoutCallback, _timeout);
        _timer = timer;
      }
      function executeCallback(timedOut, cleartimer) {
        // clear timer when done calls executeCallback
        if (cleartimer) {
          clearTimeout(_timer);
        }
        if (_auctionEnd === undefined) {
          var timedOutBidders = [];
          if (timedOut) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logMessage)("Auction ".concat(_auctionId, " timedOut"));
            timedOutBidders = getTimedOutBids(_bidderRequests, _timelyBidders);
            if (timedOutBidders.length) {
              _events_js__WEBPACK_IMPORTED_MODULE_1__.emit(_constants_json__WEBPACK_IMPORTED_MODULE_2__.EVENTS.BID_TIMEOUT, timedOutBidders);
            }
          }
          _auctionStatus = AUCTION_COMPLETED;
          _auctionEnd = Date.now();
          metrics.checkpoint('auctionEnd');
          metrics.timeBetween('requestBids', 'auctionEnd', 'requestBids.total');
          metrics.timeBetween('callBids', 'auctionEnd', 'requestBids.callBids');
          _events_js__WEBPACK_IMPORTED_MODULE_1__.emit(_constants_json__WEBPACK_IMPORTED_MODULE_2__.EVENTS.AUCTION_END, getProperties());
          bidsBackCallback(_adUnits, function () {
            try {
              if (_callback != null) {
                var _adUnitCodes2 = _adUnitCodes;
                var bids = _bidsReceived.filter(_utils_js__WEBPACK_IMPORTED_MODULE_4__.bind.call(_utils_js__WEBPACK_IMPORTED_MODULE_4__.adUnitsFilter, this, _adUnitCodes2)).reduce(groupByPlacement, {});
                _callback.apply(owpbjs, [bids, timedOut, _auctionId]);
                _callback = null;
              }
            } catch (e) {
              (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logError)('Error executing bidsBackHandler', null, e);
            } finally {
              // Calling timed out bidders
              if (timedOutBidders.length) {
                _adapterManager_js__WEBPACK_IMPORTED_MODULE_5__["default"].callTimedOutBidders(adUnits, timedOutBidders, _timeout);
              }
              // Only automatically sync if the publisher has not chosen to "enableOverride"
              var userSyncConfig = _config_js__WEBPACK_IMPORTED_MODULE_6__.config.getConfig('userSync') || {};
              if (!userSyncConfig.enableOverride) {
                // Delay the auto sync by the config delay
                syncUsers(userSyncConfig.syncDelay);
              }
            }
          });
        }
      }
      function auctionDone() {
        _config_js__WEBPACK_IMPORTED_MODULE_6__.config.resetBidder();
        // when all bidders have called done callback atleast once it means auction is complete
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logInfo)("Bids Received for Auction with id: ".concat(_auctionId), _bidsReceived);
        _auctionStatus = AUCTION_COMPLETED;
        executeCallback(false, true);
      }
      function onTimelyResponse(bidderCode) {
        _timelyBidders.add(bidderCode);
      }
      function callBids() {
        _auctionStatus = AUCTION_STARTED;
        _auctionStart = Date.now();
        var bidRequests = metrics.measureTime('requestBids.makeRequests', function () {
          return _adapterManager_js__WEBPACK_IMPORTED_MODULE_5__["default"].makeBidRequests(_adUnits, _auctionStart, _auctionId, _timeout, _labels, ortb2Fragments, metrics);
        });
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logInfo)("Bids Requested for Auction with id: ".concat(_auctionId), bidRequests);
        metrics.checkpoint('callBids');
        if (bidRequests.length < 1) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logWarn)('No valid bid requests returned for auction');
          auctionDone();
        } else {
          addBidderRequests.call({
            dispatch: addBidderRequestsCallback,
            context: this
          }, bidRequests);
        }
      }
    
      /**
       * callback executed after addBidderRequests completes
       * @param {BidRequest[]} bidRequests
       */
      function addBidderRequestsCallback(bidRequests) {
        var _this = this;
        bidRequests.forEach(function (bidRequest) {
          addBidRequests(bidRequest);
        });
        var requests = {};
        var call = {
          bidRequests: bidRequests,
          run: function run() {
            startAuctionTimer();
            _auctionStatus = AUCTION_IN_PROGRESS;
            _events_js__WEBPACK_IMPORTED_MODULE_1__.emit(_constants_json__WEBPACK_IMPORTED_MODULE_2__.EVENTS.AUCTION_INIT, getProperties());
            var callbacks = auctionCallbacks(auctionDone, _this);
            _adapterManager_js__WEBPACK_IMPORTED_MODULE_5__["default"].callBids(_adUnits, bidRequests, callbacks.addBidResponse, callbacks.adapterDone, {
              request: function request(source, origin) {
                increment(outstandingRequests, origin);
                increment(requests, source);
                if (!sourceInfo[source]) {
                  sourceInfo[source] = {
                    SRA: true,
                    origin: origin
                  };
                }
                if (requests[source] > 1) {
                  sourceInfo[source].SRA = false;
                }
              },
              done: function done(origin) {
                outstandingRequests[origin]--;
                if (queuedCalls[0]) {
                  if (runIfOriginHasCapacity(queuedCalls[0])) {
                    queuedCalls.shift();
                  }
                }
              }
            }, _timeout, onTimelyResponse, ortb2Fragments);
          }
        };
        if (!runIfOriginHasCapacity(call)) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logWarn)('queueing auction due to limited endpoint capacity');
          queuedCalls.push(call);
        }
        function runIfOriginHasCapacity(call) {
          var hasCapacity = true;
          var maxRequests = _config_js__WEBPACK_IMPORTED_MODULE_6__.config.getConfig('maxRequestsPerOrigin') || MAX_REQUESTS_PER_ORIGIN;
          call.bidRequests.some(function (bidRequest) {
            var requests = 1;
            var source = typeof bidRequest.src !== 'undefined' && bidRequest.src === _constants_json__WEBPACK_IMPORTED_MODULE_2__.S2S.SRC ? 's2s' : bidRequest.bidderCode;
            // if we have no previous info on this source just let them through
            if (sourceInfo[source]) {
              if (sourceInfo[source].SRA === false) {
                // some bidders might use more than the MAX_REQUESTS_PER_ORIGIN in a single auction.  In those cases
                // set their request count to MAX_REQUESTS_PER_ORIGIN so the auction isn't permanently queued waiting
                // for capacity for that bidder
                requests = Math.min(bidRequest.bids.length, maxRequests);
              }
              if (outstandingRequests[sourceInfo[source].origin] + requests > maxRequests) {
                hasCapacity = false;
              }
            }
            // return only used for terminating this .some() iteration early if it is determined we don't have capacity
            return !hasCapacity;
          });
          if (hasCapacity) {
            call.run();
          }
          return hasCapacity;
        }
        function increment(obj, prop) {
          if (typeof obj[prop] === 'undefined') {
            obj[prop] = 1;
          } else {
            obj[prop]++;
          }
        }
      }
      function addWinningBid(winningBid) {
        _winningBids = _winningBids.concat(winningBid);
        _adapterManager_js__WEBPACK_IMPORTED_MODULE_5__["default"].callBidWonBidder(winningBid.adapterCode || winningBid.bidder, winningBid, adUnits);
      }
      function setBidTargeting(bid) {
        _adapterManager_js__WEBPACK_IMPORTED_MODULE_5__["default"].callSetTargetingBidder(bid.adapterCode || bid.bidder, bid);
      }
      _events_js__WEBPACK_IMPORTED_MODULE_1__.on(_constants_json__WEBPACK_IMPORTED_MODULE_2__.EVENTS.SEAT_NON_BID, function (event) {
        if (event.auctionId === _auctionId) {
          addNonBids(event.seatnonbid);
        }
      });
      return {
        addBidReceived: addBidReceived,
        addBidRejected: addBidRejected,
        addNoBid: addNoBid,
        executeCallback: executeCallback,
        callBids: callBids,
        addWinningBid: addWinningBid,
        setBidTargeting: setBidTargeting,
        getWinningBids: function getWinningBids() {
          return _winningBids;
        },
        getAuctionStart: function getAuctionStart() {
          return _auctionStart;
        },
        getTimeout: function getTimeout() {
          return _timeout;
        },
        getAuctionId: function getAuctionId() {
          return _auctionId;
        },
        getAuctionStatus: function getAuctionStatus() {
          return _auctionStatus;
        },
        getAdUnits: function getAdUnits() {
          return _adUnits;
        },
        getAdUnitCodes: function getAdUnitCodes() {
          return _adUnitCodes;
        },
        getBidRequests: function getBidRequests() {
          return _bidderRequests;
        },
        getBidsReceived: function getBidsReceived() {
          return _bidsReceived;
        },
        getNoBids: function getNoBids() {
          return _noBids;
        },
        getNonBids: function getNonBids() {
          return _nonBids;
        },
        getFPD: function getFPD() {
          return ortb2Fragments;
        },
        getMetrics: function getMetrics() {
          return metrics;
        }
      };
    }
    
    /**
     * Hook into this to intercept bids before they are added to an auction.
     *
     * @param adUnitCode
     * @param bid
     * @param {function(String)} reject: a function that, when called, rejects `bid` with the given reason.
     */
    var addBidResponse = (0,_hook_js__WEBPACK_IMPORTED_MODULE_7__.hook)('sync', function (adUnitCode, bid, reject) {
      this.dispatch.call(null, adUnitCode, bid);
    }, 'addBidResponse');
    var addBidderRequests = (0,_hook_js__WEBPACK_IMPORTED_MODULE_7__.hook)('sync', function (bidderRequests) {
      this.dispatch.call(this.context, bidderRequests);
    }, 'addBidderRequests');
    var bidsBackCallback = (0,_hook_js__WEBPACK_IMPORTED_MODULE_7__.hook)('async', function (adUnits, callback) {
      if (callback) {
        callback();
      }
    }, 'bidsBackCallback');
    function auctionCallbacks(auctionDone, auctionInstance) {
      var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref2$index = _ref2.index,
        index = _ref2$index === void 0 ? _auctionManager_js__WEBPACK_IMPORTED_MODULE_8__.auctionManager.index : _ref2$index;
      var outstandingBidsAdded = 0;
      var allAdapterCalledDone = false;
      var bidderRequestsDone = new Set();
      var bidResponseMap = {};
      var ready = {};
      function waitFor(requestId, result) {
        if (ready[requestId] == null) {
          ready[requestId] = _utils_promise_js__WEBPACK_IMPORTED_MODULE_9__.GreedyPromise.resolve();
        }
        ready[requestId] = ready[requestId].then(function () {
          return _utils_promise_js__WEBPACK_IMPORTED_MODULE_9__.GreedyPromise.resolve(result).catch(function () {});
        });
      }
      function guard(bidderRequest, fn) {
        var timeout = bidderRequest.timeout;
        if (timeout == null || timeout > auctionInstance.getTimeout()) {
          timeout = auctionInstance.getTimeout();
        }
        var timeRemaining = auctionInstance.getAuctionStart() + timeout - Date.now();
        var wait = ready[bidderRequest.bidderRequestId];
        var orphanWait = ready['']; // also wait for "orphan" responses that are not associated with any request
        if ((wait != null || orphanWait != null) && timeRemaining > 0) {
          _utils_promise_js__WEBPACK_IMPORTED_MODULE_9__.GreedyPromise.race([_utils_promise_js__WEBPACK_IMPORTED_MODULE_9__.GreedyPromise.timeout(timeRemaining), _utils_promise_js__WEBPACK_IMPORTED_MODULE_9__.GreedyPromise.resolve(orphanWait).then(function () {
            return wait;
          })]).then(fn);
        } else {
          fn();
        }
      }
      function afterBidAdded() {
        outstandingBidsAdded--;
        if (allAdapterCalledDone && outstandingBidsAdded === 0) {
          auctionDone();
        }
      }
      function handleBidResponse(adUnitCode, bid, handler) {
        bidResponseMap[bid.requestId] = true;
        addCommonResponseProperties(bid, adUnitCode);
        outstandingBidsAdded++;
        return handler(afterBidAdded);
      }
      function acceptBidResponse(adUnitCode, bid) {
        handleBidResponse(adUnitCode, bid, function (done) {
          var bidResponse = getPreparedBidForAuction(bid);
          if (bidResponse.mediaType === _mediaTypes_js__WEBPACK_IMPORTED_MODULE_10__.VIDEO) {
            tryAddVideoBid(auctionInstance, bidResponse, done);
          } else {
            if ( true && bidResponse.native != null && (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_11__["default"])(bidResponse.native) === 'object') {
              // NOTE: augment bidResponse.native even if bidResponse.mediaType !== NATIVE; it's possible
              // to treat banner responses as native
              addLegacyFieldsIfNeeded(bidResponse);
            }
            addBidToAuction(auctionInstance, bidResponse);
            done();
          }
        });
      }
      function rejectBidResponse(adUnitCode, bid, reason) {
        return handleBidResponse(adUnitCode, bid, function (done) {
          var _bid$getIdentifiers;
          // return a "NO_BID" replacement that the caller can decide to continue with
          // TODO: remove this in v8; see https://github.com/prebid/Prebid.js/issues/8956
          var noBid = (0,_bidfactory_js__WEBPACK_IMPORTED_MODULE_12__.createBid)(_constants_json__WEBPACK_IMPORTED_MODULE_2__.STATUS.NO_BID, (_bid$getIdentifiers = bid.getIdentifiers) === null || _bid$getIdentifiers === void 0 ? void 0 : _bid$getIdentifiers.call(bid));
          Object.assign(noBid, Object.fromEntries(Object.entries(bid).filter(function (_ref3) {
            var _ref4 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_13__["default"])(_ref3, 1),
              k = _ref4[0];
            return !noBid.hasOwnProperty(k) && !['ad', 'adUrl', 'vastXml', 'vastUrl', 'native'].includes(k);
          })));
          noBid.width = bid.width;
          noBid.height = bid.height;
          noBid.mediaType = bid.mediaType;
          noBid.status = _constants_json__WEBPACK_IMPORTED_MODULE_2__.BID_STATUS.BID_REJECTED;
          noBid.cpm = 0;
          bid.rejectionReason = reason;
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logWarn)("Bid from ".concat(bid.bidder || 'unknown bidder', " was rejected: ").concat(reason), bid);
          _events_js__WEBPACK_IMPORTED_MODULE_1__.emit(_constants_json__WEBPACK_IMPORTED_MODULE_2__.EVENTS.BID_REJECTED, bid);
          auctionInstance.addBidRejected(bid);
          done();
          return noBid;
        });
      }
      function _adapterDone() {
        var bidderRequest = this;
        var bidderRequests = auctionInstance.getBidRequests();
        var auctionOptionsConfig = _config_js__WEBPACK_IMPORTED_MODULE_6__.config.getConfig('auctionOptions');
        bidderRequestsDone.add(bidderRequest);
        if (auctionOptionsConfig && !(0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.isEmpty)(auctionOptionsConfig)) {
          var secondaryBidders = auctionOptionsConfig.secondaryBidders;
          if (secondaryBidders && !bidderRequests.every(function (bidder) {
            return (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_14__.includes)(secondaryBidders, bidder.bidderCode);
          })) {
            bidderRequests = bidderRequests.filter(function (request) {
              return !(0,_polyfill_js__WEBPACK_IMPORTED_MODULE_14__.includes)(secondaryBidders, request.bidderCode);
            });
          }
        }
        allAdapterCalledDone = bidderRequests.every(function (bidderRequest) {
          return bidderRequestsDone.has(bidderRequest);
        });
        bidderRequest.bids.forEach(function (bid) {
          if (!bidResponseMap[bid.bidId]) {
            auctionInstance.addNoBid(bid);
            _events_js__WEBPACK_IMPORTED_MODULE_1__.emit(_constants_json__WEBPACK_IMPORTED_MODULE_2__.EVENTS.NO_BID, bid);
          }
        });
        if (allAdapterCalledDone && outstandingBidsAdded === 0) {
          auctionDone();
        }
      }
      return {
        addBidResponse: function () {
          function addBid(adUnitCode, bid) {
            var bidderRequest = index.getBidderRequest(bid);
            waitFor(bidderRequest && bidderRequest.bidderRequestId || '', addBidResponse.call({
              dispatch: acceptBidResponse
            }, adUnitCode, bid, function () {
              var rejection;
              return function (reason) {
                if (rejection == null) {
                  rejection = rejectBidResponse(adUnitCode, bid, reason);
                }
                return rejection;
              };
            }()));
          }
          addBid.reject = rejectBidResponse;
          return addBid;
        }(),
        adapterDone: function adapterDone() {
          guard(this, _adapterDone.bind(this));
        }
      };
    }
    function doCallbacksIfTimedout(auctionInstance, bidResponse) {
      if (bidResponse.timeToRespond > auctionInstance.getTimeout() + _config_js__WEBPACK_IMPORTED_MODULE_6__.config.getConfig('timeoutBuffer')) {
        auctionInstance.executeCallback(true);
      }
    }
    
    // Add a bid to the auction.
    function addBidToAuction(auctionInstance, bidResponse) {
      setupBidTargeting(bidResponse);
      (0,_utils_perfMetrics_js__WEBPACK_IMPORTED_MODULE_3__.useMetrics)(bidResponse.metrics).timeSince('addBidResponse', 'addBidResponse.total');
      _events_js__WEBPACK_IMPORTED_MODULE_1__.emit(_constants_json__WEBPACK_IMPORTED_MODULE_2__.EVENTS.BID_RESPONSE, bidResponse);
      auctionInstance.addBidReceived(bidResponse);
      doCallbacksIfTimedout(auctionInstance, bidResponse);
    }
    
    // Video bids may fail if the cache is down, or there's trouble on the network.
    function tryAddVideoBid(auctionInstance, bidResponse, afterBidAdded) {
      var _ref5 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
        _ref5$index = _ref5.index,
        index = _ref5$index === void 0 ? _auctionManager_js__WEBPACK_IMPORTED_MODULE_8__.auctionManager.index : _ref5$index;
      var addBid = true;
      var videoMediaType = (0,_utils_js__WEBPACK_IMPORTED_MODULE_15__["default"])(index.getMediaTypes({
        requestId: bidResponse.originalRequestId || bidResponse.requestId,
        transactionId: bidResponse.transactionId
      }), 'video');
      var context = videoMediaType && (0,_utils_js__WEBPACK_IMPORTED_MODULE_15__["default"])(videoMediaType, 'context');
      var useCacheKey = videoMediaType && (0,_utils_js__WEBPACK_IMPORTED_MODULE_15__["default"])(videoMediaType, 'useCacheKey');
      if (_config_js__WEBPACK_IMPORTED_MODULE_6__.config.getConfig('cache.url') && (useCacheKey || context !== _video_js__WEBPACK_IMPORTED_MODULE_16__.OUTSTREAM)) {
        if (!bidResponse.videoCacheKey || _config_js__WEBPACK_IMPORTED_MODULE_6__.config.getConfig('cache.ignoreBidderCacheKey')) {
          addBid = false;
          callPrebidCache(auctionInstance, bidResponse, afterBidAdded, videoMediaType);
        } else if (!bidResponse.vastUrl) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logError)('videoCacheKey specified but not required vastUrl for video bid');
          addBid = false;
        }
      }
      if (addBid) {
        addBidToAuction(auctionInstance, bidResponse);
        afterBidAdded();
      }
    }
    
    // Native bid response might be in ortb2 format - adds legacy field for backward compatibility
    var addLegacyFieldsIfNeeded = function addLegacyFieldsIfNeeded(bidResponse) {
      var _auctionManager$index, _bidResponse$native;
      var nativeOrtbRequest = (_auctionManager$index = _auctionManager_js__WEBPACK_IMPORTED_MODULE_8__.auctionManager.index.getAdUnit(bidResponse)) === null || _auctionManager$index === void 0 ? void 0 : _auctionManager$index.nativeOrtbRequest;
      var nativeOrtbResponse = (_bidResponse$native = bidResponse.native) === null || _bidResponse$native === void 0 ? void 0 : _bidResponse$native.ortb;
      if (nativeOrtbRequest && nativeOrtbResponse) {
        var legacyResponse = (0,_native_js__WEBPACK_IMPORTED_MODULE_17__.toLegacyResponse)(nativeOrtbResponse, nativeOrtbRequest);
        Object.assign(bidResponse.native, legacyResponse);
      }
    };
    var storeInCache = function storeInCache(batch) {
      (0,_videoCache_js__WEBPACK_IMPORTED_MODULE_18__.store)(batch.map(function (entry) {
        return entry.bidResponse;
      }), function (error, cacheIds) {
        cacheIds.forEach(function (cacheId, i) {
          var _batch$i = batch[i],
            auctionInstance = _batch$i.auctionInstance,
            bidResponse = _batch$i.bidResponse,
            afterBidAdded = _batch$i.afterBidAdded;
          if (error) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logWarn)("Failed to save to the video cache: ".concat(error, ". Video bid must be discarded."));
            doCallbacksIfTimedout(auctionInstance, bidResponse);
          } else {
            if (cacheId.uuid === '') {
              (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logWarn)("Supplied video cache key was already in use by Prebid Cache; caching attempt was rejected. Video bid must be discarded.");
              doCallbacksIfTimedout(auctionInstance, bidResponse);
            } else {
              bidResponse.videoCacheKey = cacheId.uuid;
              if (!bidResponse.vastUrl) {
                bidResponse.vastUrl = (0,_videoCache_js__WEBPACK_IMPORTED_MODULE_18__.getCacheUrl)(bidResponse.videoCacheKey);
              }
              addBidToAuction(auctionInstance, bidResponse);
              afterBidAdded();
            }
          }
        });
      });
    };
    var batchSize, batchTimeout;
    _config_js__WEBPACK_IMPORTED_MODULE_6__.config.getConfig('cache', function (cacheConfig) {
      batchSize = typeof cacheConfig.cache.batchSize === 'number' && cacheConfig.cache.batchSize > 0 ? cacheConfig.cache.batchSize : 1;
      batchTimeout = typeof cacheConfig.cache.batchTimeout === 'number' && cacheConfig.cache.batchTimeout > 0 ? cacheConfig.cache.batchTimeout : 0;
    });
    var batchingCache = function batchingCache() {
      var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : setTimeout;
      var cache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : storeInCache;
      var batches = [[]];
      var debouncing = false;
      var noTimeout = function noTimeout(cb) {
        return cb();
      };
      return function (auctionInstance, bidResponse, afterBidAdded) {
        var batchFunc = batchTimeout > 0 ? timeout : noTimeout;
        if (batches[batches.length - 1].length >= batchSize) {
          batches.push([]);
        }
        batches[batches.length - 1].push({
          auctionInstance: auctionInstance,
          bidResponse: bidResponse,
          afterBidAdded: afterBidAdded
        });
        if (!debouncing) {
          debouncing = true;
          batchFunc(function () {
            batches.forEach(cache);
            batches = [[]];
            debouncing = false;
          }, batchTimeout);
        }
      };
    };
    var batchAndStore = batchingCache();
    var callPrebidCache = (0,_hook_js__WEBPACK_IMPORTED_MODULE_7__.hook)('async', function (auctionInstance, bidResponse, afterBidAdded, videoMediaType) {
      batchAndStore(auctionInstance, bidResponse, afterBidAdded);
    }, 'callPrebidCache');
    
    /**
     * Augment `bidResponse` with properties that are common across all bids - including rejected bids.
     *
     */
    function addCommonResponseProperties(bidResponse, adUnitCode) {
      var _ref6 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref6$index = _ref6.index,
        index = _ref6$index === void 0 ? _auctionManager_js__WEBPACK_IMPORTED_MODULE_8__.auctionManager.index : _ref6$index;
      var bidderRequest = index.getBidderRequest(bidResponse);
      var adUnit = index.getAdUnit(bidResponse);
      var start = bidderRequest && bidderRequest.start || bidResponse.requestTimestamp;
      Object.assign(bidResponse, {
        responseTimestamp: bidResponse.responseTimestamp || (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.timestamp)(),
        requestTimestamp: bidResponse.requestTimestamp || start,
        cpm: parseFloat(bidResponse.cpm) || 0,
        bidder: bidResponse.bidder || bidResponse.bidderCode,
        adUnitCode: adUnitCode
      });
      if ((adUnit === null || adUnit === void 0 ? void 0 : adUnit.ttlBuffer) != null) {
        bidResponse.ttlBuffer = adUnit.ttlBuffer;
      }
      bidResponse.timeToRespond = bidResponse.responseTimestamp - bidResponse.requestTimestamp;
    }
    
    /**
     * Add additional bid response properties that are universal for all _accepted_ bids.
     */
    function getPreparedBidForAuction(bid) {
      var _index$getBidRequest;
      var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref7$index = _ref7.index,
        index = _ref7$index === void 0 ? _auctionManager_js__WEBPACK_IMPORTED_MODULE_8__.auctionManager.index : _ref7$index;
      // Let listeners know that now is the time to adjust the bid, if they want to.
      //
      // CAREFUL: Publishers rely on certain bid properties to be available (like cpm),
      // but others to not be set yet (like priceStrings). See #1372 and #1389.
      _events_js__WEBPACK_IMPORTED_MODULE_1__.emit(_constants_json__WEBPACK_IMPORTED_MODULE_2__.EVENTS.BID_ADJUSTMENT, bid);
    
      // a publisher-defined renderer can be used to render bids
      var bidRenderer = ((_index$getBidRequest = index.getBidRequest(bid)) === null || _index$getBidRequest === void 0 ? void 0 : _index$getBidRequest.renderer) || index.getAdUnit(bid).renderer;
    
      // a publisher can also define a renderer for a mediaType
      var bidObjectMediaType = bid.mediaType;
      var mediaTypes = index.getMediaTypes(bid);
      var bidMediaType = mediaTypes && mediaTypes[bidObjectMediaType];
      var mediaTypeRenderer = bidMediaType && bidMediaType.renderer;
      var renderer = null;
    
      // the renderer for the mediaType takes precendence
      if (mediaTypeRenderer && mediaTypeRenderer.url && mediaTypeRenderer.render && !(mediaTypeRenderer.backupOnly === true && bid.renderer)) {
        renderer = mediaTypeRenderer;
      } else if (bidRenderer && bidRenderer.url && bidRenderer.render && !(bidRenderer.backupOnly === true && bid.renderer)) {
        renderer = bidRenderer;
      }
      if (renderer) {
        // be aware, an adapter could already have installed the bidder, in which case this overwrite's the existing adapter
        bid.renderer = _Renderer_js__WEBPACK_IMPORTED_MODULE_19__.Renderer.install({
          url: renderer.url,
          config: renderer.options
        }); // rename options to config, to make it consistent?
        bid.renderer.setRender(renderer.render);
      }
    
      // Use the config value 'mediaTypeGranularity' if it has been defined for mediaType, else use 'customPriceBucket'
      var mediaTypeGranularity = getMediaTypeGranularity(bid.mediaType, mediaTypes, _config_js__WEBPACK_IMPORTED_MODULE_6__.config.getConfig('mediaTypePriceGranularity'));
      var priceStringsObj = (0,_cpmBucketManager_js__WEBPACK_IMPORTED_MODULE_20__.getPriceBucketString)(bid.cpm, (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_11__["default"])(mediaTypeGranularity) === 'object' ? mediaTypeGranularity : _config_js__WEBPACK_IMPORTED_MODULE_6__.config.getConfig('customPriceBucket'), _config_js__WEBPACK_IMPORTED_MODULE_6__.config.getConfig('currency.granularityMultiplier'));
      bid.pbLg = priceStringsObj.low;
      bid.pbMg = priceStringsObj.med;
      bid.pbHg = priceStringsObj.high;
      bid.pbAg = priceStringsObj.auto;
      bid.pbDg = priceStringsObj.dense;
      bid.pbCg = priceStringsObj.custom;
      return bid;
    }
    function setupBidTargeting(bidObject) {
      var keyValues;
      var cpmCheck = _bidderSettings_js__WEBPACK_IMPORTED_MODULE_21__.bidderSettings.get(bidObject.bidderCode, 'allowZeroCpmBids') === true ? bidObject.cpm >= 0 : bidObject.cpm > 0;
      if (bidObject.bidderCode && (cpmCheck || bidObject.dealId)) {
        keyValues = getKeyValueTargetingPairs(bidObject.bidderCode, bidObject);
      }
    
      // use any targeting provided as defaults, otherwise just set from getKeyValueTargetingPairs
      bidObject.adserverTargeting = Object.assign(bidObject.adserverTargeting || {}, keyValues);
    }
    
    /**
     * @param {MediaType} mediaType
     * @param mediaTypes media types map from adUnit
     * @param {MediaTypePriceGranularity} [mediaTypePriceGranularity]
     * @returns {(Object|string|undefined)}
     */
    function getMediaTypeGranularity(mediaType, mediaTypes, mediaTypePriceGranularity) {
      if (mediaType && mediaTypePriceGranularity) {
        if (mediaType === _mediaTypes_js__WEBPACK_IMPORTED_MODULE_10__.VIDEO) {
          var context = (0,_utils_js__WEBPACK_IMPORTED_MODULE_15__["default"])(mediaTypes, "".concat(_mediaTypes_js__WEBPACK_IMPORTED_MODULE_10__.VIDEO, ".context"), 'instream');
          if (mediaTypePriceGranularity["".concat(_mediaTypes_js__WEBPACK_IMPORTED_MODULE_10__.VIDEO, "-").concat(context)]) {
            return mediaTypePriceGranularity["".concat(_mediaTypes_js__WEBPACK_IMPORTED_MODULE_10__.VIDEO, "-").concat(context)];
          }
        }
        return mediaTypePriceGranularity[mediaType];
      }
    }
    
    /**
     * This function returns the price granularity defined. It can be either publisher defined or default value
     * @param bid bid response object
     * @param index
     * @returns {string} granularity
     */
    var getPriceGranularity = function getPriceGranularity(bid) {
      var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref8$index = _ref8.index,
        index = _ref8$index === void 0 ? _auctionManager_js__WEBPACK_IMPORTED_MODULE_8__.auctionManager.index : _ref8$index;
      // Use the config value 'mediaTypeGranularity' if it has been set for mediaType, else use 'priceGranularity'
      var mediaTypeGranularity = getMediaTypeGranularity(bid.mediaType, index.getMediaTypes(bid), _config_js__WEBPACK_IMPORTED_MODULE_6__.config.getConfig('mediaTypePriceGranularity'));
      var granularity = typeof bid.mediaType === 'string' && mediaTypeGranularity ? typeof mediaTypeGranularity === 'string' ? mediaTypeGranularity : 'custom' : _config_js__WEBPACK_IMPORTED_MODULE_6__.config.getConfig('priceGranularity');
      return granularity;
    };
    
    /**
     * This function returns a function to get bid price by price granularity
     * @param {string} granularity
     * @returns {function}
     */
    var getPriceByGranularity = function getPriceByGranularity(granularity) {
      return function (bid) {
        var bidGranularity = granularity || getPriceGranularity(bid);
        if (bidGranularity === _constants_json__WEBPACK_IMPORTED_MODULE_2__.GRANULARITY_OPTIONS.AUTO) {
          return bid.pbAg;
        } else if (bidGranularity === _constants_json__WEBPACK_IMPORTED_MODULE_2__.GRANULARITY_OPTIONS.DENSE) {
          return bid.pbDg;
        } else if (bidGranularity === _constants_json__WEBPACK_IMPORTED_MODULE_2__.GRANULARITY_OPTIONS.LOW) {
          return bid.pbLg;
        } else if (bidGranularity === _constants_json__WEBPACK_IMPORTED_MODULE_2__.GRANULARITY_OPTIONS.MEDIUM) {
          return bid.pbMg;
        } else if (bidGranularity === _constants_json__WEBPACK_IMPORTED_MODULE_2__.GRANULARITY_OPTIONS.HIGH) {
          return bid.pbHg;
        } else if (bidGranularity === _constants_json__WEBPACK_IMPORTED_MODULE_2__.GRANULARITY_OPTIONS.CUSTOM) {
          return bid.pbCg;
        }
      };
    };
    
    /**
     * This function returns a function to get first advertiser domain from bid response meta
     * @returns {function}
     */
    var getAdvertiserDomain = function getAdvertiserDomain() {
      return function (bid) {
        return bid.meta && bid.meta.advertiserDomains && bid.meta.advertiserDomains.length > 0 ? bid.meta.advertiserDomains[0] : '';
      };
    };
    
    /**
     * This function returns a function to get the primary category id from bid response meta
     * @returns {function}
     */
    var getPrimaryCatId = function getPrimaryCatId() {
      return function (bid) {
        return bid.meta && bid.meta.primaryCatId ? bid.meta.primaryCatId : '';
      };
    };
    
    // factory for key value objs
    function createKeyVal(key, value) {
      return {
        key: key,
        val: typeof value === 'function' ? function (bidResponse, bidReq) {
          return value(bidResponse, bidReq);
        } : function (bidResponse) {
          return (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.getValue)(bidResponse, value);
        }
      };
    }
    function defaultAdserverTargeting() {
      var TARGETING_KEYS = _constants_json__WEBPACK_IMPORTED_MODULE_2__.TARGETING_KEYS;
      return [createKeyVal(TARGETING_KEYS.BIDDER, 'bidderCode'), createKeyVal(TARGETING_KEYS.AD_ID, 'adId'), createKeyVal(TARGETING_KEYS.PRICE_BUCKET, getPriceByGranularity()), createKeyVal(TARGETING_KEYS.SIZE, 'size'), createKeyVal(TARGETING_KEYS.DEAL, 'dealId'), createKeyVal(TARGETING_KEYS.SOURCE, 'source'), createKeyVal(TARGETING_KEYS.FORMAT, 'mediaType'), createKeyVal(TARGETING_KEYS.ADOMAIN, getAdvertiserDomain()), createKeyVal(TARGETING_KEYS.ACAT, getPrimaryCatId())];
    }
    
    /**
     * @param {string} mediaType
     * @param {string} bidderCode
     * @param {BidRequest} bidReq
     * @returns {*}
     */
    function getStandardBidderSettings(mediaType, bidderCode) {
      var TARGETING_KEYS = _constants_json__WEBPACK_IMPORTED_MODULE_2__.TARGETING_KEYS;
      var standardSettings = Object.assign({}, _bidderSettings_js__WEBPACK_IMPORTED_MODULE_21__.bidderSettings.settingsFor(null));
      if (!standardSettings[_constants_json__WEBPACK_IMPORTED_MODULE_2__.JSON_MAPPING.ADSERVER_TARGETING]) {
        standardSettings[_constants_json__WEBPACK_IMPORTED_MODULE_2__.JSON_MAPPING.ADSERVER_TARGETING] = defaultAdserverTargeting();
      }
      if (mediaType === 'video') {
        var adserverTargeting = standardSettings[_constants_json__WEBPACK_IMPORTED_MODULE_2__.JSON_MAPPING.ADSERVER_TARGETING].slice();
        standardSettings[_constants_json__WEBPACK_IMPORTED_MODULE_2__.JSON_MAPPING.ADSERVER_TARGETING] = adserverTargeting;
    
        // Adding hb_uuid + hb_cache_id
        [TARGETING_KEYS.UUID, TARGETING_KEYS.CACHE_ID].forEach(function (targetingKeyVal) {
          if (typeof (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_14__.find)(adserverTargeting, function (kvPair) {
            return kvPair.key === targetingKeyVal;
          }) === 'undefined') {
            adserverTargeting.push(createKeyVal(targetingKeyVal, 'videoCacheKey'));
          }
        });
    
        // Adding hb_cache_host
        if (_config_js__WEBPACK_IMPORTED_MODULE_6__.config.getConfig('cache.url') && (!bidderCode || _bidderSettings_js__WEBPACK_IMPORTED_MODULE_21__.bidderSettings.get(bidderCode, 'sendStandardTargeting') !== false)) {
          var urlInfo = (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.parseUrl)(_config_js__WEBPACK_IMPORTED_MODULE_6__.config.getConfig('cache.url'));
          if (typeof (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_14__.find)(adserverTargeting, function (targetingKeyVal) {
            return targetingKeyVal.key === TARGETING_KEYS.CACHE_HOST;
          }) === 'undefined') {
            adserverTargeting.push(createKeyVal(TARGETING_KEYS.CACHE_HOST, function (bidResponse) {
              return (0,_utils_js__WEBPACK_IMPORTED_MODULE_15__["default"])(bidResponse, "adserverTargeting.".concat(TARGETING_KEYS.CACHE_HOST)) ? bidResponse.adserverTargeting[TARGETING_KEYS.CACHE_HOST] : urlInfo.hostname;
            }));
          }
        }
      }
      return standardSettings;
    }
    function getKeyValueTargetingPairs(bidderCode, custBidObj) {
      var _ref9 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref9$index = _ref9.index,
        index = _ref9$index === void 0 ? _auctionManager_js__WEBPACK_IMPORTED_MODULE_8__.auctionManager.index : _ref9$index;
      if (!custBidObj) {
        return {};
      }
      var bidRequest = index.getBidRequest(custBidObj);
      var keyValues = {};
    
      // 1) set the keys from "standard" setting or from prebid defaults
      // initialize default if not set
      var standardSettings = getStandardBidderSettings(custBidObj.mediaType, bidderCode);
      setKeys(keyValues, standardSettings, custBidObj, bidRequest);
    
      // 2) set keys from specific bidder setting override if they exist
      if (bidderCode && _bidderSettings_js__WEBPACK_IMPORTED_MODULE_21__.bidderSettings.getOwn(bidderCode, _constants_json__WEBPACK_IMPORTED_MODULE_2__.JSON_MAPPING.ADSERVER_TARGETING)) {
        setKeys(keyValues, _bidderSettings_js__WEBPACK_IMPORTED_MODULE_21__.bidderSettings.ownSettingsFor(bidderCode), custBidObj, bidRequest);
        custBidObj.sendStandardTargeting = _bidderSettings_js__WEBPACK_IMPORTED_MODULE_21__.bidderSettings.get(bidderCode, 'sendStandardTargeting');
      }
    
      // set native key value targeting
      if ( true && custBidObj['native']) {
        keyValues = Object.assign({}, keyValues, (0,_native_js__WEBPACK_IMPORTED_MODULE_17__.getNativeTargeting)(custBidObj));
      }
      return keyValues;
    }
    function setKeys(keyValues, bidderSettings, custBidObj, bidReq) {
      var targeting = bidderSettings[_constants_json__WEBPACK_IMPORTED_MODULE_2__.JSON_MAPPING.ADSERVER_TARGETING];
      custBidObj.size = custBidObj.getSize();
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__._each)(targeting, function (kvPair) {
        var key = kvPair.key;
        var value = kvPair.val;
        if (keyValues[key]) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logWarn)('The key: ' + key + ' is being overwritten');
        }
        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.isFn)(value)) {
          try {
            value = value(custBidObj, bidReq);
          } catch (e) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logError)('bidmanager', 'ERROR', e);
          }
        }
        if ((typeof bidderSettings.suppressEmptyKeys !== 'undefined' && bidderSettings.suppressEmptyKeys === true || key === _constants_json__WEBPACK_IMPORTED_MODULE_2__.TARGETING_KEYS.DEAL || key === _constants_json__WEBPACK_IMPORTED_MODULE_2__.TARGETING_KEYS.ACAT) && (
        // hb_deal & hb_acat are suppressed automatically if not set
    
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.isEmptyStr)(value) || value === null || value === undefined)) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logInfo)("suppressing empty key '" + key + "' from adserver targeting");
        } else {
          keyValues[key] = value;
        }
      });
      return keyValues;
    }
    function adjustBids(bid) {
      var bidPriceAdjusted = (0,_utils_cpm_js__WEBPACK_IMPORTED_MODULE_22__.adjustCpm)(bid.cpm, bid);
      if (bidPriceAdjusted >= 0) {
        bid.cpm = bidPriceAdjusted;
      }
    }
    
    /**
     * groupByPlacement is a reduce function that converts an array of Bid objects
     * to an object with placement codes as keys, with each key representing an object
     * with an array of `Bid` objects for that placement
     * @returns {*} as { [adUnitCode]: { bids: [Bid, Bid, Bid] } }
     */
    function groupByPlacement(bidsByPlacement, bid) {
      if (!bidsByPlacement[bid.adUnitCode]) {
        bidsByPlacement[bid.adUnitCode] = {
          bids: []
        };
      }
      bidsByPlacement[bid.adUnitCode].bids.push(bid);
      return bidsByPlacement;
    }
    
    /**
     * Returns a list of bids that we haven't received a response yet where the bidder did not call done
     * @param {BidRequest[]} bidderRequests List of bids requested for auction instance
     * @param {Set} timelyBidders Set of bidders which responded in time
     *
     * @typedef {Object} TimedOutBid
     * @property {string} bidId The id representing the bid
     * @property {string} bidder The string name of the bidder
     * @property {string} adUnitCode The code used to uniquely identify the ad unit on the publisher's page
     * @property {string} auctionId The id representing the auction
     *
     * @return {Array<TimedOutBid>} List of bids that Prebid hasn't received a response for
     */
    function getTimedOutBids(bidderRequests, timelyBidders) {
      var timedOutBids = bidderRequests.map(function (bid) {
        return (bid.bids || []).filter(function (bid) {
          return !timelyBidders.has(bid.bidder);
        });
      }).reduce(_utils_js__WEBPACK_IMPORTED_MODULE_4__.flatten, []);
      return timedOutBids;
    }
    
    /***/ }),
    
    /***/ "./src/auctionIndex.js":
    /*!*****************************!*\
      !*** ./src/auctionIndex.js ***!
      \*****************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "AuctionIndex": function() { return /* binding */ AuctionIndex; }
    /* harmony export */ });
    /**
     * Retrieves request-related bid data.
     * All methods are designed to work with Bid (response) objects returned by bid adapters.
     */
    function AuctionIndex(getAuctions) {
      Object.assign(this, {
        /**
         * @param auctionId
         * @returns {*} Auction instance for `auctionId`
         */
        getAuction: function getAuction(_ref) {
          var auctionId = _ref.auctionId;
          if (auctionId != null) {
            return getAuctions().find(function (auction) {
              return auction.getAuctionId() === auctionId;
            });
          }
        },
        /**
         * NOTE: you should prefer {@link #getMediaTypes} for looking up bid media types.
         * @param transactionId
         * @returns adUnit object for `transactionId`
         */
        getAdUnit: function getAdUnit(_ref2) {
          var transactionId = _ref2.transactionId;
          if (transactionId != null) {
            return getAuctions().flatMap(function (a) {
              return a.getAdUnits();
            }).find(function (au) {
              return au.transactionId === transactionId;
            });
          }
        },
        /**
         * @param transactionId
         * @param requestId?
         * @returns {*} mediaTypes object from bidRequest (through requestId) falling back to the adUnit (through transactionId).
         *
         * The bidRequest is given precedence because its mediaTypes can differ from the adUnit's (if bidder-specific labels are in use).
         * Bids that have no associated request do not have labels either, and use the adUnit's mediaTypes.
         */
        getMediaTypes: function getMediaTypes(_ref3) {
          var transactionId = _ref3.transactionId,
            requestId = _ref3.requestId;
          if (requestId != null) {
            var req = this.getBidRequest({
              requestId: requestId
            });
            if (req != null && (transactionId == null || req.transactionId === transactionId)) {
              return req.mediaTypes;
            }
          } else if (transactionId != null) {
            var au = this.getAdUnit({
              transactionId: transactionId
            });
            if (au != null) {
              return au.mediaTypes;
            }
          }
        },
        /**
         * @param requestId?
         * @param bidderRequestId?
         * @returns {*} bidderRequest that matches both requestId and bidderRequestId (if either or both are provided).
         *
         * NOTE: Bid responses are not guaranteed to have a corresponding request.
         */
        getBidderRequest: function getBidderRequest(_ref4) {
          var requestId = _ref4.requestId,
            bidderRequestId = _ref4.bidderRequestId;
          if (requestId != null || bidderRequestId != null) {
            var bers = getAuctions().flatMap(function (a) {
              return a.getBidRequests();
            });
            if (bidderRequestId != null) {
              bers = bers.filter(function (ber) {
                return ber.bidderRequestId === bidderRequestId;
              });
            }
            if (requestId == null) {
              return bers[0];
            } else {
              return bers.find(function (ber) {
                return ber.bids && ber.bids.find(function (br) {
                  return br.bidId === requestId;
                }) != null;
              });
            }
          }
        },
        /**
         * @param requestId
         * @returns {*} bidRequest object for requestId
         *
         * NOTE: Bid responses are not guaranteed to have a corresponding request.
         */
        getBidRequest: function getBidRequest(_ref5) {
          var requestId = _ref5.requestId;
          if (requestId != null) {
            return getAuctions().flatMap(function (a) {
              return a.getBidRequests();
            }).flatMap(function (ber) {
              return ber.bids;
            }).find(function (br) {
              return br && br.bidId === requestId;
            });
          }
        }
      });
    }
    
    /***/ }),
    
    /***/ "./src/auctionManager.js":
    /*!*******************************!*\
      !*** ./src/auctionManager.js ***!
      \*******************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "auctionManager": function() { return /* binding */ auctionManager; }
    /* harmony export */ });
    /* unused harmony export newAuctionManager */
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
    /* harmony import */ var _auction_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./auction.js */ "./src/auction.js");
    /* harmony import */ var _polyfill_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./polyfill.js */ "./src/polyfill.js");
    /* harmony import */ var _auctionIndex_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./auctionIndex.js */ "./src/auctionIndex.js");
    /* harmony import */ var _constants_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.json */ "./src/constants.json");
    /* harmony import */ var _utils_perfMetrics_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/perfMetrics.js */ "./src/utils/perfMetrics.js");
    /**
     * AuctionManager modules is responsible for creating auction instances.
     * This module is the gateway for Prebid core to access auctions.
     * It stores all created instances of auction and can be used to get consolidated values from auction.
     */
    
    /**
     * @typedef {Object} AuctionManager
     *
     * @property {function(): Array} getBidsRequested - returns consolidated bid requests
     * @property {function(): Array} getBidsReceived - returns consolidated bid received
     * @property {function(): Array} getAllBidsForAdUnitCode - returns consolidated bid received for a given adUnit
     * @property {function(): Array} getAdUnits - returns consolidated adUnits
     * @property {function(): Array} getAdUnitCodes - returns consolidated adUnitCodes
     * @property {function(): Object} createAuction - creates auction instance and stores it for future reference
     * @property {function(): Object} findBidByAdId - find bid received by adId. This function will be called by $$PREBID_GLOBAL$$.renderAd
     * @property {function(): Object} getStandardBidderAdServerTargeting - returns standard bidder targeting for all the adapters. Refer http://prebid.org/dev-docs/publisher-api-reference.html#module_pbjs.bidderSettings for more details
     * @property {function(Object): void} addWinningBid - add a winning bid to an auction based on auctionId
     * @property {function(): void} clearAllAuctions - clear all auctions for testing
     */
    
    
    
    
    
    
    
    
    /**
     * Creates new instance of auctionManager. There will only be one instance of auctionManager but
     * a factory is created to assist in testing.
     *
     * @returns {AuctionManager} auctionManagerInstance
     */
    function newAuctionManager() {
      var _auctions = [];
      var auctionManager = {};
      auctionManager.addWinningBid = function (bid) {
        var metrics = (0,_utils_perfMetrics_js__WEBPACK_IMPORTED_MODULE_0__.useMetrics)(bid.metrics);
        metrics.checkpoint('bidWon');
        metrics.timeBetween('auctionEnd', 'bidWon', 'render.pending');
        metrics.timeBetween('requestBids', 'bidWon', 'render.e2e');
        var auction = (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_1__.find)(_auctions, function (auction) {
          return auction.getAuctionId() === bid.auctionId;
        });
        if (auction) {
          bid.status = _constants_json__WEBPACK_IMPORTED_MODULE_2__.BID_STATUS.RENDERED;
          auction.addWinningBid(bid);
        } else {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.logWarn)("Auction not found when adding winning bid");
        }
      };
      auctionManager.getAllWinningBids = function () {
        return _auctions.map(function (auction) {
          return auction.getWinningBids();
        }).reduce(_utils_js__WEBPACK_IMPORTED_MODULE_3__.flatten, []);
      };
      auctionManager.getBidsRequested = function () {
        return _auctions.map(function (auction) {
          return auction.getBidRequests();
        }).reduce(_utils_js__WEBPACK_IMPORTED_MODULE_3__.flatten, []);
      };
      auctionManager.getNoBids = function () {
        return _auctions.map(function (auction) {
          return auction.getNoBids();
        }).reduce(_utils_js__WEBPACK_IMPORTED_MODULE_3__.flatten, []);
      };
      auctionManager.getBidsReceived = function () {
        return _auctions.map(function (auction) {
          if (auction.getAuctionStatus() === _auction_js__WEBPACK_IMPORTED_MODULE_4__.AUCTION_COMPLETED) {
            return auction.getBidsReceived();
          }
        }).reduce(_utils_js__WEBPACK_IMPORTED_MODULE_3__.flatten, []).filter(function (bid) {
          return bid;
        });
      };
      auctionManager.getAllBidsForAdUnitCode = function (adUnitCode) {
        return _auctions.map(function (auction) {
          return auction.getBidsReceived();
        }).reduce(_utils_js__WEBPACK_IMPORTED_MODULE_3__.flatten, []).filter(function (bid) {
          return bid && bid.adUnitCode === adUnitCode;
        });
      };
      auctionManager.getAdUnits = function () {
        return _auctions.map(function (auction) {
          return auction.getAdUnits();
        }).reduce(_utils_js__WEBPACK_IMPORTED_MODULE_3__.flatten, []);
      };
      auctionManager.getAdUnitCodes = function () {
        return _auctions.map(function (auction) {
          return auction.getAdUnitCodes();
        }).reduce(_utils_js__WEBPACK_IMPORTED_MODULE_3__.flatten, []).filter(_utils_js__WEBPACK_IMPORTED_MODULE_3__.uniques);
      };
      auctionManager.createAuction = function (opts) {
        var auction = (0,_auction_js__WEBPACK_IMPORTED_MODULE_4__.newAuction)(opts);
        _addAuction(auction);
        return auction;
      };
      auctionManager.findBidByAdId = function (adId) {
        return (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_1__.find)(_auctions.map(function (auction) {
          return auction.getBidsReceived();
        }).reduce(_utils_js__WEBPACK_IMPORTED_MODULE_3__.flatten, []), function (bid) {
          return bid.adId === adId;
        });
      };
      auctionManager.getStandardBidderAdServerTargeting = function () {
        return (0,_auction_js__WEBPACK_IMPORTED_MODULE_4__.getStandardBidderSettings)()[_constants_json__WEBPACK_IMPORTED_MODULE_2__.JSON_MAPPING.ADSERVER_TARGETING];
      };
      auctionManager.setStatusForBids = function (adId, status) {
        var bid = auctionManager.findBidByAdId(adId);
        if (bid) bid.status = status;
        if (bid && status === _constants_json__WEBPACK_IMPORTED_MODULE_2__.BID_STATUS.BID_TARGETING_SET) {
          var auction = (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_1__.find)(_auctions, function (auction) {
            return auction.getAuctionId() === bid.auctionId;
          });
          if (auction) auction.setBidTargeting(bid);
        }
      };
      auctionManager.getLastAuctionId = function () {
        return _auctions.length && _auctions[_auctions.length - 1].getAuctionId();
      };
      auctionManager.clearAllAuctions = function () {
        _auctions.length = 0;
      };
      function _addAuction(auction) {
        _auctions.push(auction);
      }
      auctionManager.index = new _auctionIndex_js__WEBPACK_IMPORTED_MODULE_5__.AuctionIndex(function () {
        return _auctions;
      });
      return auctionManager;
    }
    var auctionManager = newAuctionManager();
    
    /***/ }),
    
    /***/ "./src/bidderSettings.js":
    /*!*******************************!*\
      !*** ./src/bidderSettings.js ***!
      \*******************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "bidderSettings": function() { return /* binding */ bidderSettings; }
    /* harmony export */ });
    /* unused harmony export ScopedSettings */
    /* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
    /* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "./node_modules/dlv/index.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
    /* harmony import */ var _prebidGlobal_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./prebidGlobal.js */ "./src/prebidGlobal.js");
    /* harmony import */ var _constants_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./constants.json */ "./src/constants.json");
    
    
    function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
    function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
    function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
    
    
    
    var _resolveScope = /*#__PURE__*/new WeakSet();
    var ScopedSettings = /*#__PURE__*/function () {
      function ScopedSettings(getSettings, defaultScope) {
        (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__["default"])(this, ScopedSettings);
        _classPrivateMethodInitSpec(this, _resolveScope);
        this.getSettings = getSettings;
        this.defaultScope = defaultScope;
      }
    
      /**
       * Get setting value at `path` under the given scope, falling back to the default scope if needed.
       * If `scope` is `null`, get the setting's default value.
       * @param scope {String|null}
       * @param path {String}
       * @returns {*}
       */
      (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__["default"])(ScopedSettings, [{
        key: "get",
        value: function get(scope, path) {
          var value = this.getOwn(scope, path);
          if (typeof value === 'undefined') {
            value = this.getOwn(null, path);
          }
          return value;
        }
    
        /**
         * Get the setting value at `path` *without* falling back to the default value.
         * @param scope {String}
         * @param path {String}
         * @returns {*}
         */
      }, {
        key: "getOwn",
        value: function getOwn(scope, path) {
          scope = _classPrivateMethodGet(this, _resolveScope, _resolveScope2).call(this, scope);
          return (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"])(this.getSettings(), "".concat(scope, ".").concat(path));
        }
    
        /**
         * @returns {string[]} all existing scopes except the default one.
         */
      }, {
        key: "getScopes",
        value: function getScopes() {
          var _this = this;
          return Object.keys(this.getSettings()).filter(function (scope) {
            return scope !== _this.defaultScope;
          });
        }
    
        /**
         * @returns all settings in the given scope, merged with the settings for the default scope.
         */
      }, {
        key: "settingsFor",
        value: function settingsFor(scope) {
          return (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.mergeDeep)({}, this.ownSettingsFor(null), this.ownSettingsFor(scope));
        }
    
        /**
         * @returns all settings in the given scope, *without* any of the default settings.
         */
      }, {
        key: "ownSettingsFor",
        value: function ownSettingsFor(scope) {
          scope = _classPrivateMethodGet(this, _resolveScope, _resolveScope2).call(this, scope);
          return this.getSettings()[scope] || {};
        }
      }]);
      return ScopedSettings;
    }();
    function _resolveScope2(scope) {
      if (scope == null) {
        return this.defaultScope;
      } else {
        return scope;
      }
    }
    var bidderSettings = new ScopedSettings(function () {
      return (0,_prebidGlobal_js__WEBPACK_IMPORTED_MODULE_4__.getGlobal)().bidderSettings || {};
    }, _constants_json__WEBPACK_IMPORTED_MODULE_5__.JSON_MAPPING.BD_SETTING_STANDARD);
    
    /***/ }),
    
    /***/ "./src/bidfactory.js":
    /*!***************************!*\
      !*** ./src/bidfactory.js ***!
      \***************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "createBid": function() { return /* binding */ createBid; }
    /* harmony export */ });
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
    
    
    /**
     Required paramaters
     bidderCode,
     height,
     width,
     statusCode
     Optional paramaters
     adId,
     cpm,
     ad,
     adUrl,
     dealId,
     priceKeyString;
     */
    function Bid(statusCode) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$src = _ref.src,
        src = _ref$src === void 0 ? 'client' : _ref$src,
        _ref$bidder = _ref.bidder,
        bidder = _ref$bidder === void 0 ? '' : _ref$bidder,
        bidId = _ref.bidId,
        transactionId = _ref.transactionId,
        auctionId = _ref.auctionId;
      var _bidSrc = src;
      var _statusCode = statusCode || 0;
      this.bidderCode = bidder;
      this.width = 0;
      this.height = 0;
      this.statusMessage = _getStatus();
      this.adId = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getUniqueIdentifierStr)();
      this.requestId = bidId;
      this.transactionId = transactionId;
      this.auctionId = auctionId;
      this.mediaType = 'banner';
      this.source = _bidSrc;
      function _getStatus() {
        switch (_statusCode) {
          case 0:
            return 'Pending';
          case 1:
            return 'Bid available';
          case 2:
            return 'Bid returned empty or error response';
          case 3:
            return 'Bid timed out';
        }
      }
      this.getStatusCode = function () {
        return _statusCode;
      };
    
      // returns the size of the bid creative. Concatenation of width and height by ‘x’.
      this.getSize = function () {
        return this.width + 'x' + this.height;
      };
      this.getIdentifiers = function () {
        return {
          src: this.source,
          bidder: this.bidderCode,
          bidId: this.requestId,
          transactionId: this.transactionId,
          auctionId: this.auctionId
        };
      };
    }
    
    // Bid factory function.
    function createBid(statusCode, identifiers) {
      return new Bid(statusCode, identifiers);
    }
    
    /***/ }),
    
    /***/ "./src/config.js":
    /*!***********************!*\
      !*** ./src/config.js ***!
      \***********************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "RANDOM": function() { return /* binding */ RANDOM; },
    /* harmony export */   "config": function() { return /* binding */ config; }
    /* harmony export */ });
    /* unused harmony export newConfig */
    /* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
    /* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");
    /* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
    /* harmony import */ var _cpmBucketManager_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cpmBucketManager.js */ "./src/cpmBucketManager.js");
    /* harmony import */ var _polyfill_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./polyfill.js */ "./src/polyfill.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils.js */ "./node_modules/dlv/index.js");
    /* harmony import */ var _constants_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.json */ "./src/constants.json");
    
    
    
    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
    /*
     * Module for getting and setting Prebid configuration.
    */
    
    /**
     * @typedef {Object} MediaTypePriceGranularity
     *
     * @property {(string|Object)} [banner]
     * @property {(string|Object)} [native]
     * @property {(string|Object)} [video]
     * @property {(string|Object)} [video-instream]
     * @property {(string|Object)} [video-outstream]
     */
    
    
    
    
    
    var DEFAULT_DEBUG = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getParameterByName)(_constants_json__WEBPACK_IMPORTED_MODULE_2__.DEBUG_MODE).toUpperCase() === 'TRUE';
    var DEFAULT_BIDDER_TIMEOUT = 3000;
    var DEFAULT_ENABLE_SEND_ALL_BIDS = true;
    var DEFAULT_DISABLE_AJAX_TIMEOUT = false;
    var DEFAULT_BID_CACHE = false;
    var DEFAULT_DEVICE_ACCESS = true;
    var DEFAULT_MAX_NESTED_IFRAMES = 10;
    var DEFAULT_TIMEOUTBUFFER = 400;
    var RANDOM = 'random';
    var FIXED = 'fixed';
    var VALID_ORDERS = {};
    VALID_ORDERS[RANDOM] = true;
    VALID_ORDERS[FIXED] = true;
    var DEFAULT_BIDDER_SEQUENCE = RANDOM;
    var GRANULARITY_OPTIONS = {
      LOW: 'low',
      MEDIUM: 'medium',
      HIGH: 'high',
      AUTO: 'auto',
      DENSE: 'dense',
      CUSTOM: 'custom'
    };
    var ALL_TOPICS = '*';
    
    /**
     * @typedef {object} PrebidConfig
     *
     * @property {string} cache.url Set a url if we should use prebid-cache to store video bids before adding
     *   bids to the auction. **NOTE** This must be set if you want to use the dfpAdServerVideo module.
     */
    
    function newConfig() {
      var listeners = [];
      var defaults;
      var config;
      var bidderConfig;
      var currBidder = null;
      function resetConfig() {
        defaults = {};
        var newConfig = {
          // `debug` is equivalent to legacy `pbjs.logging` property
          _debug: DEFAULT_DEBUG,
          get debug() {
            return this._debug;
          },
          set debug(val) {
            this._debug = val;
          },
          // default timeout for all bids
          _bidderTimeout: DEFAULT_BIDDER_TIMEOUT,
          get bidderTimeout() {
            return this._bidderTimeout;
          },
          set bidderTimeout(val) {
            this._bidderTimeout = val;
          },
          _publisherDomain: null,
          get publisherDomain() {
            return this._publisherDomain;
          },
          set publisherDomain(val) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)('publisherDomain is deprecated and has no effect since v7 - use pageUrl instead');
            this._publisherDomain = val;
          },
          // calls existing function which may be moved after deprecation
          _priceGranularity: GRANULARITY_OPTIONS.MEDIUM,
          set priceGranularity(val) {
            if (validatePriceGranularity(val)) {
              if (typeof val === 'string') {
                this._priceGranularity = hasGranularity(val) ? val : GRANULARITY_OPTIONS.MEDIUM;
              } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(val)) {
                this._customPriceBucket = val;
                this._priceGranularity = GRANULARITY_OPTIONS.CUSTOM;
                (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logMessage)('Using custom price granularity');
              }
            }
          },
          get priceGranularity() {
            return this._priceGranularity;
          },
          _customPriceBucket: {},
          get customPriceBucket() {
            return this._customPriceBucket;
          },
          /**
           * mediaTypePriceGranularity
           * @type {MediaTypePriceGranularity}
           */
          _mediaTypePriceGranularity: {},
          get mediaTypePriceGranularity() {
            return this._mediaTypePriceGranularity;
          },
          set mediaTypePriceGranularity(val) {
            var _this = this;
            this._mediaTypePriceGranularity = Object.keys(val).reduce(function (aggregate, item) {
              if (validatePriceGranularity(val[item])) {
                if (typeof val === 'string') {
                  aggregate[item] = hasGranularity(val[item]) ? val[item] : _this._priceGranularity;
                } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(val)) {
                  aggregate[item] = val[item];
                  (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logMessage)("Using custom price granularity for ".concat(item));
                }
              } else {
                (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)("Invalid price granularity for media type: ".concat(item));
              }
              return aggregate;
            }, {});
          },
          _sendAllBids: DEFAULT_ENABLE_SEND_ALL_BIDS,
          get enableSendAllBids() {
            return this._sendAllBids;
          },
          set enableSendAllBids(val) {
            this._sendAllBids = val;
          },
          _useBidCache: DEFAULT_BID_CACHE,
          get useBidCache() {
            return this._useBidCache;
          },
          set useBidCache(val) {
            this._useBidCache = val;
          },
          /**
           * deviceAccess set to false will disable setCookie, getCookie, hasLocalStorage
           * @type {boolean}
           */
          _deviceAccess: DEFAULT_DEVICE_ACCESS,
          get deviceAccess() {
            return this._deviceAccess;
          },
          set deviceAccess(val) {
            this._deviceAccess = val;
          },
          _bidderSequence: DEFAULT_BIDDER_SEQUENCE,
          get bidderSequence() {
            return this._bidderSequence;
          },
          set bidderSequence(val) {
            if (VALID_ORDERS[val]) {
              this._bidderSequence = val;
            } else {
              (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)("Invalid order: ".concat(val, ". Bidder Sequence was not set."));
            }
          },
          // timeout buffer to adjust for bidder CDN latency
          _timeoutBuffer: DEFAULT_TIMEOUTBUFFER,
          get timeoutBuffer() {
            return this._timeoutBuffer;
          },
          set timeoutBuffer(val) {
            this._timeoutBuffer = val;
          },
          _disableAjaxTimeout: DEFAULT_DISABLE_AJAX_TIMEOUT,
          get disableAjaxTimeout() {
            return this._disableAjaxTimeout;
          },
          set disableAjaxTimeout(val) {
            this._disableAjaxTimeout = val;
          },
          // default max nested iframes for referer detection
          _maxNestedIframes: DEFAULT_MAX_NESTED_IFRAMES,
          get maxNestedIframes() {
            return this._maxNestedIframes;
          },
          set maxNestedIframes(val) {
            this._maxNestedIframes = val;
          },
          _auctionOptions: {},
          get auctionOptions() {
            return this._auctionOptions;
          },
          set auctionOptions(val) {
            if (validateauctionOptions(val)) {
              this._auctionOptions = val;
            }
          }
        };
        if (config) {
          callSubscribers(Object.keys(config).reduce(function (memo, topic) {
            if (config[topic] !== newConfig[topic]) {
              memo[topic] = newConfig[topic] || {};
            }
            return memo;
          }, {}));
        }
        config = newConfig;
        bidderConfig = {};
        function hasGranularity(val) {
          return (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.find)(Object.keys(GRANULARITY_OPTIONS), function (option) {
            return val === GRANULARITY_OPTIONS[option];
          });
        }
        function validatePriceGranularity(val) {
          if (!val) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logError)('Prebid Error: no value passed to `setPriceGranularity()`');
            return false;
          }
          if (typeof val === 'string') {
            if (!hasGranularity(val)) {
              (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)('Prebid Warning: setPriceGranularity was called with invalid setting, using `medium` as default.');
            }
          } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(val)) {
            if (!(0,_cpmBucketManager_js__WEBPACK_IMPORTED_MODULE_4__.isValidPriceConfig)(val)) {
              (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logError)('Invalid custom price value passed to `setPriceGranularity()`');
              return false;
            }
          }
          return true;
        }
        function validateauctionOptions(val) {
          if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(val)) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)('Auction Options must be an object');
            return false;
          }
          for (var _i = 0, _Object$keys = Object.keys(val); _i < _Object$keys.length; _i++) {
            var k = _Object$keys[_i];
            if (k !== 'secondaryBidders' && k !== 'suppressStaleRender') {
              (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)("Auction Options given an incorrect param: ".concat(k));
              return false;
            }
            if (k === 'secondaryBidders') {
              if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(val[k])) {
                (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)("Auction Options ".concat(k, " must be of type Array"));
                return false;
              } else if (!val[k].every(_utils_js__WEBPACK_IMPORTED_MODULE_1__.isStr)) {
                (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)("Auction Options ".concat(k, " must be only string"));
                return false;
              }
            } else if (k === 'suppressStaleRender') {
              if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isBoolean)(val[k])) {
                (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)("Auction Options ".concat(k, " must be of type boolean"));
                return false;
              }
            }
          }
          return true;
        }
      }
    
      /**
       * Returns base config with bidder overrides (if there is currently a bidder)
       * @private
       */
      function _getConfig() {
        if (currBidder && bidderConfig && (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(bidderConfig[currBidder])) {
          var currBidderConfig = bidderConfig[currBidder];
          var configTopicSet = new Set(Object.keys(config).concat(Object.keys(currBidderConfig)));
          return (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.arrayFrom)(configTopicSet).reduce(function (memo, topic) {
            if (typeof currBidderConfig[topic] === 'undefined') {
              memo[topic] = config[topic];
            } else if (typeof config[topic] === 'undefined') {
              memo[topic] = currBidderConfig[topic];
            } else {
              if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(currBidderConfig[topic])) {
                memo[topic] = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)({}, config[topic], currBidderConfig[topic]);
              } else {
                memo[topic] = currBidderConfig[topic];
              }
            }
            return memo;
          }, {});
        }
        return Object.assign({}, config);
      }
      function _getRestrictedConfig() {
        // This causes reading 'ortb2' to throw an error; with prebid 7, that will almost
        // always be the incorrect way to access FPD configuration (https://github.com/prebid/Prebid.js/issues/7651)
        // code that needs the ortb2 config should explicitly use `getAnyConfig`
        // TODO: this is meant as a temporary tripwire to catch inadvertent use of `getConfig('ortb')` as we transition.
        // It should be removed once the risk of that happening is low enough.
        var conf = _getConfig();
        Object.defineProperty(conf, 'ortb2', {
          get: function get() {
            throw new Error('invalid access to \'orbt2\' config - use request parameters instead');
          }
        });
        return conf;
      }
      var _map = [_getConfig, _getRestrictedConfig].map(function (accessor) {
          /*
           * Returns configuration object if called without parameters,
           * or single configuration property if given a string matching a configuration
           * property name.  Allows deep access e.g. getConfig('currency.adServerCurrency')
           *
           * If called with callback parameter, or a string and a callback parameter,
           * subscribes to configuration updates. See `subscribe` function for usage.
           */
          return function getConfig() {
            if (arguments.length <= 1 && typeof (arguments.length <= 0 ? undefined : arguments[0]) !== 'function') {
              var option = arguments.length <= 0 ? undefined : arguments[0];
              return option ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(accessor(), option) : _getConfig();
            }
            return subscribe.apply(void 0, arguments);
          };
        }),
        _map2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6__["default"])(_map, 2),
        getAnyConfig = _map2[0],
        getConfig = _map2[1];
      var _map3 = [getConfig, getAnyConfig].map(function (wrapee) {
          /*
           * Like getConfig, except that it returns a deepClone of the result.
           */
          return function readConfig() {
            var res = wrapee.apply(void 0, arguments);
            if (res && (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_7__["default"])(res) === 'object') {
              res = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.deepClone)(res);
            }
            return res;
          };
        }),
        _map4 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6__["default"])(_map3, 2),
        readConfig = _map4[0],
        readAnyConfig = _map4[1];
    
      /**
       * Internal API for modules (such as prebid-server) that might need access to all bidder config
       */
      function getBidderConfig() {
        return bidderConfig;
      }
    
      /*
       * Sets configuration given an object containing key-value pairs and calls
       * listeners that were added by the `subscribe` function
       */
      function setConfig(options) {
        if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(options)) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logError)('setConfig options must be an object');
          return;
        }
        var topics = Object.keys(options);
        var topicalConfig = {};
        topics.forEach(function (topic) {
          var option = options[topic];
          if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(defaults[topic]) && (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(option)) {
            option = Object.assign({}, defaults[topic], option);
          }
          try {
            topicalConfig[topic] = config[topic] = option;
          } catch (e) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)("Cannot set config for property ".concat(topic, " : "), e);
          }
        });
        callSubscribers(topicalConfig);
      }
    
      /**
       * Sets configuration defaults which setConfig values can be applied on top of
       * @param {object} options
       */
      function setDefaults(options) {
        if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(defaults)) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logError)('defaults must be an object');
          return;
        }
        Object.assign(defaults, options);
        // Add default values to config as well
        Object.assign(config, options);
      }
    
      /*
       * Adds a function to a set of listeners that are invoked whenever `setConfig`
       * is called. The subscribed function will be passed the options object that
       * was used in the `setConfig` call. Topics can be subscribed to to only get
       * updates when specific properties are updated by passing a topic string as
       * the first parameter.
       *
       * If `options.init` is true, the listener will be immediately called with the current options.
       *
       * Returns an `unsubscribe` function for removing the subscriber from the
       * set of listeners
       *
       * Example use:
       * // subscribe to all configuration changes
       * subscribe((config) => console.log('config set:', config));
       *
       * // subscribe to only 'logging' changes
       * subscribe('logging', (config) => console.log('logging set:', config));
       *
       * // unsubscribe
       * const unsubscribe = subscribe(...);
       * unsubscribe(); // no longer listening
       *
       */
      function subscribe(topic, listener) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var callback = listener;
        if (typeof topic !== 'string') {
          // first param should be callback function in this case,
          // meaning it gets called for any config change
          callback = topic;
          topic = ALL_TOPICS;
          options = listener || {};
        }
        if (typeof callback !== 'function') {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logError)('listener must be a function');
          return;
        }
        var nl = {
          topic: topic,
          callback: callback
        };
        listeners.push(nl);
        if (options.init) {
          if (topic === ALL_TOPICS) {
            callback(getConfig());
          } else {
            // eslint-disable-next-line standard/no-callback-literal
            callback((0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])({}, topic, getConfig(topic)));
          }
        }
    
        // save and call this function to remove the listener
        return function unsubscribe() {
          listeners.splice(listeners.indexOf(nl), 1);
        };
      }
    
      /*
       * Calls listeners that were added by the `subscribe` function
       */
      function callSubscribers(options) {
        var TOPICS = Object.keys(options);
    
        // call subscribers of a specific topic, passing only that configuration
        listeners.filter(function (listener) {
          return (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.includes)(TOPICS, listener.topic);
        }).forEach(function (listener) {
          listener.callback((0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])({}, listener.topic, options[listener.topic]));
        });
    
        // call subscribers that didn't give a topic, passing everything that was set
        listeners.filter(function (listener) {
          return listener.topic === ALL_TOPICS;
        }).forEach(function (listener) {
          return listener.callback(options);
        });
      }
      function setBidderConfig(config) {
        var mergeFlag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        try {
          check(config);
          config.bidders.forEach(function (bidder) {
            if (!bidderConfig[bidder]) {
              bidderConfig[bidder] = {};
            }
            Object.keys(config.config).forEach(function (topic) {
              var option = config.config[topic];
              if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(option)) {
                var func = mergeFlag ? _utils_js__WEBPACK_IMPORTED_MODULE_1__.mergeDeep : Object.assign;
                bidderConfig[bidder][topic] = func({}, bidderConfig[bidder][topic] || {}, option);
              } else {
                bidderConfig[bidder][topic] = option;
              }
            });
          });
        } catch (e) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logError)(e);
        }
        function check(obj) {
          if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(obj)) {
            throw 'setBidderConfig bidder options must be an object';
          }
          if (!(Array.isArray(obj.bidders) && obj.bidders.length)) {
            throw 'setBidderConfig bidder options must contain a bidders list with at least 1 bidder';
          }
          if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(obj.config)) {
            throw 'setBidderConfig bidder options must contain a config object';
          }
        }
      }
      function mergeConfig(obj) {
        if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(obj)) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logError)('mergeConfig input must be an object');
          return;
        }
        var mergedConfig = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)(_getConfig(), obj);
        setConfig(_objectSpread({}, mergedConfig));
        return mergedConfig;
      }
      function mergeBidderConfig(obj) {
        return setBidderConfig(obj, true);
      }
    
      /**
       * Internal functions for core to execute some synchronous code while having an active bidder set.
       */
      function runWithBidder(bidder, fn) {
        currBidder = bidder;
        try {
          return fn();
        } finally {
          resetBidder();
        }
      }
      function callbackWithBidder(bidder) {
        return function (cb) {
          return function () {
            if (typeof cb === 'function') {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              return runWithBidder(bidder, _utils_js__WEBPACK_IMPORTED_MODULE_1__.bind.call.apply(_utils_js__WEBPACK_IMPORTED_MODULE_1__.bind, [cb, this].concat(args)));
            } else {
              (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)('config.callbackWithBidder callback is not a function');
            }
          };
        };
      }
      function getCurrentBidder() {
        return currBidder;
      }
      function resetBidder() {
        currBidder = null;
      }
      resetConfig();
      return {
        getCurrentBidder: getCurrentBidder,
        resetBidder: resetBidder,
        getConfig: getConfig,
        getAnyConfig: getAnyConfig,
        readConfig: readConfig,
        readAnyConfig: readAnyConfig,
        setConfig: setConfig,
        mergeConfig: mergeConfig,
        setDefaults: setDefaults,
        resetConfig: resetConfig,
        runWithBidder: runWithBidder,
        callbackWithBidder: callbackWithBidder,
        setBidderConfig: setBidderConfig,
        getBidderConfig: getBidderConfig,
        mergeBidderConfig: mergeBidderConfig
      };
    }
    var config = newConfig();
    
    /***/ }),
    
    /***/ "./src/consentHandler.js":
    /*!*******************************!*\
      !*** ./src/consentHandler.js ***!
      \*******************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "GdprConsentHandler": function() { return /* binding */ GdprConsentHandler; },
    /* harmony export */   "GppConsentHandler": function() { return /* binding */ GppConsentHandler; },
    /* harmony export */   "UspConsentHandler": function() { return /* binding */ UspConsentHandler; },
    /* harmony export */   "VENDORLESS_GVLID": function() { return /* binding */ VENDORLESS_GVLID; }
    /* harmony export */ });
    /* unused harmony export ConsentHandler */
    /* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
    /* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
    /* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
    /* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
    /* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
    /* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
    /* harmony import */ var _babel_runtime_helpers_classPrivateFieldGet__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/classPrivateFieldGet */ "./node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js");
    /* harmony import */ var _babel_runtime_helpers_classPrivateFieldSet__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/classPrivateFieldSet */ "./node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
    /* harmony import */ var _utils_promise_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/promise.js */ "./src/utils/promise.js");
    
    
    
    
    
    
    
    
    function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_0__["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_0__["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__["default"])(this, result); }; }
    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
    function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
    function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
    function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
    function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
    
    
    
    /**
     * Placeholder gvlid for when vendor consent is not required. When this value is used as gvlid, the gdpr
     * enforcement module will take it to mean "vendor consent was given".
     *
     * see https://github.com/prebid/Prebid.js/issues/8161
     */
    var VENDORLESS_GVLID = Object.freeze({});
    var _enabled = /*#__PURE__*/new WeakMap();
    var _data = /*#__PURE__*/new WeakMap();
    var _defer = /*#__PURE__*/new WeakMap();
    var _ready = /*#__PURE__*/new WeakMap();
    var _resolve = /*#__PURE__*/new WeakSet();
    var ConsentHandler = /*#__PURE__*/function () {
      function ConsentHandler() {
        (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__["default"])(this, ConsentHandler);
        _classPrivateMethodInitSpec(this, _resolve);
        _classPrivateFieldInitSpec(this, _enabled, {
          writable: true,
          value: void 0
        });
        _classPrivateFieldInitSpec(this, _data, {
          writable: true,
          value: void 0
        });
        _classPrivateFieldInitSpec(this, _defer, {
          writable: true,
          value: void 0
        });
        _classPrivateFieldInitSpec(this, _ready, {
          writable: true,
          value: void 0
        });
        (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "generatedTime", void 0);
        this.reset();
      }
      (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4__["default"])(ConsentHandler, [{
        key: "reset",
        value:
        /**
         * reset this handler (mainly for tests)
         */
        function reset() {
          (0,_babel_runtime_helpers_classPrivateFieldSet__WEBPACK_IMPORTED_MODULE_5__["default"])(this, _defer, (0,_utils_promise_js__WEBPACK_IMPORTED_MODULE_6__.defer)());
          (0,_babel_runtime_helpers_classPrivateFieldSet__WEBPACK_IMPORTED_MODULE_5__["default"])(this, _enabled, false);
          (0,_babel_runtime_helpers_classPrivateFieldSet__WEBPACK_IMPORTED_MODULE_5__["default"])(this, _data, null);
          (0,_babel_runtime_helpers_classPrivateFieldSet__WEBPACK_IMPORTED_MODULE_5__["default"])(this, _ready, false);
          this.generatedTime = null;
        }
    
        /**
         * Enable this consent handler. This should be called by the relevant consent management module
         * on initialization.
         */
      }, {
        key: "enable",
        value: function enable() {
          (0,_babel_runtime_helpers_classPrivateFieldSet__WEBPACK_IMPORTED_MODULE_5__["default"])(this, _enabled, true);
        }
    
        /**
         * @returns {boolean} true if the related consent management module is enabled.
         */
      }, {
        key: "enabled",
        get: function get() {
          return (0,_babel_runtime_helpers_classPrivateFieldGet__WEBPACK_IMPORTED_MODULE_7__["default"])(this, _enabled);
        }
    
        /**
         * @returns {boolean} true if consent data has been resolved (it may be `null` if the resolution failed).
         */
      }, {
        key: "ready",
        get: function get() {
          return (0,_babel_runtime_helpers_classPrivateFieldGet__WEBPACK_IMPORTED_MODULE_7__["default"])(this, _ready);
        }
    
        /**
         * @returns a promise than resolves to the consent data, or null if no consent data is available
         */
      }, {
        key: "promise",
        get: function get() {
          if ((0,_babel_runtime_helpers_classPrivateFieldGet__WEBPACK_IMPORTED_MODULE_7__["default"])(this, _ready)) {
            return _utils_promise_js__WEBPACK_IMPORTED_MODULE_6__.GreedyPromise.resolve((0,_babel_runtime_helpers_classPrivateFieldGet__WEBPACK_IMPORTED_MODULE_7__["default"])(this, _data));
          }
          if (!(0,_babel_runtime_helpers_classPrivateFieldGet__WEBPACK_IMPORTED_MODULE_7__["default"])(this, _enabled)) {
            _classPrivateMethodGet(this, _resolve, _resolve2).call(this, null);
          }
          return (0,_babel_runtime_helpers_classPrivateFieldGet__WEBPACK_IMPORTED_MODULE_7__["default"])(this, _defer).promise;
        }
      }, {
        key: "setConsentData",
        value: function setConsentData(data) {
          var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0,_utils_js__WEBPACK_IMPORTED_MODULE_8__.timestamp)();
          this.generatedTime = time;
          _classPrivateMethodGet(this, _resolve, _resolve2).call(this, data);
        }
      }, {
        key: "getConsentData",
        value: function getConsentData() {
          return (0,_babel_runtime_helpers_classPrivateFieldGet__WEBPACK_IMPORTED_MODULE_7__["default"])(this, _data);
        }
      }]);
      return ConsentHandler;
    }();
    function _resolve2(data) {
      (0,_babel_runtime_helpers_classPrivateFieldSet__WEBPACK_IMPORTED_MODULE_5__["default"])(this, _ready, true);
      (0,_babel_runtime_helpers_classPrivateFieldSet__WEBPACK_IMPORTED_MODULE_5__["default"])(this, _data, data);
      (0,_babel_runtime_helpers_classPrivateFieldGet__WEBPACK_IMPORTED_MODULE_7__["default"])(this, _defer).resolve(data);
    }
    var UspConsentHandler = /*#__PURE__*/function (_ConsentHandler) {
      (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_9__["default"])(UspConsentHandler, _ConsentHandler);
      var _super = _createSuper(UspConsentHandler);
      function UspConsentHandler() {
        (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__["default"])(this, UspConsentHandler);
        return _super.apply(this, arguments);
      }
      (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4__["default"])(UspConsentHandler, [{
        key: "getConsentMeta",
        value: function getConsentMeta() {
          var consentData = this.getConsentData();
          if (consentData && this.generatedTime) {
            return {
              usp: consentData,
              generatedAt: this.generatedTime
            };
          }
        }
      }]);
      return UspConsentHandler;
    }(ConsentHandler);
    var GdprConsentHandler = /*#__PURE__*/function (_ConsentHandler2) {
      (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_9__["default"])(GdprConsentHandler, _ConsentHandler2);
      var _super2 = _createSuper(GdprConsentHandler);
      function GdprConsentHandler() {
        (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__["default"])(this, GdprConsentHandler);
        return _super2.apply(this, arguments);
      }
      (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4__["default"])(GdprConsentHandler, [{
        key: "getConsentMeta",
        value: function getConsentMeta() {
          var consentData = this.getConsentData();
          if (consentData && consentData.vendorData && this.generatedTime) {
            return {
              gdprApplies: consentData.gdprApplies,
              consentStringSize: (0,_utils_js__WEBPACK_IMPORTED_MODULE_8__.isStr)(consentData.vendorData.tcString) ? consentData.vendorData.tcString.length : 0,
              generatedAt: this.generatedTime,
              apiVersion: consentData.apiVersion
            };
          }
        }
      }]);
      return GdprConsentHandler;
    }(ConsentHandler);
    var GppConsentHandler = /*#__PURE__*/function (_ConsentHandler3) {
      (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_9__["default"])(GppConsentHandler, _ConsentHandler3);
      var _super3 = _createSuper(GppConsentHandler);
      function GppConsentHandler() {
        (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__["default"])(this, GppConsentHandler);
        return _super3.apply(this, arguments);
      }
      (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4__["default"])(GppConsentHandler, [{
        key: "getConsentMeta",
        value: function getConsentMeta() {
          var consentData = this.getConsentData();
          if (consentData && this.generatedTime) {
            return {
              generatedAt: this.generatedTime
            };
          }
        }
      }]);
      return GppConsentHandler;
    }(ConsentHandler);
    
    /***/ }),
    
    /***/ "./src/cpmBucketManager.js":
    /*!*********************************!*\
      !*** ./src/cpmBucketManager.js ***!
      \*********************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "getPriceBucketString": function() { return /* binding */ getPriceBucketString; },
    /* harmony export */   "isValidPriceConfig": function() { return /* binding */ isValidPriceConfig; }
    /* harmony export */ });
    /* harmony import */ var _polyfill_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./polyfill.js */ "./src/polyfill.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
    /* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config.js */ "./src/config.js");
    
    
    
    var _defaultPrecision = 2;
    var _lgPriceConfig = {
      'buckets': [{
        'max': 5,
        'increment': 0.5
      }]
    };
    var _mgPriceConfig = {
      'buckets': [{
        'max': 20,
        'increment': 0.1
      }]
    };
    var _hgPriceConfig = {
      'buckets': [{
        'max': 20,
        'increment': 0.01
      }]
    };
    var _densePriceConfig = {
      'buckets': [{
        'max': 3,
        'increment': 0.01
      }, {
        'max': 8,
        'increment': 0.05
      }, {
        'max': 20,
        'increment': 0.5
      }]
    };
    var _autoPriceConfig = {
      'buckets': [{
        'max': 5,
        'increment': 0.05
      }, {
        'max': 10,
        'increment': 0.1
      }, {
        'max': 20,
        'increment': 0.5
      }]
    };
    function getPriceBucketString(cpm, customConfig) {
      var granularityMultiplier = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var cpmFloat = parseFloat(cpm);
      if (isNaN(cpmFloat)) {
        cpmFloat = '';
      }
      return {
        low: cpmFloat === '' ? '' : getCpmStringValue(cpm, _lgPriceConfig, granularityMultiplier),
        med: cpmFloat === '' ? '' : getCpmStringValue(cpm, _mgPriceConfig, granularityMultiplier),
        high: cpmFloat === '' ? '' : getCpmStringValue(cpm, _hgPriceConfig, granularityMultiplier),
        auto: cpmFloat === '' ? '' : getCpmStringValue(cpm, _autoPriceConfig, granularityMultiplier),
        dense: cpmFloat === '' ? '' : getCpmStringValue(cpm, _densePriceConfig, granularityMultiplier),
        custom: cpmFloat === '' ? '' : getCpmStringValue(cpm, customConfig, granularityMultiplier)
      };
    }
    function getCpmStringValue(cpm, config, granularityMultiplier) {
      var cpmStr = '';
      if (!isValidPriceConfig(config)) {
        return cpmStr;
      }
      var cap = config.buckets.reduce(function (prev, curr) {
        if (prev.max > curr.max) {
          return prev;
        }
        return curr;
      }, {
        'max': 0
      });
      var bucketFloor = 0;
      var bucket = (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_0__.find)(config.buckets, function (bucket) {
        if (cpm > cap.max * granularityMultiplier) {
          // cpm exceeds cap, just return the cap.
          var precision = bucket.precision;
          if (typeof precision === 'undefined') {
            precision = _defaultPrecision;
          }
          cpmStr = (bucket.max * granularityMultiplier).toFixed(precision);
        } else if (cpm <= bucket.max * granularityMultiplier && cpm >= bucketFloor * granularityMultiplier) {
          bucket.min = bucketFloor;
          return bucket;
        } else {
          bucketFloor = bucket.max;
        }
      });
      if (bucket) {
        cpmStr = getCpmTarget(cpm, bucket, granularityMultiplier);
      }
      return cpmStr;
    }
    function isValidPriceConfig(config) {
      if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isEmpty)(config) || !config.buckets || !Array.isArray(config.buckets)) {
        return false;
      }
      var isValid = true;
      config.buckets.forEach(function (bucket) {
        if (!bucket.max || !bucket.increment) {
          isValid = false;
        }
      });
      return isValid;
    }
    function getCpmTarget(cpm, bucket, granularityMultiplier) {
      var precision = typeof bucket.precision !== 'undefined' ? bucket.precision : _defaultPrecision;
      var increment = bucket.increment * granularityMultiplier;
      var bucketMin = bucket.min * granularityMultiplier;
      var roundingFunction = Math.floor;
      var customRoundingFunction = _config_js__WEBPACK_IMPORTED_MODULE_2__.config.getConfig('cpmRoundingFunction');
      if (typeof customRoundingFunction === 'function') {
        roundingFunction = customRoundingFunction;
      }
    
      // start increments at the bucket min and then add bucket min back to arrive at the correct rounding
      // note - we're padding the values to avoid using decimals in the math prior to flooring
      // this is done as JS can return values slightly below the expected mark which would skew the price bucket target
      //   (eg 4.01 / 0.01 = 400.99999999999994)
      // min precison should be 2 to move decimal place over.
      var pow = Math.pow(10, precision + 2);
      var cpmToRound = (cpm * pow - bucketMin * pow) / (increment * pow);
      var cpmTarget;
      var invalidRounding;
      // It is likely that we will be passed {cpmRoundingFunction: roundingFunction()}
      // rather than the expected {cpmRoundingFunction: roundingFunction}. Default back to floor in that case
      try {
        cpmTarget = roundingFunction(cpmToRound) * increment + bucketMin;
      } catch (err) {
        invalidRounding = true;
      }
      if (invalidRounding || typeof cpmTarget !== 'number') {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)('Invalid rounding function passed in config');
        cpmTarget = Math.floor(cpmToRound) * increment + bucketMin;
      }
      // force to 10 decimal places to deal with imprecise decimal/binary conversions
      //    (for example 0.1 * 3 = 0.30000000000000004)
    
      cpmTarget = Number(cpmTarget.toFixed(10));
      return cpmTarget.toFixed(precision);
    }
    
    
    /***/ }),
    
    /***/ "./src/debugging.js":
    /*!**************************!*\
      !*** ./src/debugging.js ***!
      \**************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "loadSession": function() { return /* binding */ loadSession; }
    /* harmony export */ });
    /* unused harmony exports DEBUG_KEY, debuggingModuleLoader, debuggingControls, reset */
    /* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./config.js */ "./src/config.js");
    /* harmony import */ var _hook_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hook.js */ "./src/hook.js");
    /* harmony import */ var _prebidGlobal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./prebidGlobal.js */ "./src/prebidGlobal.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
    /* harmony import */ var _bidfactory_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./bidfactory.js */ "./src/bidfactory.js");
    /* harmony import */ var _adloader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./adloader.js */ "./src/adloader.js");
    /* harmony import */ var _utils_promise_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/promise.js */ "./src/utils/promise.js");
    
    
    
    
    
    
    
    var DEBUG_KEY = "__owpbjs_debugging__";
    function isDebuggingInstalled() {
      return (0,_prebidGlobal_js__WEBPACK_IMPORTED_MODULE_0__.getGlobal)().installedModules.includes('debugging');
    }
    function loadScript(url) {
      return new _utils_promise_js__WEBPACK_IMPORTED_MODULE_1__.GreedyPromise(function (resolve) {
        (0,_adloader_js__WEBPACK_IMPORTED_MODULE_2__.loadExternalScript)(url, 'debugging', resolve);
      });
    }
    function debuggingModuleLoader() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$alreadyInstalled = _ref.alreadyInstalled,
        alreadyInstalled = _ref$alreadyInstalled === void 0 ? isDebuggingInstalled : _ref$alreadyInstalled,
        _ref$script = _ref.script,
        script = _ref$script === void 0 ? loadScript : _ref$script;
      var loading = null;
      return function () {
        if (loading == null) {
          loading = new _utils_promise_js__WEBPACK_IMPORTED_MODULE_1__.GreedyPromise(function (resolve, reject) {
            // run this in a 0-delay timeout to give installedModules time to be populated
            setTimeout(function () {
              if (alreadyInstalled()) {
                resolve();
              } else {
                var url = "/build/dev/debugging-standalone.js";
                (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.logMessage)("Debugging module not installed, loading it from \"".concat(url, "\"..."));
                (0,_prebidGlobal_js__WEBPACK_IMPORTED_MODULE_0__.getGlobal)()._installDebugging = true;
                script(url).then(function () {
                  (0,_prebidGlobal_js__WEBPACK_IMPORTED_MODULE_0__.getGlobal)()._installDebugging({
                    DEBUG_KEY: DEBUG_KEY,
                    hook: _hook_js__WEBPACK_IMPORTED_MODULE_4__.hook,
                    config: _config_js__WEBPACK_IMPORTED_MODULE_5__.config,
                    createBid: _bidfactory_js__WEBPACK_IMPORTED_MODULE_6__.createBid,
                    logger: (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.prefixLog)('DEBUG:')
                  });
                }).then(resolve, reject);
              }
            });
          });
        }
        return loading;
      };
    }
    function debuggingControls() {
      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref2$load = _ref2.load,
        load = _ref2$load === void 0 ? debuggingModuleLoader() : _ref2$load,
        _ref2$hook = _ref2.hook,
        hook = _ref2$hook === void 0 ? (0,_hook_js__WEBPACK_IMPORTED_MODULE_4__.getHook)('requestBids') : _ref2$hook;
      var promise = null;
      var enabled = false;
      function waitForDebugging(next) {
        var _this = this;
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        return (promise || _utils_promise_js__WEBPACK_IMPORTED_MODULE_1__.GreedyPromise.resolve()).then(function () {
          return next.apply(_this, args);
        });
      }
      function enable() {
        if (!enabled) {
          promise = load();
          // set debugging to high priority so that it has the opportunity to mess with most things
          hook.before(waitForDebugging, 99);
          enabled = true;
        }
      }
      function disable() {
        hook.getHooks({
          hook: waitForDebugging
        }).remove();
        enabled = false;
      }
      function reset() {
        promise = null;
        disable();
      }
      return {
        enable: enable,
        disable: disable,
        reset: reset
      };
    }
    var ctl = debuggingControls();
    var reset = ctl.reset;
    function loadSession() {
      var storage = null;
      try {
        storage = window.sessionStorage;
      } catch (e) {}
      if (storage !== null) {
        var debugging = ctl;
        var _config = null;
        try {
          _config = storage.getItem(DEBUG_KEY);
        } catch (e) {}
        if (_config !== null) {
          // just make sure the module runs; it will take care of parsing the config (and disabling itself if necessary)
          debugging.enable();
        }
      }
    }
    _config_js__WEBPACK_IMPORTED_MODULE_5__.config.getConfig('debugging', function (_ref3) {
      var debugging = _ref3.debugging;
      debugging !== null && debugging !== void 0 && debugging.enabled ? ctl.enable() : ctl.disable();
    });
    
    /***/ }),
    
    /***/ "./src/events.js":
    /*!***********************!*\
      !*** ./src/events.js ***!
      \***********************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "emit": function() { return /* binding */ emit; },
    /* harmony export */   "getEvents": function() { return /* binding */ getEvents; },
    /* harmony export */   "off": function() { return /* binding */ off; },
    /* harmony export */   "on": function() { return /* binding */ on; }
    /* harmony export */ });
    /* unused harmony exports get, addEvents, clearEvents */
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
    /* harmony import */ var _constants_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.json */ "./src/constants.json");
    /**
     * events.js
     */
    
    
    var slice = Array.prototype.slice;
    var push = Array.prototype.push;
    
    // define entire events
    // var allEvents = ['bidRequested','bidResponse','bidWon','bidTimeout'];
    var allEvents = _utils_js__WEBPACK_IMPORTED_MODULE_0__._map(_constants_json__WEBPACK_IMPORTED_MODULE_1__.EVENTS, function (v) {
      return v;
    });
    var idPaths = _constants_json__WEBPACK_IMPORTED_MODULE_1__.EVENT_ID_PATHS;
    
    // keep a record of all events fired
    var eventsFired = [];
    var _public = function () {
      var _handlers = {};
      var _public = {};
    
      /**
       *
       * @param {String} eventString  The name of the event.
       * @param {Array} args  The payload emitted with the event.
       * @private
       */
      function _dispatch(eventString, args) {
        _utils_js__WEBPACK_IMPORTED_MODULE_0__.logMessage('Emitting event for: ' + eventString);
        var eventPayload = args[0] || {};
        var idPath = idPaths[eventString];
        var key = eventPayload[idPath];
        var event = _handlers[eventString] || {
          que: []
        };
        var eventKeys = _utils_js__WEBPACK_IMPORTED_MODULE_0__._map(event, function (v, k) {
          return k;
        });
        var callbacks = [];
    
        // record the event:
        eventsFired.push({
          eventType: eventString,
          args: eventPayload,
          id: key,
          elapsedTime: _utils_js__WEBPACK_IMPORTED_MODULE_0__.getPerformanceNow()
        });
    
        /** Push each specific callback to the `callbacks` array.
         * If the `event` map has a key that matches the value of the
         * event payload id path, e.g. `eventPayload[idPath]`, then apply
         * each function in the `que` array as an argument to push to the
         * `callbacks` array
         * */
        if (key && _utils_js__WEBPACK_IMPORTED_MODULE_0__.contains(eventKeys, key)) {
          push.apply(callbacks, event[key].que);
        }
    
        /** Push each general callback to the `callbacks` array. */
        push.apply(callbacks, event.que);
    
        /** call each of the callbacks */
        _utils_js__WEBPACK_IMPORTED_MODULE_0__._each(callbacks, function (fn) {
          if (!fn) return;
          try {
            fn.apply(null, args);
          } catch (e) {
            _utils_js__WEBPACK_IMPORTED_MODULE_0__.logError('Error executing handler:', 'events.js', e);
          }
        });
      }
      function _checkAvailableEvent(event) {
        return _utils_js__WEBPACK_IMPORTED_MODULE_0__.contains(allEvents, event);
      }
      _public.on = function (eventString, handler, id) {
        // check whether available event or not
        if (_checkAvailableEvent(eventString)) {
          var event = _handlers[eventString] || {
            que: []
          };
          if (id) {
            event[id] = event[id] || {
              que: []
            };
            event[id].que.push(handler);
          } else {
            event.que.push(handler);
          }
          _handlers[eventString] = event;
        } else {
          _utils_js__WEBPACK_IMPORTED_MODULE_0__.logError('Wrong event name : ' + eventString + ' Valid event names :' + allEvents);
        }
      };
      _public.emit = function (event) {
        var args = slice.call(arguments, 1);
        _dispatch(event, args);
      };
      _public.off = function (eventString, handler, id) {
        var event = _handlers[eventString];
        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__.isEmpty(event) || _utils_js__WEBPACK_IMPORTED_MODULE_0__.isEmpty(event.que) && _utils_js__WEBPACK_IMPORTED_MODULE_0__.isEmpty(event[id])) {
          return;
        }
        if (id && (_utils_js__WEBPACK_IMPORTED_MODULE_0__.isEmpty(event[id]) || _utils_js__WEBPACK_IMPORTED_MODULE_0__.isEmpty(event[id].que))) {
          return;
        }
        if (id) {
          _utils_js__WEBPACK_IMPORTED_MODULE_0__._each(event[id].que, function (_handler) {
            var que = event[id].que;
            if (_handler === handler) {
              que.splice(que.indexOf(_handler), 1);
            }
          });
        } else {
          _utils_js__WEBPACK_IMPORTED_MODULE_0__._each(event.que, function (_handler) {
            var que = event.que;
            if (_handler === handler) {
              que.splice(que.indexOf(_handler), 1);
            }
          });
        }
        _handlers[eventString] = event;
      };
      _public.get = function () {
        return _handlers;
      };
      _public.addEvents = function (events) {
        allEvents = allEvents.concat(events);
      };
    
      /**
       * This method can return a copy of all the events fired
       * @return {Array} array of events fired
       */
      _public.getEvents = function () {
        var arrayCopy = [];
        _utils_js__WEBPACK_IMPORTED_MODULE_0__._each(eventsFired, function (value) {
          var newProp = Object.assign({}, value);
          arrayCopy.push(newProp);
        });
        return arrayCopy;
      };
      return _public;
    }();
    _utils_js__WEBPACK_IMPORTED_MODULE_0__._setEventEmitter(_public.emit.bind(_public));
    var on = _public.on,
      off = _public.off,
      get = _public.get,
      getEvents = _public.getEvents,
      emit = _public.emit,
      addEvents = _public.addEvents;
    
    function clearEvents() {
      eventsFired.length = 0;
    }
    
    /***/ }),
    
    /***/ "./src/fpd/enrichment.js":
    /*!*******************************!*\
      !*** ./src/fpd/enrichment.js ***!
      \*******************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "enrichFPD": function() { return /* binding */ enrichFPD; }
    /* harmony export */ });
    /* unused harmony export dep */
    /* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
    /* harmony import */ var _hook_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../hook.js */ "./src/hook.js");
    /* harmony import */ var _refererDetection_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../refererDetection.js */ "./src/refererDetection.js");
    /* harmony import */ var _rootDomain_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rootDomain.js */ "./src/fpd/rootDomain.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils.js */ "./src/utils.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils.js */ "./node_modules/dset/dist/index.mjs");
    /* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../config.js */ "./src/config.js");
    /* harmony import */ var _libraries_fpd_sua_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../libraries/fpd/sua.js */ "./libraries/fpd/sua.js");
    /* harmony import */ var _utils_promise_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/promise.js */ "./src/utils/promise.js");
    
    
    
    
    
    
    
    
    var dep = {
      getRefererInfo: _refererDetection_js__WEBPACK_IMPORTED_MODULE_0__.getRefererInfo,
      findRootDomain: _rootDomain_js__WEBPACK_IMPORTED_MODULE_1__.findRootDomain,
      getWindowTop: _utils_js__WEBPACK_IMPORTED_MODULE_2__.getWindowTop,
      getWindowSelf: _utils_js__WEBPACK_IMPORTED_MODULE_2__.getWindowSelf,
      getHighEntropySUA: _libraries_fpd_sua_js__WEBPACK_IMPORTED_MODULE_3__.getHighEntropySUA,
      getLowEntropySUA: _libraries_fpd_sua_js__WEBPACK_IMPORTED_MODULE_3__.getLowEntropySUA
    };
    
    /**
     * Enrich an ortb2 object with first party data.
     * @param {Promise[{}]} fpd: a promise to an ortb2 object.
     * @returns: {Promise[{}]}: a promise to an enriched ortb2 object.
     */
    var enrichFPD = (0,_hook_js__WEBPACK_IMPORTED_MODULE_4__.hook)('sync', function (fpd) {
      return _utils_promise_js__WEBPACK_IMPORTED_MODULE_5__.GreedyPromise.all([fpd, getSUA().catch(function () {
        return null;
      })]).then(function (_ref) {
        var _ref2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6__["default"])(_ref, 2),
          ortb2 = _ref2[0],
          sua = _ref2[1];
        Object.entries(ENRICHMENTS).forEach(function (_ref3) {
          var _ref4 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6__["default"])(_ref3, 2),
            section = _ref4[0],
            getEnrichments = _ref4[1];
          var data = getEnrichments();
          if (data && Object.keys(data).length > 0) {
            ortb2[section] = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.mergeDeep)({}, data, ortb2[section]);
          }
        });
        if (sua) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_7__.dset)(ortb2, 'device.sua', Object.assign({}, sua, ortb2.device.sua));
        }
        return ortb2;
      });
    });
    function winFallback(fn) {
      try {
        return fn(dep.getWindowTop());
      } catch (e) {
        return fn(dep.getWindowSelf());
      }
    }
    function getSUA() {
      var hints = _config_js__WEBPACK_IMPORTED_MODULE_8__.config.getConfig('firstPartyData.uaHints');
      return Array.isArray(hints) && hints.length === 0 ? _utils_promise_js__WEBPACK_IMPORTED_MODULE_5__.GreedyPromise.resolve(dep.getLowEntropySUA()) : dep.getHighEntropySUA(hints);
    }
    var ENRICHMENTS = {
      site: function site() {
        var _winFallback, _winFallback$content, _winFallback$content$;
        var ri = dep.getRefererInfo();
        var domain = (0,_refererDetection_js__WEBPACK_IMPORTED_MODULE_0__.parseDomain)(ri.page, {
          noLeadingWww: true
        });
        var keywords = (_winFallback = winFallback(function (win) {
          return win.document.querySelector('meta[name=\'keywords\']');
        })) === null || _winFallback === void 0 ? void 0 : (_winFallback$content = _winFallback.content) === null || _winFallback$content === void 0 ? void 0 : (_winFallback$content$ = _winFallback$content.replace) === null || _winFallback$content$ === void 0 ? void 0 : _winFallback$content$.call(_winFallback$content, /\s/g, '');
        return function (site) {
          return (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.getDefinedParams)(site, Object.keys(site));
        }({
          page: ri.page,
          ref: ri.ref,
          domain: domain,
          keywords: keywords,
          publisher: {
            domain: dep.findRootDomain(domain)
          }
        });
      },
      device: function device() {
        return winFallback(function (win) {
          var w = win.innerWidth || win.document.documentElement.clientWidth || win.document.body.clientWidth;
          var h = win.innerHeight || win.document.documentElement.clientHeight || win.document.body.clientHeight;
          return {
            w: w,
            h: h,
            dnt: (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.getDNT)() ? 1 : 0,
            ua: win.navigator.userAgent,
            language: win.navigator.language.split('-').shift()
          };
        });
      },
      regs: function regs() {
        var regs = {};
        if (winFallback(function (win) {
          return win.navigator.globalPrivacyControl;
        })) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_7__.dset)(regs, 'ext.gpc', 1);
        }
        var coppa = _config_js__WEBPACK_IMPORTED_MODULE_8__.config.getConfig('coppa');
        if (typeof coppa === 'boolean') {
          regs.coppa = coppa ? 1 : 0;
        }
        return regs;
      }
    };
    
    /***/ }),
    
    /***/ "./src/fpd/rootDomain.js":
    /*!*******************************!*\
      !*** ./src/fpd/rootDomain.js ***!
      \*******************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "findRootDomain": function() { return /* binding */ findRootDomain; }
    /* harmony export */ });
    /* unused harmony export coreStorage */
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.js */ "./src/utils.js");
    /* harmony import */ var _storageManager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../storageManager.js */ "./src/storageManager.js");
    
    
    var coreStorage = (0,_storageManager_js__WEBPACK_IMPORTED_MODULE_0__.getCoreStorageManager)();
    
    /**
     * Find the root domain by testing for the topmost domain that will allow setting cookies.
     */
    
    var findRootDomain = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.memoize)(function findRootDomain() {
      var fullDomain = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.location.host;
      if (!coreStorage.cookiesAreEnabled()) {
        return fullDomain;
      }
      var domainParts = fullDomain.split('.');
      if (domainParts.length === 2) {
        return fullDomain;
      }
      var rootDomain;
      var continueSearching;
      var startIndex = -2;
      var TEST_COOKIE_NAME = "_rdc".concat(Date.now());
      var TEST_COOKIE_VALUE = 'writeable';
      do {
        rootDomain = domainParts.slice(startIndex).join('.');
        var expirationDate = new Date((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.timestamp)() + 10 * 1000).toUTCString();
    
        // Write a test cookie
        coreStorage.setCookie(TEST_COOKIE_NAME, TEST_COOKIE_VALUE, expirationDate, 'Lax', rootDomain, undefined);
    
        // See if the write was successful
        var value = coreStorage.getCookie(TEST_COOKIE_NAME, undefined);
        if (value === TEST_COOKIE_VALUE) {
          continueSearching = false;
          // Delete our test cookie
          coreStorage.setCookie(TEST_COOKIE_NAME, '', 'Thu, 01 Jan 1970 00:00:01 GMT', undefined, rootDomain, undefined);
        } else {
          startIndex += -1;
          continueSearching = Math.abs(startIndex) <= domainParts.length;
        }
      } while (continueSearching);
      return rootDomain;
    });
    
    /***/ }),
    
    /***/ "./src/hook.js":
    /*!*********************!*\
      !*** ./src/hook.js ***!
      \*********************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "getHook": function() { return /* binding */ getHook; },
    /* harmony export */   "hook": function() { return /* binding */ hook; },
    /* harmony export */   "module": function() { return /* binding */ module; },
    /* harmony export */   "setupBeforeHookFnOnce": function() { return /* binding */ setupBeforeHookFnOnce; },
    /* harmony export */   "submodule": function() { return /* binding */ submodule; },
    /* harmony export */   "wrapHook": function() { return /* binding */ wrapHook; }
    /* harmony export */ });
    /* unused harmony export ready */
    /* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
    /* harmony import */ var fun_hooks_no_eval_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fun-hooks/no-eval/index.js */ "./node_modules/fun-hooks/no-eval/index.js");
    /* harmony import */ var fun_hooks_no_eval_index_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fun_hooks_no_eval_index_js__WEBPACK_IMPORTED_MODULE_0__);
    /* harmony import */ var _utils_promise_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/promise.js */ "./src/utils/promise.js");
    
    
    
    var hook = fun_hooks_no_eval_index_js__WEBPACK_IMPORTED_MODULE_0___default()({
      useProxy: false,
      ready: (fun_hooks_no_eval_index_js__WEBPACK_IMPORTED_MODULE_0___default().SYNC) | (fun_hooks_no_eval_index_js__WEBPACK_IMPORTED_MODULE_0___default().ASYNC) | (fun_hooks_no_eval_index_js__WEBPACK_IMPORTED_MODULE_0___default().QUEUE)
    });
    var readyCtl = (0,_utils_promise_js__WEBPACK_IMPORTED_MODULE_1__.defer)();
    hook.ready = function () {
      var ready = hook.ready;
      return function () {
        try {
          return ready.apply(hook, arguments);
        } finally {
          readyCtl.resolve();
        }
      };
    }();
    
    /**
     * A promise that resolves when hooks are ready.
     * @type {Promise}
     */
    var ready = readyCtl.promise;
    var getHook = hook.get;
    function setupBeforeHookFnOnce(baseFn, hookFn) {
      var priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 15;
      var result = baseFn.getHooks({
        hook: hookFn
      });
      if (result.length === 0) {
        baseFn.before(hookFn, priority);
      }
    }
    var submoduleInstallMap = {};
    function module(name, install) {
      var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref$postInstallAllow = _ref.postInstallAllowed,
        postInstallAllowed = _ref$postInstallAllow === void 0 ? false : _ref$postInstallAllow;
      hook('async', function (submodules) {
        submodules.forEach(function (args) {
          return install.apply(void 0, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__["default"])(args));
        });
        if (postInstallAllowed) submoduleInstallMap[name] = install;
      }, name)([]); // will be queued until hook.ready() called in pbjs.processQueue();
    }
    
    function submodule(name) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      var install = submoduleInstallMap[name];
      if (install) return install.apply(void 0, args);
      getHook(name).before(function (next, modules) {
        modules.push(args);
        next(modules);
      });
    }
    
    /**
     * Copy hook methods (.before, .after, etc) from a given hook to a given wrapper object.
     */
    function wrapHook(hook, wrapper) {
      Object.defineProperties(wrapper, Object.fromEntries(['before', 'after', 'getHooks', 'removeAll'].map(function (m) {
        return [m, {
          get: function get() {
            return hook[m];
          }
        }];
      })));
      return wrapper;
    }
    
    /***/ }),
    
    /***/ "./src/mediaTypes.js":
    /*!***************************!*\
      !*** ./src/mediaTypes.js ***!
      \***************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "ADPOD": function() { return /* binding */ ADPOD; },
    /* harmony export */   "BANNER": function() { return /* binding */ BANNER; },
    /* harmony export */   "NATIVE": function() { return /* binding */ NATIVE; },
    /* harmony export */   "VIDEO": function() { return /* binding */ VIDEO; }
    /* harmony export */ });
    /**
     * This file contains the valid Media Types in Prebid.
     *
     * All adapters are assumed to support banner ads. Other media types are specified by Adapters when they
     * register themselves with prebid-core.
     */
    
    /**
     * @typedef {('native'|'video'|'banner')} MediaType
     * @typedef {('adpod')} VideoContext
     */
    
    /** @type MediaType */
    var NATIVE = 'native';
    /** @type MediaType */
    var VIDEO = 'video';
    /** @type MediaType */
    var BANNER = 'banner';
    /** @type VideoContext */
    var ADPOD = 'adpod';
    
    /***/ }),
    
    /***/ "./src/native.js":
    /*!***********************!*\
      !*** ./src/native.js ***!
      \***********************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "NATIVE_TARGETING_KEYS": function() { return /* binding */ NATIVE_TARGETING_KEYS; },
    /* harmony export */   "convertOrtbRequestToProprietaryNative": function() { return /* binding */ convertOrtbRequestToProprietaryNative; },
    /* harmony export */   "decorateAdUnitsWithNativeParams": function() { return /* binding */ decorateAdUnitsWithNativeParams; },
    /* harmony export */   "fireNativeTrackers": function() { return /* binding */ fireNativeTrackers; },
    /* harmony export */   "getAllAssetsMessage": function() { return /* binding */ getAllAssetsMessage; },
    /* harmony export */   "getAssetMessage": function() { return /* binding */ getAssetMessage; },
    /* harmony export */   "getNativeTargeting": function() { return /* binding */ getNativeTargeting; },
    /* harmony export */   "nativeAdapters": function() { return /* binding */ nativeAdapters; },
    /* harmony export */   "nativeBidIsValid": function() { return /* binding */ nativeBidIsValid; },
    /* harmony export */   "toLegacyResponse": function() { return /* binding */ toLegacyResponse; }
    /* harmony export */ });
    /* unused harmony exports IMAGE, processNativeAdUnitParams, isOpenRTBBidRequestValid, nativeAdUnit, nativeBidder, hasNonNativeBidder, isNativeOpenRTBBidValid, fireImpressionTrackers, fireClickTrackers, toOrtbNativeRequest, fromOrtbNativeRequest, legacyPropertiesToOrtbNative, toOrtbNativeResponse */
    /* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
    /* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
    /* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "./node_modules/dlv/index.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
    /* harmony import */ var _polyfill_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./polyfill.js */ "./src/polyfill.js");
    /* harmony import */ var _auctionManager_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./auctionManager.js */ "./src/auctionManager.js");
    /* harmony import */ var _constants_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.json */ "./src/constants.json");
    /* harmony import */ var _mediaTypes_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./mediaTypes.js */ "./src/mediaTypes.js");
    
    
    
    function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
    function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
    function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
    
    
    
    
    
    var nativeAdapters = [];
    var NATIVE_TARGETING_KEYS = Object.keys(_constants_json__WEBPACK_IMPORTED_MODULE_1__.NATIVE_KEYS).map(function (key) {
      return _constants_json__WEBPACK_IMPORTED_MODULE_1__.NATIVE_KEYS[key];
    });
    var IMAGE = {
      ortb: {
        ver: '1.2',
        assets: [{
          required: 1,
          id: 1,
          img: {
            type: 3,
            wmin: 100,
            hmin: 100
          }
        }, {
          required: 1,
          id: 2,
          title: {
            len: 140
          }
        }, {
          required: 1,
          id: 3,
          data: {
            type: 1
          }
        }, {
          required: 0,
          id: 4,
          data: {
            type: 2
          }
        }, {
          required: 0,
          id: 5,
          img: {
            type: 1,
            wmin: 20,
            hmin: 20
          }
        }]
      },
      image: {
        required: true
      },
      title: {
        required: true
      },
      sponsoredBy: {
        required: true
      },
      clickUrl: {
        required: true
      },
      body: {
        required: false
      },
      icon: {
        required: false
      }
    };
    var SUPPORTED_TYPES = {
      image: IMAGE
    };
    var NATIVE_ASSET_TYPES = _constants_json__WEBPACK_IMPORTED_MODULE_1__.NATIVE_ASSET_TYPES,
      NATIVE_IMAGE_TYPES = _constants_json__WEBPACK_IMPORTED_MODULE_1__.NATIVE_IMAGE_TYPES,
      PREBID_NATIVE_DATA_KEYS_TO_ORTB = _constants_json__WEBPACK_IMPORTED_MODULE_1__.PREBID_NATIVE_DATA_KEYS_TO_ORTB,
      NATIVE_KEYS_THAT_ARE_NOT_ASSETS = _constants_json__WEBPACK_IMPORTED_MODULE_1__.NATIVE_KEYS_THAT_ARE_NOT_ASSETS,
      NATIVE_KEYS = _constants_json__WEBPACK_IMPORTED_MODULE_1__.NATIVE_KEYS;
    
    // inverse native maps useful for converting to legacy
    var PREBID_NATIVE_DATA_KEYS_TO_ORTB_INVERSE = inverse(PREBID_NATIVE_DATA_KEYS_TO_ORTB);
    var NATIVE_ASSET_TYPES_INVERSE = inverse(NATIVE_ASSET_TYPES);
    var TRACKER_METHODS = {
      img: 1,
      js: 2,
      1: 'img',
      2: 'js'
    };
    var TRACKER_EVENTS = {
      impression: 1,
      'viewable-mrc50': 2,
      'viewable-mrc100': 3,
      'viewable-video50': 4
    };
    
    /**
     * Recieves nativeParams from an adUnit. If the params were not of type 'type',
     * passes them on directly. If they were of type 'type', translate
     * them into the predefined specific asset requests for that type of native ad.
     */
    function processNativeAdUnitParams(params) {
      if (params && params.type && typeIsSupported(params.type)) {
        params = SUPPORTED_TYPES[params.type];
      }
      if (params && params.ortb && !isOpenRTBBidRequestValid(params.ortb)) {
        return;
      }
      return params;
    }
    function decorateAdUnitsWithNativeParams(adUnits) {
      adUnits.forEach(function (adUnit) {
        var nativeParams = adUnit.nativeParams || (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"])(adUnit, 'mediaTypes.native');
        if (nativeParams) {
          adUnit.nativeParams = processNativeAdUnitParams(nativeParams);
        }
        if (adUnit.nativeParams) {
          adUnit.nativeOrtbRequest = adUnit.nativeParams.ortb || toOrtbNativeRequest(adUnit.nativeParams);
        }
      });
    }
    function isOpenRTBBidRequestValid(ortb) {
      var assets = ortb.assets;
      if (!Array.isArray(assets) || assets.length === 0) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.logError)("assets in mediaTypes.native.ortb is not an array, or it's empty. Assets: ", assets);
        return false;
      }
    
      // validate that ids exist, that they are unique and that they are numbers
      var ids = assets.map(function (asset) {
        return asset.id;
      });
      if (assets.length !== new Set(ids).size || ids.some(function (id) {
        return id !== parseInt(id, 10);
      })) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.logError)("each asset object must have 'id' property, it must be unique and it must be an integer");
        return false;
      }
      if (ortb.hasOwnProperty('eventtrackers') && !Array.isArray(ortb.eventtrackers)) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.logError)('ortb.eventtrackers is not an array. Eventtrackers: ', ortb.eventtrackers);
        return false;
      }
      return assets.every(function (asset) {
        return isOpenRTBAssetValid(asset);
      });
    }
    function isOpenRTBAssetValid(asset) {
      if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isPlainObject)(asset)) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.logError)("asset must be an object. Provided asset: ", asset);
        return false;
      }
      if (asset.img) {
        if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isNumber)(asset.img.w) && !(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isNumber)(asset.img.wmin)) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.logError)("for img asset there must be 'w' or 'wmin' property");
          return false;
        }
        if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isNumber)(asset.img.h) && !(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isNumber)(asset.img.hmin)) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.logError)("for img asset there must be 'h' or 'hmin' property");
          return false;
        }
      } else if (asset.title) {
        if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isNumber)(asset.title.len)) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.logError)("for title asset there must be 'len' property defined");
          return false;
        }
      } else if (asset.data) {
        if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isNumber)(asset.data.type)) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.logError)("for data asset 'type' property must be a number");
          return false;
        }
      } else if (asset.video) {
        if (!Array.isArray(asset.video.mimes) || !Array.isArray(asset.video.protocols) || !(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isNumber)(asset.video.minduration) || !(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isNumber)(asset.video.maxduration)) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.logError)('video asset is not properly configured');
          return false;
        }
      }
      return true;
    }
    
    /**
     * Check if the native type specified in the adUnit is supported by Prebid.
     */
    function typeIsSupported(type) {
      if (!(type && (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_4__.includes)(Object.keys(SUPPORTED_TYPES), type))) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.logError)("".concat(type, " nativeParam is not supported"));
        return false;
      }
      return true;
    }
    
    /**
     * Helper functions for working with native-enabled adUnits
     * TODO: abstract this and the video helper functions into general
     * adunit validation helper functions
     */
    var nativeAdUnit = function nativeAdUnit(adUnit) {
      var mediaType = adUnit.mediaType === 'native';
      var mediaTypes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"])(adUnit, 'mediaTypes.native');
      return mediaType || mediaTypes;
    };
    var nativeBidder = function nativeBidder(bid) {
      return (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_4__.includes)(nativeAdapters, bid.bidder);
    };
    var hasNonNativeBidder = function hasNonNativeBidder(adUnit) {
      return adUnit.bids.filter(function (bid) {
        return !nativeBidder(bid);
      }).length;
    };
    
    /**
     * Validate that the native assets on this bid contain all assets that were
     * marked as required in the adUnit configuration.
     * @param {Bid} bid Native bid to validate
     * @param {BidRequest[]} bidRequests All bid requests for an auction
     * @return {Boolean} If object is valid
     */
    function nativeBidIsValid(bid) {
      var _bid$native;
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$index = _ref.index,
        index = _ref$index === void 0 ? _auctionManager_js__WEBPACK_IMPORTED_MODULE_5__.auctionManager.index : _ref$index;
      var adUnit = index.getAdUnit(bid);
      if (!adUnit) {
        return false;
      }
      var ortbRequest = adUnit.nativeOrtbRequest;
      var ortbResponse = ((_bid$native = bid.native) === null || _bid$native === void 0 ? void 0 : _bid$native.ortb) || toOrtbNativeResponse(bid.native, ortbRequest);
      return isNativeOpenRTBBidValid(ortbResponse, ortbRequest);
    }
    function isNativeOpenRTBBidValid(bidORTB, bidRequestORTB) {
      if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"])(bidORTB, 'link.url')) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.logError)("native response doesn't have 'link' property. Ortb response: ", bidORTB);
        return false;
      }
      var requiredAssetIds = bidRequestORTB.assets.filter(function (asset) {
        return asset.required === 1;
      }).map(function (a) {
        return a.id;
      });
      var returnedAssetIds = bidORTB.assets.map(function (asset) {
        return asset.id;
      });
      var match = requiredAssetIds.every(function (assetId) {
        return (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_4__.includes)(returnedAssetIds, assetId);
      });
      if (!match) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.logError)("didn't receive a bid with all required assets. Required ids: ".concat(requiredAssetIds, ", but received ids in response: ").concat(returnedAssetIds));
      }
      return match;
    }
    
    /*
     * Native responses may have associated impression or click trackers.
     * This retrieves the appropriate tracker urls for the given ad object and
     * fires them. As a native creatives may be in a cross-origin frame, it may be
     * necessary to invoke this function via postMessage. secureCreatives is
     * configured to fire this function when it receives a `message` of 'Prebid Native'
     * and an `adId` with the value of the `bid.adId`. When a message is posted with
     * these parameters, impression trackers are fired. To fire click trackers, the
     * message should contain an `action` set to 'click'.
     *
     * // Native creative template example usage
     * <a href="%%CLICK_URL_UNESC%%%%PATTERN:hb_native_linkurl%%"
     *    target="_blank"
     *    onclick="fireTrackers('click')">
     *    %%PATTERN:hb_native_title%%
     * </a>
     *
     * <script>
     *   function fireTrackers(action) {
     *     var message = {message: 'Prebid Native', adId: '%%PATTERN:hb_adid%%'};
     *     if (action === 'click') {message.action = 'click';} // fires click trackers
     *     window.parent.postMessage(JSON.stringify(message), '*');
     *   }
     *   fireTrackers(); // fires impressions when creative is loaded
     * </script>
     */
    function fireNativeTrackers(message, bidResponse) {
      var nativeResponse = bidResponse.native.ortb || legacyPropertiesToOrtbNative(bidResponse.native);
      if (message.action === 'click') {
        fireClickTrackers(nativeResponse, message === null || message === void 0 ? void 0 : message.assetId);
      } else {
        fireImpressionTrackers(nativeResponse);
      }
      return message.action;
    }
    function fireImpressionTrackers(nativeResponse) {
      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref2$runMarkup = _ref2.runMarkup,
        runMarkup = _ref2$runMarkup === void 0 ? function (mkup) {
          return (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.insertHtmlIntoIframe)(mkup);
        } : _ref2$runMarkup,
        _ref2$fetchURL = _ref2.fetchURL,
        fetchURL = _ref2$fetchURL === void 0 ? _utils_js__WEBPACK_IMPORTED_MODULE_3__.triggerPixel : _ref2$fetchURL;
      var impTrackers = (nativeResponse.eventtrackers || []).filter(function (tracker) {
        return tracker.event === TRACKER_EVENTS.impression;
      });
      var _impTrackers$reduce = impTrackers.reduce(function (tally, tracker) {
          if (TRACKER_METHODS.hasOwnProperty(tracker.method)) {
            tally[TRACKER_METHODS[tracker.method]].push(tracker.url);
          }
          return tally;
        }, {
          img: [],
          js: []
        }),
        img = _impTrackers$reduce.img,
        js = _impTrackers$reduce.js;
      if (nativeResponse.imptrackers) {
        img = img.concat(nativeResponse.imptrackers);
      }
      img.forEach(function (url) {
        return fetchURL(url);
      });
      js = js.map(function (url) {
        return "<script async src=\"".concat(url, "\"></script>");
      });
      if (nativeResponse.jstracker) {
        // jstracker is already HTML markup
        js = js.concat([nativeResponse.jstracker]);
      }
      if (js.length) {
        runMarkup(js.join('\n'));
      }
    }
    function fireClickTrackers(nativeResponse) {
      var assetId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref3$fetchURL = _ref3.fetchURL,
        fetchURL = _ref3$fetchURL === void 0 ? _utils_js__WEBPACK_IMPORTED_MODULE_3__.triggerPixel : _ref3$fetchURL;
      // legacy click tracker
      if (!assetId) {
        var _nativeResponse$link;
        (((_nativeResponse$link = nativeResponse.link) === null || _nativeResponse$link === void 0 ? void 0 : _nativeResponse$link.clicktrackers) || []).forEach(function (url) {
          return fetchURL(url);
        });
      } else {
        var _nativeResponse$link2;
        // ortb click tracker. This will try to call the clicktracker associated with the asset;
        // will fallback to the link if none is found.
        var assetIdLinkMap = (nativeResponse.assets || []).filter(function (a) {
          return a.link;
        }).reduce(function (map, asset) {
          map[asset.id] = asset.link;
          return map;
        }, {});
        var masterClickTrackers = ((_nativeResponse$link2 = nativeResponse.link) === null || _nativeResponse$link2 === void 0 ? void 0 : _nativeResponse$link2.clicktrackers) || [];
        var assetLink = assetIdLinkMap[assetId];
        var clickTrackers = masterClickTrackers;
        if (assetLink) {
          clickTrackers = assetLink.clicktrackers || [];
        }
        clickTrackers.forEach(function (url) {
          return fetchURL(url);
        });
      }
    }
    
    /**
     * Gets native targeting key-value pairs
     * @param {Object} bid
     * @return {Object} targeting
     */
    function getNativeTargeting(bid) {
      var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref4$index = _ref4.index,
        index = _ref4$index === void 0 ? _auctionManager_js__WEBPACK_IMPORTED_MODULE_5__.auctionManager.index : _ref4$index;
      var keyValues = {};
      var adUnit = index.getAdUnit(bid);
      if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"])(adUnit, 'nativeParams.rendererUrl')) {
        bid['native']['rendererUrl'] = getAssetValue(adUnit.nativeParams['rendererUrl']);
      } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"])(adUnit, 'nativeParams.adTemplate')) {
        bid['native']['adTemplate'] = getAssetValue(adUnit.nativeParams['adTemplate']);
      }
      var globalSendTargetingKeys = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"])(adUnit, "nativeParams.sendTargetingKeys") !== false;
      var nativeKeys = getNativeKeys(adUnit);
      var flatBidNativeKeys = _objectSpread(_objectSpread({}, bid.native), bid.native.ext);
      delete flatBidNativeKeys.ext;
      Object.keys(flatBidNativeKeys).forEach(function (asset) {
        var key = nativeKeys[asset];
        var value = getAssetValue(bid.native[asset]) || getAssetValue((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"])(bid, "native.ext.".concat(asset)));
        if (asset === 'adTemplate' || !key || !value) {
          return;
        }
        var sendPlaceholder = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"])(adUnit, "nativeParams.".concat(asset, ".sendId"));
        if (typeof sendPlaceholder !== 'boolean') {
          sendPlaceholder = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"])(adUnit, "nativeParams.ext.".concat(asset, ".sendId"));
        }
        if (sendPlaceholder) {
          var placeholder = "".concat(key, ":").concat(bid.adId);
          value = placeholder;
        }
        var assetSendTargetingKeys = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"])(adUnit, "nativeParams.".concat(asset, ".sendTargetingKeys"));
        if (typeof assetSendTargetingKeys !== 'boolean') {
          assetSendTargetingKeys = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"])(adUnit, "nativeParams.ext.".concat(asset, ".sendTargetingKeys"));
        }
        var sendTargeting = typeof assetSendTargetingKeys === 'boolean' ? assetSendTargetingKeys : globalSendTargetingKeys;
        if (sendTargeting) {
          keyValues[key] = value;
        }
      });
      return keyValues;
    }
    function assetsMessage(data, adObject, keys) {
      var message = {
        message: 'assetResponse',
        adId: data.adId
      };
      var nativeResp = adObject.native;
      if (adObject.native.ortb) {
        message.ortb = adObject.native.ortb;
      }
      message.assets = [];
      (keys == null ? Object.keys(nativeResp) : keys).forEach(function (key) {
        if (key === 'adTemplate' && nativeResp[key]) {
          message.adTemplate = getAssetValue(nativeResp[key]);
        } else if (key === 'rendererUrl' && nativeResp[key]) {
          message.rendererUrl = getAssetValue(nativeResp[key]);
        } else if (key === 'ext') {
          Object.keys(nativeResp[key]).forEach(function (extKey) {
            if (nativeResp[key][extKey]) {
              var value = getAssetValue(nativeResp[key][extKey]);
              message.assets.push({
                key: extKey,
                value: value
              });
            }
          });
        } else if (nativeResp[key] && _constants_json__WEBPACK_IMPORTED_MODULE_1__.NATIVE_KEYS.hasOwnProperty(key)) {
          var value = getAssetValue(nativeResp[key]);
          message.assets.push({
            key: key,
            value: value
          });
        }
      });
      return message;
    }
    
    /**
     * Constructs a message object containing asset values for each of the
     * requested data keys.
     */
    function getAssetMessage(data, adObject) {
      var keys = data.assets.map(function (k) {
        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.getKeyByValue)(_constants_json__WEBPACK_IMPORTED_MODULE_1__.NATIVE_KEYS, k);
      });
      return assetsMessage(data, adObject, keys);
    }
    function getAllAssetsMessage(data, adObject) {
      return assetsMessage(data, adObject, null);
    }
    
    /**
     * Native assets can be a string or an object with a url prop. Returns the value
     * appropriate for sending in adserver targeting or placeholder replacement.
     */
    function getAssetValue(value) {
      return (value === null || value === void 0 ? void 0 : value.url) || value;
    }
    function getNativeKeys(adUnit) {
      var extraNativeKeys = {};
      if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"])(adUnit, 'nativeParams.ext')) {
        Object.keys(adUnit.nativeParams.ext).forEach(function (extKey) {
          extraNativeKeys[extKey] = "hb_native_".concat(extKey);
        });
      }
      return _objectSpread(_objectSpread({}, _constants_json__WEBPACK_IMPORTED_MODULE_1__.NATIVE_KEYS), extraNativeKeys);
    }
    
    /**
     * converts Prebid legacy native assets request to OpenRTB format
     * @param {object} legacyNativeAssets an object that describes a native bid request in Prebid proprietary format
     * @returns an OpenRTB format of the same bid request
     */
    function toOrtbNativeRequest(legacyNativeAssets) {
      if (!legacyNativeAssets && !(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isPlainObject)(legacyNativeAssets)) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.logError)('Native assets object is empty or not an object: ', legacyNativeAssets);
        return;
      }
      var ortb = {
        ver: '1.2',
        assets: []
      };
      for (var key in legacyNativeAssets) {
        // skip conversion for non-asset keys
        if (NATIVE_KEYS_THAT_ARE_NOT_ASSETS.includes(key)) continue;
        if (!NATIVE_KEYS.hasOwnProperty(key)) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.logError)("Unrecognized native asset code: ".concat(key, ". Asset will be ignored."));
          continue;
        }
        var asset = legacyNativeAssets[key];
        var required = 0;
        if (asset.required && (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isBoolean)(asset.required)) {
          required = Number(asset.required);
        }
        var ortbAsset = {
          id: ortb.assets.length,
          required: required
        };
        // data cases
        if (key in PREBID_NATIVE_DATA_KEYS_TO_ORTB) {
          ortbAsset.data = {
            type: NATIVE_ASSET_TYPES[PREBID_NATIVE_DATA_KEYS_TO_ORTB[key]]
          };
          if (asset.len) {
            ortbAsset.data.len = asset.len;
          }
          // icon or image case
        } else if (key === 'icon' || key === 'image') {
          ortbAsset.img = {
            type: key === 'icon' ? NATIVE_IMAGE_TYPES.ICON : NATIVE_IMAGE_TYPES.MAIN
          };
          // if min_width and min_height are defined in aspect_ratio, they are preferred
          if (asset.aspect_ratios) {
            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isArray)(asset.aspect_ratios)) {
              (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.logError)("image.aspect_ratios was passed, but it's not a an array:", asset.aspect_ratios);
            } else if (!asset.aspect_ratios.length) {
              (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.logError)("image.aspect_ratios was passed, but it's empty:", asset.aspect_ratios);
            } else {
              var _asset$aspect_ratios$ = asset.aspect_ratios[0],
                minWidth = _asset$aspect_ratios$.min_width,
                minHeight = _asset$aspect_ratios$.min_height;
              if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isInteger)(minWidth) || !(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isInteger)(minHeight)) {
                (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.logError)('image.aspect_ratios min_width or min_height are invalid: ', minWidth, minHeight);
              } else {
                ortbAsset.img.wmin = minWidth;
                ortbAsset.img.hmin = minHeight;
              }
              var aspectRatios = asset.aspect_ratios.filter(function (ar) {
                return ar.ratio_width && ar.ratio_height;
              }).map(function (ratio) {
                return "".concat(ratio.ratio_width, ":").concat(ratio.ratio_height);
              });
              if (aspectRatios.length > 0) {
                ortbAsset.img.ext = {
                  aspectratios: aspectRatios
                };
              }
            }
          }
    
          // if asset.sizes exist, by OpenRTB spec we should remove wmin and hmin
          if (asset.sizes) {
            if (asset.sizes.length !== 2 || !(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isInteger)(asset.sizes[0]) || !(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isInteger)(asset.sizes[1])) {
              (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.logError)('image.sizes was passed, but its value is not an array of integers:', asset.sizes);
            } else {
              ortbAsset.img.w = asset.sizes[0];
              ortbAsset.img.h = asset.sizes[1];
              delete ortbAsset.img.hmin;
              delete ortbAsset.img.wmin;
            }
          }
          // title case
        } else if (key === 'title') {
          ortbAsset.title = {
            // in openRTB, len is required for titles, while in legacy prebid was not.
            // for this reason, if len is missing in legacy prebid, we're adding a default value of 140.
            len: asset.len || 140
          };
          // all extensions to the native bid request are passed as is
        } else if (key === 'ext') {
          ortbAsset.ext = asset;
          // in `ext` case, required field is not needed
          delete ortbAsset.required;
        }
        ortb.assets.push(ortbAsset);
      }
      return ortb;
    }
    
    /**
     * This function converts an OpenRTB native request object to Prebid proprietary
     * format. The purpose of this function is to help adapters to handle the
     * transition phase where publishers may be using OpenRTB objects but the
     *  bidder does not yet support it.
     * @param {object} openRTBRequest an OpenRTB v1.2 request object
     * @returns a Prebid legacy native format request
     */
    function fromOrtbNativeRequest(openRTBRequest) {
      if (!isOpenRTBBidRequestValid(openRTBRequest)) {
        return;
      }
      var oldNativeObject = {};
      var _iterator = _createForOfIteratorHelper(openRTBRequest.assets),
        _step;
      try {
        var _loop = function _loop() {
          var asset = _step.value;
          if (asset.title) {
            var title = {
              required: asset.required ? Boolean(asset.required) : false,
              len: asset.title.len
            };
            oldNativeObject.title = title;
          } else if (asset.img) {
            var image = {
              required: asset.required ? Boolean(asset.required) : false
            };
            if (asset.img.w && asset.img.h) {
              image.sizes = [asset.img.w, asset.img.h];
            } else if (asset.img.wmin && asset.img.hmin) {
              image.aspect_ratios = {
                min_width: asset.img.wmin,
                min_height: asset.img.hmin,
                ratio_width: asset.img.wmin,
                ratio_height: asset.img.hmin
              };
            }
            if (asset.img.type === NATIVE_IMAGE_TYPES.MAIN) {
              oldNativeObject.image = image;
            } else {
              oldNativeObject.icon = image;
            }
          } else if (asset.data) {
            var assetType = Object.keys(NATIVE_ASSET_TYPES).find(function (k) {
              return NATIVE_ASSET_TYPES[k] === asset.data.type;
            });
            var prebidAssetName = Object.keys(PREBID_NATIVE_DATA_KEYS_TO_ORTB).find(function (k) {
              return PREBID_NATIVE_DATA_KEYS_TO_ORTB[k] === assetType;
            });
            oldNativeObject[prebidAssetName] = {
              required: asset.required ? Boolean(asset.required) : false
            };
            if (asset.data.len) {
              oldNativeObject[prebidAssetName].len = asset.data.len;
            }
          }
          // video was not supported by old prebid assets
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return oldNativeObject;
    }
    
    /**
     * Converts an OpenRTB request to a proprietary Prebid.js format.
     * The proprietary Prebid format has many limitations and will be dropped in
     * the future; adapters are encouraged to stop using it in favour of OpenRTB format.
     * IMPLEMENTATION DETAILS: This function returns the same exact object if no
     * conversion is needed. If a conversion is needed (meaning, at least one
     * bidRequest contains a native.ortb definition), it will return a copy.
     *
     * @param {BidRequest[]} bidRequests an array of valid bid requests
     * @returns an array of valid bid requests where the openRTB bids are converted to proprietary format.
     */
    function convertOrtbRequestToProprietaryNative(bidRequests) {
      if (true) {
        if (!bidRequests || !(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isArray)(bidRequests)) return bidRequests;
        // check if a conversion is needed
        if (!bidRequests.some(function (bidRequest) {
          var _NATIVE;
          return (_NATIVE = ((bidRequest === null || bidRequest === void 0 ? void 0 : bidRequest.mediaTypes) || {})[_mediaTypes_js__WEBPACK_IMPORTED_MODULE_6__.NATIVE]) === null || _NATIVE === void 0 ? void 0 : _NATIVE.ortb;
        })) {
          return bidRequests;
        }
        var bidRequestsCopy = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.deepClone)(bidRequests);
        // convert Native ORTB definition to old-style prebid native definition
        var _iterator2 = _createForOfIteratorHelper(bidRequestsCopy),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var bidRequest = _step2.value;
            if (bidRequest.mediaTypes && bidRequest.mediaTypes[_mediaTypes_js__WEBPACK_IMPORTED_MODULE_6__.NATIVE] && bidRequest.mediaTypes[_mediaTypes_js__WEBPACK_IMPORTED_MODULE_6__.NATIVE].ortb) {
              bidRequest.mediaTypes[_mediaTypes_js__WEBPACK_IMPORTED_MODULE_6__.NATIVE] = Object.assign((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.pick)(bidRequest.mediaTypes[_mediaTypes_js__WEBPACK_IMPORTED_MODULE_6__.NATIVE], NATIVE_KEYS_THAT_ARE_NOT_ASSETS), fromOrtbNativeRequest(bidRequest.mediaTypes[_mediaTypes_js__WEBPACK_IMPORTED_MODULE_6__.NATIVE].ortb));
              bidRequest.nativeParams = processNativeAdUnitParams(bidRequest.mediaTypes[_mediaTypes_js__WEBPACK_IMPORTED_MODULE_6__.NATIVE]);
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        return bidRequestsCopy;
      }
      return bidRequests;
    }
    
    /**
     * convert PBJS proprietary native properties that are *not* assets to the ORTB native format.
     *
     * @param legacyNative `bidResponse.native` object as returned by adapters
     */
    function legacyPropertiesToOrtbNative(legacyNative) {
      var response = {
        link: {},
        eventtrackers: []
      };
      Object.entries(legacyNative).forEach(function (_ref5) {
        var _ref6 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_7__["default"])(_ref5, 2),
          key = _ref6[0],
          value = _ref6[1];
        switch (key) {
          case 'clickUrl':
            response.link.url = value;
            break;
          case 'clickTrackers':
            response.link.clicktrackers = Array.isArray(value) ? value : [value];
            break;
          case 'impressionTrackers':
            (Array.isArray(value) ? value : [value]).forEach(function (url) {
              response.eventtrackers.push({
                event: TRACKER_EVENTS.impression,
                method: TRACKER_METHODS.img,
                url: url
              });
            });
            break;
          case 'javascriptTrackers':
            // jstracker is deprecated, but we need to use it here since 'javascriptTrackers' is markup, not an url
            // TODO: at the time of writing this, core expected javascriptTrackers to be a string (despite the name),
            // but many adapters are passing an array. It's possible that some of them are, in fact, passing URLs and not markup
            // in general, native trackers seem to be neglected and/or broken
            response.jstracker = Array.isArray(value) ? value.join('') : value;
            break;
        }
      });
      return response;
    }
    function toOrtbNativeResponse(legacyResponse, ortbRequest) {
      var ortbResponse = _objectSpread(_objectSpread({}, legacyPropertiesToOrtbNative(legacyResponse)), {}, {
        assets: []
      });
      function useRequestAsset(predicate, fn) {
        var asset = ortbRequest.assets.find(predicate);
        if (asset != null) {
          asset = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.deepClone)(asset);
          fn(asset);
          ortbResponse.assets.push(asset);
        }
      }
      Object.keys(legacyResponse).filter(function (key) {
        return !!legacyResponse[key];
      }).forEach(function (key) {
        var value = legacyResponse[key];
        switch (key) {
          // process titles
          case 'title':
            useRequestAsset(function (asset) {
              return asset.title != null;
            }, function (titleAsset) {
              titleAsset.title = {
                text: value
              };
            });
            break;
          case 'image':
          case 'icon':
            var imageType = key === 'image' ? NATIVE_IMAGE_TYPES.MAIN : NATIVE_IMAGE_TYPES.ICON;
            useRequestAsset(function (asset) {
              return asset.img != null && asset.img.type === imageType;
            }, function (imageAsset) {
              imageAsset.img = {
                url: value
              };
            });
            break;
          default:
            if (key in PREBID_NATIVE_DATA_KEYS_TO_ORTB) {
              useRequestAsset(function (asset) {
                return asset.data != null && asset.data.type === NATIVE_ASSET_TYPES[PREBID_NATIVE_DATA_KEYS_TO_ORTB[key]];
              }, function (dataAsset) {
                dataAsset.data = {
                  value: value
                };
              });
            }
            break;
        }
      });
      return ortbResponse;
    }
    
    /**
     * Generates a legacy response from an ortb response. Useful during the transition period.
     * @param {*} ortbResponse a standard ortb response object
     * @param {*} ortbRequest the ortb request, useful to match ids.
     * @returns an object containing the response in legacy native format: { title: "this is a title", image: ... }
     */
    function toLegacyResponse(ortbResponse, ortbRequest) {
      var legacyResponse = {};
      var requestAssets = (ortbRequest === null || ortbRequest === void 0 ? void 0 : ortbRequest.assets) || [];
      legacyResponse.clickUrl = ortbResponse.link.url;
      legacyResponse.privacyLink = ortbResponse.privacy;
      var _iterator3 = _createForOfIteratorHelper((ortbResponse === null || ortbResponse === void 0 ? void 0 : ortbResponse.assets) || []),
        _step3;
      try {
        var _loop2 = function _loop2() {
          var asset = _step3.value;
          var requestAsset = requestAssets.find(function (reqAsset) {
            return asset.id === reqAsset.id;
          });
          if (asset.title) {
            legacyResponse.title = asset.title.text;
          } else if (asset.img) {
            legacyResponse[requestAsset.img.type === NATIVE_IMAGE_TYPES.MAIN ? 'image' : 'icon'] = asset.img.url;
          } else if (asset.data) {
            legacyResponse[PREBID_NATIVE_DATA_KEYS_TO_ORTB_INVERSE[NATIVE_ASSET_TYPES_INVERSE[requestAsset.data.type]]] = asset.data.value;
          }
        };
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          _loop2();
        }
    
        // Handle trackers
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      legacyResponse.impressionTrackers = [];
      var jsTrackers = [];
      if (ortbRequest !== null && ortbRequest !== void 0 && ortbRequest.imptrackers) {
        var _legacyResponse$impre;
        (_legacyResponse$impre = legacyResponse.impressionTrackers).push.apply(_legacyResponse$impre, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_8__["default"])(ortbRequest.imptrackers));
      }
      var _iterator4 = _createForOfIteratorHelper((ortbResponse === null || ortbResponse === void 0 ? void 0 : ortbResponse.eventtrackers) || []),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var eventTracker = _step4.value;
          if (eventTracker.event === TRACKER_EVENTS.impression && eventTracker.method === TRACKER_METHODS.img) {
            legacyResponse.impressionTrackers.push(eventTracker.url);
          }
          if (eventTracker.event === TRACKER_EVENTS.impression && eventTracker.method === TRACKER_METHODS.js) {
            jsTrackers.push(eventTracker.url);
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      jsTrackers = jsTrackers.map(function (url) {
        return "<script async src=\"".concat(url, "\"></script>");
      });
      if (ortbResponse !== null && ortbResponse !== void 0 && ortbResponse.jstracker) {
        jsTrackers.push(ortbResponse.jstracker);
      }
      if (jsTrackers.length) {
        legacyResponse.javascriptTrackers = jsTrackers.join('\n');
      }
      return legacyResponse;
    }
    
    /**
     * Inverts key-values of an object.
     */
    function inverse(obj) {
      var retobj = {};
      for (var key in obj) {
        retobj[obj[key]] = key;
      }
      return retobj;
    }
    
    /***/ }),
    
    /***/ "./src/polyfill.js":
    /*!*************************!*\
      !*** ./src/polyfill.js ***!
      \*************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "arrayFrom": function() { return /* binding */ arrayFrom; },
    /* harmony export */   "find": function() { return /* binding */ find; },
    /* harmony export */   "includes": function() { return /* binding */ includes; }
    /* harmony export */ });
    /* unused harmony export findIndex */
    // These stubs are here to help transition away from core-js polyfills for browsers we are no longer supporting.
    // You should not need these for new code; use stock JS instead!
    
    function includes(target, elem, start) {
      return target && target.includes(elem, start) || false;
    }
    function arrayFrom() {
      return Array.from.apply(Array, arguments);
    }
    function find(arr, pred, thisArg) {
      return arr && arr.find(pred, thisArg);
    }
    function findIndex(arr, pred, thisArg) {
      return arr && arr.findIndex(pred, thisArg);
    }
    
    /***/ }),
    
    /***/ "./src/prebid.js":
    /*!***********************!*\
      !*** ./src/prebid.js ***!
      \***********************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "checkAdUnitSetup": function() { return /* binding */ checkAdUnitSetup; }
    /* harmony export */ });
    /* unused harmony exports adUnitSetupChecks, startAuction, executeCallbacks */
    /* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
    /* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
    /* harmony import */ var _prebidGlobal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./prebidGlobal.js */ "./src/prebidGlobal.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils.js */ "./node_modules/dlv/index.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./utils.js */ "./node_modules/dset/dist/index.mjs");
    /* harmony import */ var _secureCreatives_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./secureCreatives.js */ "./src/secureCreatives.js");
    /* harmony import */ var _userSync_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./userSync.js */ "./src/userSync.js");
    /* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./config.js */ "./src/config.js");
    /* harmony import */ var _auctionManager_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./auctionManager.js */ "./src/auctionManager.js");
    /* harmony import */ var _targeting_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./targeting.js */ "./src/targeting.js");
    /* harmony import */ var _hook_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./hook.js */ "./src/hook.js");
    /* harmony import */ var _debugging_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./debugging.js */ "./src/debugging.js");
    /* harmony import */ var _polyfill_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./polyfill.js */ "./src/polyfill.js");
    /* harmony import */ var _adUnits_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./adUnits.js */ "./src/adUnits.js");
    /* harmony import */ var _Renderer_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./Renderer.js */ "./src/Renderer.js");
    /* harmony import */ var _bidfactory_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./bidfactory.js */ "./src/bidfactory.js");
    /* harmony import */ var _storageManager_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./storageManager.js */ "./src/storageManager.js");
    /* harmony import */ var _adRendering_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./adRendering.js */ "./src/adRendering.js");
    /* harmony import */ var _adapterManager_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./adapterManager.js */ "./src/adapterManager.js");
    /* harmony import */ var _constants_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.json */ "./src/constants.json");
    /* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./events.js */ "./src/events.js");
    /* harmony import */ var _utils_perfMetrics_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./utils/perfMetrics.js */ "./src/utils/perfMetrics.js");
    /* harmony import */ var _utils_promise_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./utils/promise.js */ "./src/utils/promise.js");
    /* harmony import */ var _fpd_enrichment_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./fpd/enrichment.js */ "./src/fpd/enrichment.js");
    
    
    /** @module pbjs */
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    var owpbjs = (0,_prebidGlobal_js__WEBPACK_IMPORTED_MODULE_0__.getGlobal)();
    var triggerUserSyncs = _userSync_js__WEBPACK_IMPORTED_MODULE_1__.userSync.triggerUserSyncs;
    
    /* private variables */
    var _CONSTANTS$EVENTS = _constants_json__WEBPACK_IMPORTED_MODULE_2__.EVENTS,
      ADD_AD_UNITS = _CONSTANTS$EVENTS.ADD_AD_UNITS,
      BID_WON = _CONSTANTS$EVENTS.BID_WON,
      REQUEST_BIDS = _CONSTANTS$EVENTS.REQUEST_BIDS,
      SET_TARGETING = _CONSTANTS$EVENTS.SET_TARGETING,
      STALE_RENDER = _CONSTANTS$EVENTS.STALE_RENDER;
    var _CONSTANTS$AD_RENDER_ = _constants_json__WEBPACK_IMPORTED_MODULE_2__.AD_RENDER_FAILED_REASON,
      PREVENT_WRITING_ON_MAIN_DOCUMENT = _CONSTANTS$AD_RENDER_.PREVENT_WRITING_ON_MAIN_DOCUMENT,
      NO_AD = _CONSTANTS$AD_RENDER_.NO_AD,
      EXCEPTION = _CONSTANTS$AD_RENDER_.EXCEPTION,
      CANNOT_FIND_AD = _CONSTANTS$AD_RENDER_.CANNOT_FIND_AD,
      MISSING_DOC_OR_ADID = _CONSTANTS$AD_RENDER_.MISSING_DOC_OR_ADID;
    var eventValidators = {
      bidWon: checkDefinedPlacement
    };
    
    // initialize existing debugging sessions if present
    (0,_debugging_js__WEBPACK_IMPORTED_MODULE_3__.loadSession)();
    
    /* Public vars */
    owpbjs.bidderSettings = owpbjs.bidderSettings || {};
    
    // let the world know we are loaded
    owpbjs.libLoaded = true;
    
    // version auto generated from build
    owpbjs.version = "v7.39.0";
    (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logInfo)("Prebid.js v7.39.0 loaded");
    owpbjs.installedModules = owpbjs.installedModules || [];
    
    // create adUnit array
    owpbjs.adUnits = owpbjs.adUnits || [];
    
    // Allow publishers who enable user sync override to trigger their sync
    owpbjs.triggerUserSyncs = triggerUserSyncs;
    function checkDefinedPlacement(id) {
      var adUnitCodes = _auctionManager_js__WEBPACK_IMPORTED_MODULE_5__.auctionManager.getBidsRequested().map(function (bidSet) {
        return bidSet.bids.map(function (bid) {
          return bid.adUnitCode;
        });
      }).reduce(_utils_js__WEBPACK_IMPORTED_MODULE_4__.flatten).filter(_utils_js__WEBPACK_IMPORTED_MODULE_4__.uniques);
      if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.contains)(adUnitCodes, id)) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logError)('The "' + id + '" placement is not defined.');
        return;
      }
      return true;
    }
    function setRenderSize(doc, width, height) {
      if (doc.defaultView && doc.defaultView.frameElement) {
        doc.defaultView.frameElement.width = width;
        doc.defaultView.frameElement.height = height;
      }
    }
    function validateSizes(sizes, targLength) {
      var cleanSizes = [];
      if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(sizes) && (targLength ? sizes.length === targLength : sizes.length > 0)) {
        // check if an array of arrays or array of numbers
        if (sizes.every(function (sz) {
          return (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.isArrayOfNums)(sz, 2);
        })) {
          cleanSizes = sizes;
        } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.isArrayOfNums)(sizes, 2)) {
          cleanSizes.push(sizes);
        }
      }
      return cleanSizes;
    }
    function validateBannerMediaType(adUnit) {
      var validatedAdUnit = (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.deepClone)(adUnit);
      var banner = validatedAdUnit.mediaTypes.banner;
      var bannerSizes = validateSizes(banner.sizes);
      if (bannerSizes.length > 0) {
        banner.sizes = bannerSizes;
        // Deprecation Warning: This property will be deprecated in next release in favor of adUnit.mediaTypes.banner.sizes
        validatedAdUnit.sizes = bannerSizes;
      } else {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logError)('Detected a mediaTypes.banner object without a proper sizes field.  Please ensure the sizes are listed like: [[300, 250], ...].  Removing invalid mediaTypes.banner object from request.');
        delete validatedAdUnit.mediaTypes.banner;
      }
      return validatedAdUnit;
    }
    function validateVideoMediaType(adUnit) {
      var validatedAdUnit = (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.deepClone)(adUnit);
      var video = validatedAdUnit.mediaTypes.video;
      if (video.playerSize) {
        var tarPlayerSizeLen = typeof video.playerSize[0] === 'number' ? 2 : 1;
        var videoSizes = validateSizes(video.playerSize, tarPlayerSizeLen);
        if (videoSizes.length > 0) {
          if (tarPlayerSizeLen === 2) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logInfo)('Transforming video.playerSize from [640,480] to [[640,480]] so it\'s in the proper format.');
          }
          video.playerSize = videoSizes;
          // Deprecation Warning: This property will be deprecated in next release in favor of adUnit.mediaTypes.video.playerSize
          validatedAdUnit.sizes = videoSizes;
        } else {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logError)('Detected incorrect configuration of mediaTypes.video.playerSize.  Please specify only one set of dimensions in a format like: [[640, 480]]. Removing invalid mediaTypes.video.playerSize property from request.');
          delete validatedAdUnit.mediaTypes.video.playerSize;
        }
      }
      return validatedAdUnit;
    }
    function validateNativeMediaType(adUnit) {
      var validatedAdUnit = (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.deepClone)(adUnit);
      var native = validatedAdUnit.mediaTypes.native;
      // if native assets are specified in OpenRTB format, remove legacy assets and print a warn.
      if (native.ortb) {
        var legacyNativeKeys = Object.keys(_constants_json__WEBPACK_IMPORTED_MODULE_2__.NATIVE_KEYS).filter(function (key) {
          return _constants_json__WEBPACK_IMPORTED_MODULE_2__.NATIVE_KEYS[key].includes('hb_native_');
        });
        var nativeKeys = Object.keys(native);
        var intersection = nativeKeys.filter(function (nativeKey) {
          return legacyNativeKeys.includes(nativeKey);
        });
        if (intersection.length > 0) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logError)("when using native OpenRTB format, you cannot use legacy native properties. Deleting ".concat(intersection, " keys from request."));
          intersection.forEach(function (legacyKey) {
            return delete validatedAdUnit.mediaTypes.native[legacyKey];
          });
        }
      }
      if (native.image && native.image.sizes && !Array.isArray(native.image.sizes)) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logError)('Please use an array of sizes for native.image.sizes field.  Removing invalid mediaTypes.native.image.sizes property from request.');
        delete validatedAdUnit.mediaTypes.native.image.sizes;
      }
      if (native.image && native.image.aspect_ratios && !Array.isArray(native.image.aspect_ratios)) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logError)('Please use an array of sizes for native.image.aspect_ratios field.  Removing invalid mediaTypes.native.image.aspect_ratios property from request.');
        delete validatedAdUnit.mediaTypes.native.image.aspect_ratios;
      }
      if (native.icon && native.icon.sizes && !Array.isArray(native.icon.sizes)) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logError)('Please use an array of sizes for native.icon.sizes field.  Removing invalid mediaTypes.native.icon.sizes property from request.');
        delete validatedAdUnit.mediaTypes.native.icon.sizes;
      }
      return validatedAdUnit;
    }
    function validateAdUnitPos(adUnit, mediaType) {
      var pos = (0,_utils_js__WEBPACK_IMPORTED_MODULE_6__["default"])(adUnit, "mediaTypes.".concat(mediaType, ".pos"));
      if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.isNumber)(pos) || isNaN(pos) || !isFinite(pos)) {
        var warning = "Value of property 'pos' on ad unit ".concat(adUnit.code, " should be of type: Number");
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logWarn)(warning);
        _events_js__WEBPACK_IMPORTED_MODULE_7__.emit(_constants_json__WEBPACK_IMPORTED_MODULE_2__.EVENTS.AUCTION_DEBUG, {
          type: 'WARNING',
          arguments: warning
        });
        delete adUnit.mediaTypes[mediaType].pos;
      }
      return adUnit;
    }
    function validateAdUnit(adUnit) {
      var msg = function msg(_msg) {
        return "adUnit.code '".concat(adUnit.code, "' ").concat(_msg);
      };
      var mediaTypes = adUnit.mediaTypes;
      var bids = adUnit.bids;
      if (bids != null && !(0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(bids)) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logError)(msg("defines 'adUnit.bids' that is not an array. Removing adUnit from auction"));
        return null;
      }
      if (bids == null && adUnit.ortb2Imp == null) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logError)(msg("has no 'adUnit.bids' and no 'adUnit.ortb2Imp'. Removing adUnit from auction"));
        return null;
      }
      if (!mediaTypes || Object.keys(mediaTypes).length === 0) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logError)(msg("does not define a 'mediaTypes' object.  This is a required field for the auction, so this adUnit has been removed."));
        return null;
      }
      if (adUnit.ortb2Imp != null && (bids == null || bids.length === 0)) {
        adUnit.bids = [{
          bidder: null
        }]; // the 'null' bidder is treated as an s2s-only placeholder by adapterManager
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logMessage)(msg("defines 'adUnit.ortb2Imp' with no 'adUnit.bids'; it will be seen only by S2S adapters"));
      }
      return adUnit;
    }
    var adUnitSetupChecks = {
      validateAdUnit: validateAdUnit,
      validateBannerMediaType: validateBannerMediaType,
      validateVideoMediaType: validateVideoMediaType,
      validateSizes: validateSizes
    };
    if (true) {
      Object.assign(adUnitSetupChecks, {
        validateNativeMediaType: validateNativeMediaType
      });
    }
    var checkAdUnitSetup = (0,_hook_js__WEBPACK_IMPORTED_MODULE_8__.hook)('sync', function (adUnits) {
      var validatedAdUnits = [];
      adUnits.forEach(function (adUnit) {
        adUnit = validateAdUnit(adUnit);
        if (adUnit == null) return;
        var mediaTypes = adUnit.mediaTypes;
        var validatedBanner, validatedVideo, validatedNative;
        if (mediaTypes.banner) {
          validatedBanner = validateBannerMediaType(adUnit);
          if (mediaTypes.banner.hasOwnProperty('pos')) validatedBanner = validateAdUnitPos(validatedBanner, 'banner');
        }
        if (mediaTypes.video) {
          validatedVideo = validatedBanner ? validateVideoMediaType(validatedBanner) : validateVideoMediaType(adUnit);
          if (mediaTypes.video.hasOwnProperty('pos')) validatedVideo = validateAdUnitPos(validatedVideo, 'video');
        }
        if ( true && mediaTypes.native) {
          validatedNative = validatedVideo ? validateNativeMediaType(validatedVideo) : validatedBanner ? validateNativeMediaType(validatedBanner) : validateNativeMediaType(adUnit);
        }
        var validatedAdUnit = Object.assign({}, validatedBanner, validatedVideo, validatedNative);
        validatedAdUnits.push(validatedAdUnit);
      });
      return validatedAdUnits;
    }, 'checkAdUnitSetup');
    
    /// ///////////////////////////////
    //                              //
    //    Start Public APIs         //
    //                              //
    /// ///////////////////////////////
    
    /**
     * This function returns the query string targeting parameters available at this moment for a given ad unit. Note that some bidder's response may not have been received if you call this function too quickly after the requests are sent.
     * @param  {string} [adunitCode] adUnitCode to get the bid responses for
     * @alias module:pbjs.getAdserverTargetingForAdUnitCodeStr
     * @return {Array}  returnObj return bids array
     */
    owpbjs.getAdserverTargetingForAdUnitCodeStr = function (adunitCode) {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logInfo)("Invoking owpbjs.getAdserverTargetingForAdUnitCodeStr", arguments);
    
      // call to retrieve bids array
      if (adunitCode) {
        var res = owpbjs.getAdserverTargetingForAdUnitCode(adunitCode);
        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.transformAdServerTargetingObj)(res);
      } else {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logMessage)('Need to call getAdserverTargetingForAdUnitCodeStr with adunitCode');
      }
    };
    
    /**
     * This function returns the query string targeting parameters available at this moment for a given ad unit. Note that some bidder's response may not have been received if you call this function too quickly after the requests are sent.
     * @param adUnitCode {string} adUnitCode to get the bid responses for
     * @alias module:pbjs.getHighestUnusedBidResponseForAdUnitCode
     * @returns {Object}  returnObj return bid
     */
    owpbjs.getHighestUnusedBidResponseForAdUnitCode = function (adunitCode) {
      if (adunitCode) {
        var bid = _auctionManager_js__WEBPACK_IMPORTED_MODULE_5__.auctionManager.getAllBidsForAdUnitCode(adunitCode).filter(_targeting_js__WEBPACK_IMPORTED_MODULE_9__.isBidUsable);
        return bid.length ? bid.reduce(_utils_js__WEBPACK_IMPORTED_MODULE_4__.getHighestCpm) : {};
      } else {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logMessage)('Need to call getHighestUnusedBidResponseForAdUnitCode with adunitCode');
      }
    };
    
    /**
     * This function returns the query string targeting parameters available at this moment for a given ad unit. Note that some bidder's response may not have been received if you call this function too quickly after the requests are sent.
     * @param adUnitCode {string} adUnitCode to get the bid responses for
     * @alias module:pbjs.getAdserverTargetingForAdUnitCode
     * @returns {Object}  returnObj return bids
     */
    owpbjs.getAdserverTargetingForAdUnitCode = function (adUnitCode) {
      return owpbjs.getAdserverTargeting(adUnitCode)[adUnitCode];
    };
    
    /**
     * returns all ad server targeting for all ad units
     * @return {Object} Map of adUnitCodes and targeting values []
     * @alias module:pbjs.getAdserverTargeting
     */
    
    owpbjs.getAdserverTargeting = function (adUnitCode) {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logInfo)("Invoking owpbjs.getAdserverTargeting", arguments);
      return _targeting_js__WEBPACK_IMPORTED_MODULE_9__.targeting.getAllTargeting(adUnitCode);
    };
    
    /**
     * returns all consent data
     * @return {Object} Map of consent types and data
     * @alias module:pbjs.getConsentData
     */
    function getConsentMetadata() {
      return {
        gdpr: _adapterManager_js__WEBPACK_IMPORTED_MODULE_10__.gdprDataHandler.getConsentMeta(),
        usp: _adapterManager_js__WEBPACK_IMPORTED_MODULE_10__.uspDataHandler.getConsentMeta(),
        gpp: _adapterManager_js__WEBPACK_IMPORTED_MODULE_10__.gppDataHandler.getConsentMeta(),
        coppa: !!_config_js__WEBPACK_IMPORTED_MODULE_11__.config.getConfig('coppa')
      };
    }
    owpbjs.getConsentMetadata = function () {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logInfo)("Invoking owpbjs.getConsentMetadata");
      return getConsentMetadata();
    };
    function getBids(type) {
      var responses = _auctionManager_js__WEBPACK_IMPORTED_MODULE_5__.auctionManager[type]().filter(_utils_js__WEBPACK_IMPORTED_MODULE_4__.bind.call(_utils_js__WEBPACK_IMPORTED_MODULE_4__.adUnitsFilter, this, _auctionManager_js__WEBPACK_IMPORTED_MODULE_5__.auctionManager.getAdUnitCodes()));
    
      // find the last auction id to get responses for most recent auction only
      var currentAuctionId = _auctionManager_js__WEBPACK_IMPORTED_MODULE_5__.auctionManager.getLastAuctionId();
      return responses.map(function (bid) {
        return bid.adUnitCode;
      }).filter(_utils_js__WEBPACK_IMPORTED_MODULE_4__.uniques).map(function (adUnitCode) {
        return responses.filter(function (bid) {
          return bid.auctionId === currentAuctionId && bid.adUnitCode === adUnitCode;
        });
      }).filter(function (bids) {
        return bids && bids[0] && bids[0].adUnitCode;
      }).map(function (bids) {
        return (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_12__["default"])({}, bids[0].adUnitCode, {
          bids: bids
        });
      }).reduce(function (a, b) {
        return Object.assign(a, b);
      }, {});
    }
    
    /**
     * This function returns the bids requests involved in an auction but not bid on
     * @alias module:pbjs.getNoBids
     * @return {Object}            map | object that contains the bidRequests
     */
    
    owpbjs.getNoBids = function () {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logInfo)("Invoking owpbjs.getNoBids", arguments);
      return getBids('getNoBids');
    };
    
    /**
     * This function returns the bids requests involved in an auction but not bid on or the specified adUnitCode
     * @param  {string} adUnitCode adUnitCode
     * @alias module:pbjs.getNoBidsForAdUnitCode
     * @return {Object}           bidResponse object
     */
    
    owpbjs.getNoBidsForAdUnitCode = function (adUnitCode) {
      var bids = _auctionManager_js__WEBPACK_IMPORTED_MODULE_5__.auctionManager.getNoBids().filter(function (bid) {
        return bid.adUnitCode === adUnitCode;
      });
      return {
        bids: bids
      };
    };
    
    /**
     * This function returns the bid responses at the given moment.
     * @alias module:pbjs.getBidResponses
     * @return {Object}            map | object that contains the bidResponses
     */
    
    owpbjs.getBidResponses = function () {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logInfo)("Invoking owpbjs.getBidResponses", arguments);
      return getBids('getBidsReceived');
    };
    
    /**
     * Returns bidResponses for the specified adUnitCode
     * @param  {string} adUnitCode adUnitCode
     * @alias module:pbjs.getBidResponsesForAdUnitCode
     * @return {Object}            bidResponse object
     */
    
    owpbjs.getBidResponsesForAdUnitCode = function (adUnitCode) {
      var bids = _auctionManager_js__WEBPACK_IMPORTED_MODULE_5__.auctionManager.getBidsReceived().filter(function (bid) {
        return bid.adUnitCode === adUnitCode;
      });
      return {
        bids: bids
      };
    };
    
    /**
     * Set query string targeting on one or more GPT ad units.
     * @param {(string|string[])} adUnit a single `adUnit.code` or multiple.
     * @param {function(object)} customSlotMatching gets a GoogleTag slot and returns a filter function for adUnitCode, so you can decide to match on either eg. return slot => { return adUnitCode => { return slot.getSlotElementId() === 'myFavoriteDivId'; } };
     * @alias module:pbjs.setTargetingForGPTAsync
     */
    owpbjs.setTargetingForGPTAsync = function (adUnit, customSlotMatching) {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logInfo)("Invoking owpbjs.setTargetingForGPTAsync", arguments);
      if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.isGptPubadsDefined)()) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logError)('window.googletag is not defined on the page');
        return;
      }
    
      // get our ad unit codes
      var targetingSet = _targeting_js__WEBPACK_IMPORTED_MODULE_9__.targeting.getAllTargeting(adUnit);
    
      // first reset any old targeting
      _targeting_js__WEBPACK_IMPORTED_MODULE_9__.targeting.resetPresetTargeting(adUnit, customSlotMatching);
    
      // now set new targeting keys
      _targeting_js__WEBPACK_IMPORTED_MODULE_9__.targeting.setTargetingForGPT(targetingSet, customSlotMatching);
      Object.keys(targetingSet).forEach(function (adUnitCode) {
        Object.keys(targetingSet[adUnitCode]).forEach(function (targetingKey) {
          if (targetingKey === 'hb_adid') {
            _auctionManager_js__WEBPACK_IMPORTED_MODULE_5__.auctionManager.setStatusForBids(targetingSet[adUnitCode][targetingKey], _constants_json__WEBPACK_IMPORTED_MODULE_2__.BID_STATUS.BID_TARGETING_SET);
          }
        });
      });
    
      // emit event
      _events_js__WEBPACK_IMPORTED_MODULE_7__.emit(SET_TARGETING, targetingSet);
    };
    
    /**
     * Set query string targeting on all AST (AppNexus Seller Tag) ad units. Note that this function has to be called after all ad units on page are defined. For working example code, see [Using Prebid.js with AppNexus Publisher Ad Server](http://prebid.org/dev-docs/examples/use-prebid-with-appnexus-ad-server.html).
     * @param  {(string|string[])} adUnitCode adUnitCode or array of adUnitCodes
     * @alias module:pbjs.setTargetingForAst
     */
    owpbjs.setTargetingForAst = function (adUnitCodes) {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logInfo)("Invoking owpbjs.setTargetingForAn", arguments);
      if (!_targeting_js__WEBPACK_IMPORTED_MODULE_9__.targeting.isApntagDefined()) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logError)('window.apntag is not defined on the page');
        return;
      }
      _targeting_js__WEBPACK_IMPORTED_MODULE_9__.targeting.setTargetingForAst(adUnitCodes);
    
      // emit event
      _events_js__WEBPACK_IMPORTED_MODULE_7__.emit(SET_TARGETING, _targeting_js__WEBPACK_IMPORTED_MODULE_9__.targeting.getAllTargeting());
    };
    
    /**
     * This function will check for presence of given node in given parent. If not present - will inject it.
     * @param {Node} node node, whose existance is in question
     * @param {Document} doc document element do look in
     * @param {string} tagName tag name to look in
     */
    function reinjectNodeIfRemoved(node, doc, tagName) {
      var injectionNode = doc.querySelector(tagName);
      if (!node.parentNode || node.parentNode !== injectionNode) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.insertElement)(node, doc, tagName);
      }
    }
    
    /**
     * This function will render the ad (based on params) in the given iframe document passed through.
     * Note that doc SHOULD NOT be the parent document page as we can't doc.write() asynchronously
     * @param  {Document} doc document
     * @param  {string} id bid id to locate the ad
     * @alias module:pbjs.renderAd
     */
    owpbjs.renderAd = (0,_hook_js__WEBPACK_IMPORTED_MODULE_8__.hook)('async', function (doc, id, options) {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logInfo)("Invoking owpbjs.renderAd", arguments);
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logMessage)('Calling renderAd with adId :' + id);
      if (!id) {
        var message = "Error trying to write ad Id :".concat(id, " to the page. Missing adId");
        (0,_adRendering_js__WEBPACK_IMPORTED_MODULE_13__.emitAdRenderFail)({
          reason: MISSING_DOC_OR_ADID,
          message: message,
          id: id
        });
        return;
      }
      try {
        // lookup ad by ad Id
        var bid = _auctionManager_js__WEBPACK_IMPORTED_MODULE_5__.auctionManager.findBidByAdId(id);
        if (!bid) {
          var _message = "Error trying to write ad. Cannot find ad by given id : ".concat(id);
          (0,_adRendering_js__WEBPACK_IMPORTED_MODULE_13__.emitAdRenderFail)({
            reason: CANNOT_FIND_AD,
            message: _message,
            id: id
          });
          return;
        }
        if (bid.status === _constants_json__WEBPACK_IMPORTED_MODULE_2__.BID_STATUS.RENDERED) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logWarn)("Ad id ".concat(bid.adId, " has been rendered before"));
          _events_js__WEBPACK_IMPORTED_MODULE_7__.emit(STALE_RENDER, bid);
          if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_6__["default"])(_config_js__WEBPACK_IMPORTED_MODULE_11__.config.getConfig('auctionOptions'), 'suppressStaleRender')) {
            return;
          }
        }
    
        // replace macros according to openRTB with price paid = bid.cpm
        bid.ad = (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.replaceAuctionPrice)(bid.ad, bid.originalCpm || bid.cpm);
        bid.adUrl = (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.replaceAuctionPrice)(bid.adUrl, bid.originalCpm || bid.cpm);
        // replacing clickthrough if submitted
        if (options && options.clickThrough) {
          var clickThrough = options.clickThrough;
          bid.ad = (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.replaceClickThrough)(bid.ad, clickThrough);
          bid.adUrl = (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.replaceClickThrough)(bid.adUrl, clickThrough);
        }
    
        // save winning bids
        _auctionManager_js__WEBPACK_IMPORTED_MODULE_5__.auctionManager.addWinningBid(bid);
    
        // emit 'bid won' event here
        _events_js__WEBPACK_IMPORTED_MODULE_7__.emit(BID_WON, bid);
        var height = bid.height,
          width = bid.width,
          ad = bid.ad,
          mediaType = bid.mediaType,
          adUrl = bid.adUrl,
          renderer = bid.renderer;
    
        // video module
        var adUnitCode = bid.adUnitCode;
        var adUnit = owpbjs.adUnits.filter(function (adUnit) {
          return adUnit.code === adUnitCode;
        });
        var videoModule = owpbjs.videoModule;
        if (adUnit.video && videoModule) {
          videoModule.renderBid(adUnit.video.divId, bid);
          return;
        }
        if (!doc) {
          var _message2 = "Error trying to write ad Id :".concat(id, " to the page. Missing document");
          (0,_adRendering_js__WEBPACK_IMPORTED_MODULE_13__.emitAdRenderFail)({
            reason: MISSING_DOC_OR_ADID,
            message: _message2,
            id: id
          });
          return;
        }
        var creativeComment = document.createComment("Creative ".concat(bid.creativeId, " served by ").concat(bid.bidder, " Prebid.js Header Bidding"));
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.insertElement)(creativeComment, doc, 'html');
        if ((0,_Renderer_js__WEBPACK_IMPORTED_MODULE_14__.isRendererRequired)(renderer)) {
          (0,_Renderer_js__WEBPACK_IMPORTED_MODULE_14__.executeRenderer)(renderer, bid, doc);
          reinjectNodeIfRemoved(creativeComment, doc, 'html');
          (0,_adRendering_js__WEBPACK_IMPORTED_MODULE_13__.emitAdRenderSucceeded)({
            doc: doc,
            bid: bid,
            id: id
          });
        } else if (doc === document && !(0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.inIframe)() || mediaType === 'video') {
          var _message3 = "Error trying to write ad. Ad render call ad id ".concat(id, " was prevented from writing to the main document.");
          (0,_adRendering_js__WEBPACK_IMPORTED_MODULE_13__.emitAdRenderFail)({
            reason: PREVENT_WRITING_ON_MAIN_DOCUMENT,
            message: _message3,
            bid: bid,
            id: id
          });
        } else if (ad) {
          doc.write(ad);
          doc.close();
          setRenderSize(doc, width, height);
          reinjectNodeIfRemoved(creativeComment, doc, 'html');
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.callBurl)(bid);
          (0,_adRendering_js__WEBPACK_IMPORTED_MODULE_13__.emitAdRenderSucceeded)({
            doc: doc,
            bid: bid,
            id: id
          });
        } else if (adUrl) {
          var iframe = (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.createInvisibleIframe)();
          iframe.height = height;
          iframe.width = width;
          iframe.style.display = 'inline';
          iframe.style.overflow = 'hidden';
          iframe.src = adUrl;
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.insertElement)(iframe, doc, 'body');
          setRenderSize(doc, width, height);
          reinjectNodeIfRemoved(creativeComment, doc, 'html');
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.callBurl)(bid);
          (0,_adRendering_js__WEBPACK_IMPORTED_MODULE_13__.emitAdRenderSucceeded)({
            doc: doc,
            bid: bid,
            id: id
          });
        } else {
          var _message4 = "Error trying to write ad. No ad for bid response id: ".concat(id);
          (0,_adRendering_js__WEBPACK_IMPORTED_MODULE_13__.emitAdRenderFail)({
            reason: NO_AD,
            message: _message4,
            bid: bid,
            id: id
          });
        }
      } catch (e) {
        var _message5 = "Error trying to write ad Id :".concat(id, " to the page:").concat(e.message);
        (0,_adRendering_js__WEBPACK_IMPORTED_MODULE_13__.emitAdRenderFail)({
          reason: EXCEPTION,
          message: _message5,
          id: id
        });
      }
    });
    
    /**
     * Remove adUnit from the $$PREBID_GLOBAL$$ configuration, if there are no addUnitCode(s) it will remove all
     * @param  {string| Array} adUnitCode the adUnitCode(s) to remove
     * @alias module:pbjs.removeAdUnit
     */
    owpbjs.removeAdUnit = function (adUnitCode) {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logInfo)("Invoking owpbjs.removeAdUnit", arguments);
      if (!adUnitCode) {
        owpbjs.adUnits = [];
        return;
      }
      var adUnitCodes;
      if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(adUnitCode)) {
        adUnitCodes = adUnitCode;
      } else {
        adUnitCodes = [adUnitCode];
      }
      adUnitCodes.forEach(function (adUnitCode) {
        for (var i = owpbjs.adUnits.length - 1; i >= 0; i--) {
          if (owpbjs.adUnits[i].code === adUnitCode) {
            owpbjs.adUnits.splice(i, 1);
          }
        }
      });
    };
    
    /**
     * @param {Object} requestOptions
     * @param {function} requestOptions.bidsBackHandler
     * @param {number} requestOptions.timeout
     * @param {Array} requestOptions.adUnits
     * @param {Array} requestOptions.adUnitCodes
     * @param {Array} requestOptions.labels
     * @param {String} requestOptions.auctionId
     * @alias module:pbjs.requestBids
     */
    owpbjs.requestBids = function () {
      var delegate = (0,_hook_js__WEBPACK_IMPORTED_MODULE_8__.hook)('async', function () {
        var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          bidsBackHandler = _ref2.bidsBackHandler,
          timeout = _ref2.timeout,
          adUnits = _ref2.adUnits,
          adUnitCodes = _ref2.adUnitCodes,
          labels = _ref2.labels,
          auctionId = _ref2.auctionId,
          ttlBuffer = _ref2.ttlBuffer,
          ortb2 = _ref2.ortb2,
          metrics = _ref2.metrics,
          defer = _ref2.defer;
        _events_js__WEBPACK_IMPORTED_MODULE_7__.emit(REQUEST_BIDS);
        var cbTimeout = timeout || _config_js__WEBPACK_IMPORTED_MODULE_11__.config.getConfig('bidderTimeout');
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logInfo)("Invoking owpbjs.requestBids", arguments);
        if (adUnitCodes && adUnitCodes.length) {
          // if specific adUnitCodes supplied filter adUnits for those codes
          adUnits = adUnits.filter(function (unit) {
            return (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_15__.includes)(adUnitCodes, unit.code);
          });
        } else {
          // otherwise derive adUnitCodes from adUnits
          adUnitCodes = adUnits && adUnits.map(function (unit) {
            return unit.code;
          });
        }
        var ortb2Fragments = {
          global: (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.mergeDeep)({}, _config_js__WEBPACK_IMPORTED_MODULE_11__.config.getAnyConfig('ortb2') || {}, ortb2 || {}),
          bidder: Object.fromEntries(Object.entries(_config_js__WEBPACK_IMPORTED_MODULE_11__.config.getBidderConfig()).map(function (_ref3) {
            var _ref4 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_16__["default"])(_ref3, 2),
              bidder = _ref4[0],
              cfg = _ref4[1];
            return [bidder, cfg.ortb2];
          }).filter(function (_ref5) {
            var _ref6 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_16__["default"])(_ref5, 2),
              _ = _ref6[0],
              ortb2 = _ref6[1];
            return ortb2 != null;
          }))
        };
        return (0,_fpd_enrichment_js__WEBPACK_IMPORTED_MODULE_17__.enrichFPD)(_utils_promise_js__WEBPACK_IMPORTED_MODULE_18__.GreedyPromise.resolve(ortb2Fragments.global)).then(function (global) {
          ortb2Fragments.global = global;
          return startAuction({
            bidsBackHandler: bidsBackHandler,
            timeout: cbTimeout,
            adUnits: adUnits,
            adUnitCodes: adUnitCodes,
            labels: labels,
            auctionId: auctionId,
            ttlBuffer: ttlBuffer,
            ortb2Fragments: ortb2Fragments,
            metrics: metrics,
            defer: defer
          });
        });
      }, 'requestBids');
      return (0,_hook_js__WEBPACK_IMPORTED_MODULE_8__.wrapHook)(delegate, function requestBids() {
        var req = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        // unlike the main body of `delegate`, this runs before any other hook has a chance to;
        // it's also not restricted in its return value in the way `async` hooks are.
    
        // if the request does not specify adUnits, clone the global adUnit array;
        // otherwise, if the caller goes on to use addAdUnits/removeAdUnits, any asynchronous logic
        // in any hook might see their effects.
        var adUnits = req.adUnits || owpbjs.adUnits;
        req.adUnits = (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(adUnits) ? adUnits.slice() : [adUnits];
        req.metrics = (0,_utils_perfMetrics_js__WEBPACK_IMPORTED_MODULE_19__.newMetrics)();
        req.metrics.checkpoint('requestBids');
        req.defer = (0,_utils_promise_js__WEBPACK_IMPORTED_MODULE_18__.defer)({
          promiseFactory: function promiseFactory(r) {
            return new Promise(r);
          }
        });
        delegate.call(this, req);
        return req.defer.promise;
      });
    }();
    var startAuction = (0,_hook_js__WEBPACK_IMPORTED_MODULE_8__.hook)('async', function () {
      var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        bidsBackHandler = _ref7.bidsBackHandler,
        cbTimeout = _ref7.timeout,
        adUnits = _ref7.adUnits,
        ttlBuffer = _ref7.ttlBuffer,
        adUnitCodes = _ref7.adUnitCodes,
        labels = _ref7.labels,
        auctionId = _ref7.auctionId,
        ortb2Fragments = _ref7.ortb2Fragments,
        metrics = _ref7.metrics,
        defer = _ref7.defer;
      var s2sBidders = (0,_adapterManager_js__WEBPACK_IMPORTED_MODULE_10__.getS2SBidderSet)(_config_js__WEBPACK_IMPORTED_MODULE_11__.config.getConfig('s2sConfig') || []);
      adUnits = (0,_utils_perfMetrics_js__WEBPACK_IMPORTED_MODULE_19__.useMetrics)(metrics).measureTime('requestBids.validate', function () {
        return checkAdUnitSetup(adUnits);
      });
      function auctionDone(bids, timedOut, auctionId) {
        if (typeof bidsBackHandler === 'function') {
          try {
            bidsBackHandler(bids, timedOut, auctionId);
          } catch (e) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logError)('Error executing bidsBackHandler', null, e);
          }
        }
        defer.resolve({
          bids: bids,
          timedOut: timedOut,
          auctionId: auctionId
        });
      }
    
      /*
       * for a given adunit which supports a set of mediaTypes
       * and a given bidder which supports a set of mediaTypes
       * a bidder is eligible to participate on the adunit
       * if it supports at least one of the mediaTypes on the adunit
       */
      adUnits.forEach(function (adUnit) {
        var _adUnit$ortb2Imp, _adUnit$ortb2Imp$ext;
        // get the adunit's mediaTypes, defaulting to banner if mediaTypes isn't present
        var adUnitMediaTypes = Object.keys(adUnit.mediaTypes || {
          'banner': 'banner'
        });
    
        // get the bidder's mediaTypes
        var allBidders = adUnit.bids.map(function (bid) {
          return bid.bidder;
        });
        var bidderRegistry = _adapterManager_js__WEBPACK_IMPORTED_MODULE_10__["default"].bidderRegistry;
        var bidders = allBidders.filter(function (bidder) {
          return !s2sBidders.has(bidder);
        });
        var tid = ((_adUnit$ortb2Imp = adUnit.ortb2Imp) === null || _adUnit$ortb2Imp === void 0 ? void 0 : (_adUnit$ortb2Imp$ext = _adUnit$ortb2Imp.ext) === null || _adUnit$ortb2Imp$ext === void 0 ? void 0 : _adUnit$ortb2Imp$ext.tid) || (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.generateUUID)();
        adUnit.transactionId = tid;
        if (ttlBuffer != null && !adUnit.hasOwnProperty('ttlBuffer')) {
          adUnit.ttlBuffer = ttlBuffer;
        }
        // Populate ortb2Imp.ext.tid with transactionId. Specifying a transaction ID per item in the ortb impression array, lets multiple transaction IDs be transmitted in a single bid request.
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_20__.dset)(adUnit, 'ortb2Imp.ext.tid', tid);
        bidders.forEach(function (bidder) {
          var adapter = bidderRegistry[bidder];
          var spec = adapter && adapter.getSpec && adapter.getSpec();
          // banner is default if not specified in spec
          var bidderMediaTypes = spec && spec.supportedMediaTypes || ['banner'];
    
          // check if the bidder's mediaTypes are not in the adUnit's mediaTypes
          var bidderEligible = adUnitMediaTypes.some(function (type) {
            return (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_15__.includes)(bidderMediaTypes, type);
          });
          if (!bidderEligible) {
            // drop the bidder from the ad unit if it's not compatible
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logWarn)((0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.unsupportedBidderMessage)(adUnit, bidder));
            adUnit.bids = adUnit.bids.filter(function (bid) {
              return bid.bidder !== bidder;
            });
          } else {
            _adUnits_js__WEBPACK_IMPORTED_MODULE_21__.adunitCounter.incrementBidderRequestsCounter(adUnit.code, bidder);
          }
        });
        _adUnits_js__WEBPACK_IMPORTED_MODULE_21__.adunitCounter.incrementRequestsCounter(adUnit.code);
      });
      if (!adUnits || adUnits.length === 0) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logMessage)('No adUnits configured. No bids requested.');
        auctionDone();
      } else {
        var auction = _auctionManager_js__WEBPACK_IMPORTED_MODULE_5__.auctionManager.createAuction({
          adUnits: adUnits,
          adUnitCodes: adUnitCodes,
          callback: auctionDone,
          cbTimeout: cbTimeout,
          labels: labels,
          auctionId: auctionId,
          ortb2Fragments: ortb2Fragments,
          metrics: metrics
        });
        var adUnitsLen = adUnits.length;
        if (adUnitsLen > 15) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logInfo)("Current auction ".concat(auction.getAuctionId(), " contains ").concat(adUnitsLen, " adUnits."), adUnits);
        }
        adUnitCodes.forEach(function (code) {
          return _targeting_js__WEBPACK_IMPORTED_MODULE_9__.targeting.setLatestAuctionForAdUnit(code, auction.getAuctionId());
        });
        auction.callBids();
      }
    }, 'startAuction');
    function executeCallbacks(fn, reqBidsConfigObj) {
      runAll(_storageManager_js__WEBPACK_IMPORTED_MODULE_22__.storageCallbacks);
      runAll(enableAnalyticsCallbacks);
      fn.call(this, reqBidsConfigObj);
      function runAll(queue) {
        var queued;
        while (queued = queue.shift()) {
          queued();
        }
      }
    }
    
    // This hook will execute all storage callbacks which were registered before gdpr enforcement hook was added. Some bidders, user id modules use storage functions when module is parsed but gdpr enforcement hook is not added at that stage as setConfig callbacks are yet to be called. Hence for such calls we execute all the stored callbacks just before requestBids. At this hook point we will know for sure that gdprEnforcement module is added or not
    owpbjs.requestBids.before(executeCallbacks, 49);
    
    /**
     *
     * Add adunit(s)
     * @param {Array|Object} adUnitArr Array of adUnits or single adUnit Object.
     * @alias module:pbjs.addAdUnits
     */
    owpbjs.addAdUnits = function (adUnitArr) {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logInfo)("Invoking owpbjs.addAdUnits", arguments);
      owpbjs.adUnits.push.apply(owpbjs.adUnits, (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(adUnitArr) ? adUnitArr : [adUnitArr]);
      // emit event
      _events_js__WEBPACK_IMPORTED_MODULE_7__.emit(ADD_AD_UNITS);
    };
    
    /**
     * @param {string} event the name of the event
     * @param {Function} handler a callback to set on event
     * @param {string} id an identifier in the context of the event
     * @alias module:pbjs.onEvent
     *
     * This API call allows you to register a callback to handle a Prebid.js event.
     * An optional `id` parameter provides more finely-grained event callback registration.
     * This makes it possible to register callback events for a specific item in the
     * event context. For example, `bidWon` events will accept an `id` for ad unit code.
     * `bidWon` callbacks registered with an ad unit code id will be called when a bid
     * for that ad unit code wins the auction. Without an `id` this method registers the
     * callback for every `bidWon` event.
     *
     * Currently `bidWon` is the only event that accepts an `id` parameter.
     */
    owpbjs.onEvent = function (event, handler, id) {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logInfo)("Invoking owpbjs.onEvent", arguments);
      if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.isFn)(handler)) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logError)('The event handler provided is not a function and was not set on event "' + event + '".');
        return;
      }
      if (id && !eventValidators[event].call(null, id)) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logError)('The id provided is not valid for event "' + event + '" and no handler was set.');
        return;
      }
      _events_js__WEBPACK_IMPORTED_MODULE_7__.on(event, handler, id);
    };
    
    /**
     * @param {string} event the name of the event
     * @param {Function} handler a callback to remove from the event
     * @param {string} id an identifier in the context of the event (see `$$PREBID_GLOBAL$$.onEvent`)
     * @alias module:pbjs.offEvent
     */
    owpbjs.offEvent = function (event, handler, id) {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logInfo)("Invoking owpbjs.offEvent", arguments);
      if (id && !eventValidators[event].call(null, id)) {
        return;
      }
      _events_js__WEBPACK_IMPORTED_MODULE_7__.off(event, handler, id);
    };
    
    /**
     * Return a copy of all events emitted
     *
     * @alias module:pbjs.getEvents
     */
    owpbjs.getEvents = function () {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logInfo)("Invoking owpbjs.getEvents");
      return _events_js__WEBPACK_IMPORTED_MODULE_7__.getEvents();
    };
    
    /*
     * Wrapper to register bidderAdapter externally (adapterManager.registerBidAdapter())
     * @param  {Function} bidderAdaptor [description]
     * @param  {string} bidderCode [description]
     * @alias module:pbjs.registerBidAdapter
     */
    owpbjs.registerBidAdapter = function (bidderAdaptor, bidderCode) {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logInfo)("Invoking owpbjs.registerBidAdapter", arguments);
      try {
        _adapterManager_js__WEBPACK_IMPORTED_MODULE_10__["default"].registerBidAdapter(bidderAdaptor(), bidderCode);
      } catch (e) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logError)('Error registering bidder adapter : ' + e.message);
      }
    };
    
    /**
     * Wrapper to register analyticsAdapter externally (adapterManager.registerAnalyticsAdapter())
     * @param  {Object} options [description]
     * @alias module:pbjs.registerAnalyticsAdapter
     */
    owpbjs.registerAnalyticsAdapter = function (options) {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logInfo)("Invoking owpbjs.registerAnalyticsAdapter", arguments);
      try {
        _adapterManager_js__WEBPACK_IMPORTED_MODULE_10__["default"].registerAnalyticsAdapter(options);
      } catch (e) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logError)('Error registering analytics adapter : ' + e.message);
      }
    };
    
    /**
     * Wrapper to bidfactory.createBid()
     * @param  {string} statusCode [description]
     * @alias module:pbjs.createBid
     * @return {Object} bidResponse [description]
     */
    owpbjs.createBid = function (statusCode) {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logInfo)("Invoking owpbjs.createBid", arguments);
      return (0,_bidfactory_js__WEBPACK_IMPORTED_MODULE_23__.createBid)(statusCode);
    };
    
    /**
     * Enable sending analytics data to the analytics provider of your
     * choice.
     *
     * For usage, see [Integrate with the Prebid Analytics
     * API](http://prebid.org/dev-docs/integrate-with-the-prebid-analytics-api.html).
     *
     * For a list of analytics adapters, see [Analytics for
     * Prebid](http://prebid.org/overview/analytics.html).
     * @param  {Object} config
     * @param {string} config.provider The name of the provider, e.g., `"ga"` for Google Analytics.
     * @param {Object} config.options The options for this particular analytics adapter.  This will likely vary between adapters.
     * @alias module:pbjs.enableAnalytics
     */
    
    // Stores 'enableAnalytics' callbacks for later execution.
    var enableAnalyticsCallbacks = [];
    var enableAnalyticsCb = (0,_hook_js__WEBPACK_IMPORTED_MODULE_8__.hook)('async', function (config) {
      if (config && !(0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.isEmpty)(config)) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logInfo)("Invoking owpbjs.enableAnalytics for: ", config);
        _adapterManager_js__WEBPACK_IMPORTED_MODULE_10__["default"].enableAnalytics(config);
      } else {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logError)("owpbjs.enableAnalytics should be called with option {}");
      }
    }, 'enableAnalyticsCb');
    owpbjs.enableAnalytics = function (config) {
      enableAnalyticsCallbacks.push(enableAnalyticsCb.bind(this, config));
    };
    
    /**
     * @alias module:pbjs.aliasBidder
     */
    owpbjs.aliasBidder = function (bidderCode, alias, options) {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logInfo)("Invoking owpbjs.aliasBidder", arguments);
      if (bidderCode && alias) {
        _adapterManager_js__WEBPACK_IMPORTED_MODULE_10__["default"].aliasBidAdapter(bidderCode, alias, options);
      } else {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logError)('bidderCode and alias must be passed as arguments', "owpbjs.aliasBidder");
      }
    };
    
    /**
     * @alias module:pbjs.aliasRegistry
     */
    owpbjs.aliasRegistry = _adapterManager_js__WEBPACK_IMPORTED_MODULE_10__["default"].aliasRegistry;
    _config_js__WEBPACK_IMPORTED_MODULE_11__.config.getConfig('aliasRegistry', function (config) {
      if (config.aliasRegistry === 'private') delete owpbjs.aliasRegistry;
    });
    
    /**
     * The bid response object returned by an external bidder adapter during the auction.
     * @typedef {Object} AdapterBidResponse
     * @property {string} pbAg Auto granularity price bucket; CPM <= 5 ? increment = 0.05 : CPM > 5 && CPM <= 10 ? increment = 0.10 : CPM > 10 && CPM <= 20 ? increment = 0.50 : CPM > 20 ? priceCap = 20.00.  Example: `"0.80"`.
     * @property {string} pbCg Custom price bucket.  For example setup, see {@link setPriceGranularity}.  Example: `"0.84"`.
     * @property {string} pbDg Dense granularity price bucket; CPM <= 3 ? increment = 0.01 : CPM > 3 && CPM <= 8 ? increment = 0.05 : CPM > 8 && CPM <= 20 ? increment = 0.50 : CPM > 20? priceCap = 20.00.  Example: `"0.84"`.
     * @property {string} pbLg Low granularity price bucket; $0.50 increment, capped at $5, floored to two decimal places.  Example: `"0.50"`.
     * @property {string} pbMg Medium granularity price bucket; $0.10 increment, capped at $20, floored to two decimal places.  Example: `"0.80"`.
     * @property {string} pbHg High granularity price bucket; $0.01 increment, capped at $20, floored to two decimal places.  Example: `"0.84"`.
     *
     * @property {string} bidder The string name of the bidder.  This *may* be the same as the `bidderCode`.  For For a list of all bidders and their codes, see [Bidders' Params](http://prebid.org/dev-docs/bidders.html).
     * @property {string} bidderCode The unique string that identifies this bidder.  For a list of all bidders and their codes, see [Bidders' Params](http://prebid.org/dev-docs/bidders.html).
     *
     * @property {string} requestId The [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) representing the bid request.
     * @property {number} requestTimestamp The time at which the bid request was sent out, expressed in milliseconds.
     * @property {number} responseTimestamp The time at which the bid response was received, expressed in milliseconds.
     * @property {number} timeToRespond How long it took for the bidder to respond with this bid, expressed in milliseconds.
     *
     * @property {string} size The size of the ad creative, expressed in `"AxB"` format, where A and B are numbers of pixels.  Example: `"320x50"`.
     * @property {string} width The width of the ad creative in pixels.  Example: `"320"`.
     * @property {string} height The height of the ad creative in pixels.  Example: `"50"`.
     *
     * @property {string} ad The actual ad creative content, often HTML with CSS, JavaScript, and/or links to additional content.  Example: `"<div id='beacon_-YQbipJtdxmMCgEPHExLhmqzEm' style='position: absolute; left: 0px; top: 0px; visibility: hidden;'><img src='http://aplus-...'/></div><iframe src=\"http://aax-us-east.amazon-adsystem.com/e/is/8dcfcd..." width=\"728\" height=\"90\" frameborder=\"0\" ...></iframe>",`.
     * @property {number} ad_id The ad ID of the creative, as understood by the bidder's system.  Used by the line item's [creative in the ad server](http://prebid.org/adops/send-all-bids-adops.html#step-3-add-a-creative).
     * @property {string} adUnitCode The code used to uniquely identify the ad unit on the publisher's page.
     *
     * @property {string} statusMessage The status of the bid.  Allowed values: `"Bid available"` or `"Bid returned empty or error response"`.
     * @property {number} cpm The exact bid price from the bidder, expressed to the thousandths place.  Example: `"0.849"`.
     *
     * @property {Object} adserverTargeting An object whose values represent the ad server's targeting on the bid.
     * @property {string} adserverTargeting.hb_adid The ad ID of the creative, as understood by the ad server.
     * @property {string} adserverTargeting.hb_pb The price paid to show the creative, as logged in the ad server.
     * @property {string} adserverTargeting.hb_bidder The winning bidder whose ad creative will be served by the ad server.
     */
    
    /**
     * Get all of the bids that have been rendered.  Useful for [troubleshooting your integration](http://prebid.org/dev-docs/prebid-troubleshooting-guide.html).
     * @return {Array<AdapterBidResponse>} A list of bids that have been rendered.
     */
    owpbjs.getAllWinningBids = function () {
      return _auctionManager_js__WEBPACK_IMPORTED_MODULE_5__.auctionManager.getAllWinningBids();
    };
    
    /**
     * Get all of the bids that have won their respective auctions.
     * @return {Array<AdapterBidResponse>} A list of bids that have won their respective auctions.
     */
    owpbjs.getAllPrebidWinningBids = function () {
      return _auctionManager_js__WEBPACK_IMPORTED_MODULE_5__.auctionManager.getBidsReceived().filter(function (bid) {
        return bid.status === _constants_json__WEBPACK_IMPORTED_MODULE_2__.BID_STATUS.BID_TARGETING_SET;
      });
    };
    
    /**
     * Get array of highest cpm bids for all adUnits, or highest cpm bid
     * object for the given adUnit
     * @param {string} adUnitCode - optional ad unit code
     * @alias module:pbjs.getHighestCpmBids
     * @return {Array} array containing highest cpm bid object(s)
     */
    owpbjs.getHighestCpmBids = function (adUnitCode) {
      return _targeting_js__WEBPACK_IMPORTED_MODULE_9__.targeting.getWinningBids(adUnitCode);
    };
    
    /**
     * Mark the winning bid as used, should only be used in conjunction with video
     * @typedef {Object} MarkBidRequest
     * @property {string} adUnitCode The ad unit code
     * @property {string} adId The id representing the ad we want to mark
     *
     * @alias module:pbjs.markWinningBidAsUsed
     */
    owpbjs.markWinningBidAsUsed = function (markBidRequest) {
      var bids = [];
      if (markBidRequest.adUnitCode && markBidRequest.adId) {
        bids = _auctionManager_js__WEBPACK_IMPORTED_MODULE_5__.auctionManager.getBidsReceived().filter(function (bid) {
          return bid.adId === markBidRequest.adId && bid.adUnitCode === markBidRequest.adUnitCode;
        });
      } else if (markBidRequest.adUnitCode) {
        bids = _targeting_js__WEBPACK_IMPORTED_MODULE_9__.targeting.getWinningBids(markBidRequest.adUnitCode);
      } else if (markBidRequest.adId) {
        bids = _auctionManager_js__WEBPACK_IMPORTED_MODULE_5__.auctionManager.getBidsReceived().filter(function (bid) {
          return bid.adId === markBidRequest.adId;
        });
      } else {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logWarn)('Improper use of markWinningBidAsUsed. It needs an adUnitCode or an adId to function.');
      }
      if (bids.length > 0) {
        bids[0].status = _constants_json__WEBPACK_IMPORTED_MODULE_2__.BID_STATUS.RENDERED;
      }
    };
    
    /**
     * Get Prebid config options
     * @param {Object} options
     * @alias module:pbjs.getConfig
     */
    owpbjs.getConfig = _config_js__WEBPACK_IMPORTED_MODULE_11__.config.getAnyConfig;
    owpbjs.readConfig = _config_js__WEBPACK_IMPORTED_MODULE_11__.config.readAnyConfig;
    owpbjs.mergeConfig = _config_js__WEBPACK_IMPORTED_MODULE_11__.config.mergeConfig;
    owpbjs.mergeBidderConfig = _config_js__WEBPACK_IMPORTED_MODULE_11__.config.mergeBidderConfig;
    
    /**
     * Set Prebid config options.
     * See https://docs.prebid.org/dev-docs/publisher-api-reference/setConfig.html
     *
     * @param {Object} options Global Prebid configuration object. Must be JSON - no JavaScript functions are allowed.
     */
    owpbjs.setConfig = _config_js__WEBPACK_IMPORTED_MODULE_11__.config.setConfig;
    owpbjs.setBidderConfig = _config_js__WEBPACK_IMPORTED_MODULE_11__.config.setBidderConfig;
    owpbjs.que.push(function () {
      return (0,_secureCreatives_js__WEBPACK_IMPORTED_MODULE_24__.listenMessagesFromCreative)();
    });
    
    /**
     * This queue lets users load Prebid asynchronously, but run functions the same way regardless of whether it gets loaded
     * before or after their script executes. For example, given the code:
     *
     * <script src="url/to/Prebid.js" async></script>
     * <script>
     *   var pbjs = pbjs || {};
     *   pbjs.cmd = pbjs.cmd || [];
     *   pbjs.cmd.push(functionToExecuteOncePrebidLoads);
     * </script>
     *
     * If the page's script runs before prebid loads, then their function gets added to the queue, and executed
     * by prebid once it's done loading. If it runs after prebid loads, then this monkey-patch causes their
     * function to execute immediately.
     *
     * @memberof pbjs
     * @param  {function} command A function which takes no arguments. This is guaranteed to run exactly once, and only after
     *                            the Prebid script has been fully loaded.
     * @alias module:pbjs.cmd.push
     */
    owpbjs.cmd.push = function (command) {
      if (typeof command === 'function') {
        try {
          command.call();
        } catch (e) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logError)('Error processing command :', e.message, e.stack);
        }
      } else {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logError)("Commands written into owpbjs.cmd.push must be wrapped in a function");
      }
    };
    owpbjs.que.push = owpbjs.cmd.push;
    function processQueue(queue) {
      queue.forEach(function (cmd) {
        if (typeof cmd.called === 'undefined') {
          try {
            cmd.call();
            cmd.called = true;
          } catch (e) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.logError)('Error processing command :', 'prebid.js', e);
          }
        }
      });
    }
    
    /**
     * @alias module:pbjs.processQueue
     */
    owpbjs.processQueue = function () {
      _hook_js__WEBPACK_IMPORTED_MODULE_8__.hook.ready();
      processQueue(owpbjs.que);
      processQueue(owpbjs.cmd);
    };
    /* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = (owpbjs);
    
    /***/ }),
    
    /***/ "./src/prebidGlobal.js":
    /*!*****************************!*\
      !*** ./src/prebidGlobal.js ***!
      \*****************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "getGlobal": function() { return /* binding */ getGlobal; }
    /* harmony export */ });
    // if $$PREBID_GLOBAL$$ already exists in global document scope, use it, if not, create the object
    // global defination should happen BEFORE imports to avoid global undefined errors.
    /* eslint-disable */
    if (window.owpbjs) {
      var _window, _window$PWT;
      console.warn("Namespace clash happened, with name: ".concat("window.owpbjs", " and existing PWT version details: ", JSON.stringify((_window = window) === null || _window === void 0 ? void 0 : (_window$PWT = _window.PWT) === null || _window$PWT === void 0 ? void 0 : _window$PWT.versionDetails)));
    }
    /* eslint-disable */
    
    window.owpbjs = window.owpbjs || {};
    window.owpbjs.cmd = window.owpbjs.cmd || [];
    window.owpbjs.que = window.owpbjs.que || [];
    
    // create a pbjs global pointer
    window._pbjsGlobals = window._pbjsGlobals || [];
    window._pbjsGlobals.push("owpbjs");
    function getGlobal() {
      return window.owpbjs;
    }
    
    /***/ }),
    
    /***/ "./src/refererDetection.js":
    /*!*********************************!*\
      !*** ./src/refererDetection.js ***!
      \*********************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "getRefererInfo": function() { return /* binding */ getRefererInfo; },
    /* harmony export */   "parseDomain": function() { return /* binding */ parseDomain; }
    /* harmony export */ });
    /* unused harmony exports ensureProtocol, detectReferer */
    /* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config.js */ "./src/config.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
    /**
     * The referer detection module attempts to gather referer information from the current page that prebid.js resides in.
     * The information that it tries to collect includes:
     * The detected top url in the nav bar,
     * Whether it was able to reach the top most window (if for example it was embedded in several iframes),
     * The number of iframes it was embedded in if applicable (by default max ten iframes),
     * A list of the domains of each embedded window if applicable.
     * Canonical URL which refers to an HTML link element, with the attribute of rel="canonical", found in the <head> element of your webpage
     */
    
    
    
    
    /**
     * Prepend a URL with the page's protocol (http/https), if necessary.
     */
    function ensureProtocol(url) {
      var win = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window;
      if (!url) return url;
      if (/\w+:\/\//.exec(url)) {
        // url already has protocol
        return url;
      }
      var windowProto = win.location.protocol;
      try {
        windowProto = win.top.location.protocol;
      } catch (e) {}
      if (/^\/\//.exec(url)) {
        // url uses relative protocol ("//example.com")
        return windowProto + url;
      } else {
        return "".concat(windowProto, "//").concat(url);
      }
    }
    
    /**
     * Extract the domain portion from a URL.
     * @param url
     * @param noLeadingWww: if true, remove 'www.' appearing at the beginning of the domain.
     * @param noPort: if true, do not include the ':[port]' portion
     */
    function parseDomain(url) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$noLeadingWww = _ref.noLeadingWww,
        noLeadingWww = _ref$noLeadingWww === void 0 ? false : _ref$noLeadingWww,
        _ref$noPort = _ref.noPort,
        noPort = _ref$noPort === void 0 ? false : _ref$noPort;
      try {
        url = new URL(ensureProtocol(url));
      } catch (e) {
        return;
      }
      url = noPort ? url.hostname : url.host;
      if (noLeadingWww && url.startsWith('www.')) {
        url = url.substring(4);
      }
      return url;
    }
    
    /**
     * @param {Window} win Window
     * @returns {Function}
     */
    function detectReferer(win) {
      /**
       * This function would return a read-only array of hostnames for all the parent frames.
       * win.location.ancestorOrigins is only supported in webkit browsers. For non-webkit browsers it will return undefined.
       *
       * @param {Window} win Window object
       * @returns {(undefined|Array)} Ancestor origins or undefined
       */
      function getAncestorOrigins(win) {
        try {
          if (!win.location.ancestorOrigins) {
            return;
          }
          return win.location.ancestorOrigins;
        } catch (e) {
          // Ignore error
        }
      }
    
      /**
       * This function returns canonical URL which refers to an HTML link element, with the attribute of rel="canonical", found in the <head> element of your webpage
       *
       * @param {Object} doc document
       * @returns {string|null}
       */
      function getCanonicalUrl(doc) {
        try {
          var element = doc.querySelector("link[rel='canonical']");
          if (element !== null) {
            return element.href;
          }
        } catch (e) {
          // Ignore error
        }
        return null;
      }
    
      // TODO: the meaning of "reachedTop" seems to be intentionally ambiguous - best to leave them out of
      // the typedef for now. (for example, unit tests enforce that "reachedTop" should be false in some situations where we
      // happily provide a location for the top).
    
      /**
       * @typedef {Object} refererInfo
       * @property {string|null} location the browser's location, or null if not available (due to cross-origin restrictions)
       * @property {string|null} canonicalUrl the site's canonical URL as set by the publisher, through setConfig({pageUrl}) or <link rel="canonical" />
       * @property {string|null} page the best candidate for the current page URL: `canonicalUrl`, falling back to `location`
       * @property {string|null} domain the domain portion of `page`
       * @property {string|null} ref the referrer (document.referrer) to the current page, or null if not available (due to cross-origin restrictions)
       * @property {string} topmostLocation of the top-most frame for which we could guess the location. Outside of cross-origin scenarios, this is equivalent to `location`.
       * @property {number} numIframes number of steps between window.self and window.top
       * @property {Array[string|null]} stack our best guess at the location for each frame, in the direction top -> self.
       */
    
      /**
       * Walk up the windows to get the origin stack and best available referrer, canonical URL, etc.
       *
       * @returns {refererInfo}
       */
      function refererInfo() {
        var stack = [];
        var ancestors = getAncestorOrigins(win);
        var maxNestedIframes = _config_js__WEBPACK_IMPORTED_MODULE_0__.config.getConfig('maxNestedIframes');
        var currentWindow;
        var bestLocation;
        var bestCanonicalUrl;
        var reachedTop = false;
        var level = 0;
        var valuesFromAmp = false;
        var inAmpFrame = false;
        var hasTopLocation = false;
        do {
          var previousWindow = currentWindow;
          var wasInAmpFrame = inAmpFrame;
          var currentLocation = void 0;
          var crossOrigin = false;
          var foundLocation = null;
          inAmpFrame = false;
          currentWindow = currentWindow ? currentWindow.parent : win;
          try {
            currentLocation = currentWindow.location.href || null;
          } catch (e) {
            crossOrigin = true;
          }
          if (crossOrigin) {
            if (wasInAmpFrame) {
              var context = previousWindow.context;
              try {
                foundLocation = context.sourceUrl;
                bestLocation = foundLocation;
                hasTopLocation = true;
                valuesFromAmp = true;
                if (currentWindow === win.top) {
                  reachedTop = true;
                }
                if (context.canonicalUrl) {
                  bestCanonicalUrl = context.canonicalUrl;
                }
              } catch (e) {/* Do nothing */}
            } else {
              (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)('Trying to access cross domain iframe. Continuing without referrer and location');
              try {
                // the referrer to an iframe is the parent window
                var referrer = previousWindow.document.referrer;
                if (referrer) {
                  foundLocation = referrer;
                  if (currentWindow === win.top) {
                    reachedTop = true;
                  }
                }
              } catch (e) {/* Do nothing */}
              if (!foundLocation && ancestors && ancestors[level - 1]) {
                foundLocation = ancestors[level - 1];
                if (currentWindow === win.top) {
                  hasTopLocation = true;
                }
              }
              if (foundLocation && !valuesFromAmp) {
                bestLocation = foundLocation;
              }
            }
          } else {
            if (currentLocation) {
              foundLocation = currentLocation;
              bestLocation = foundLocation;
              valuesFromAmp = false;
              if (currentWindow === win.top) {
                reachedTop = true;
                var _canonicalUrl = getCanonicalUrl(currentWindow.document);
                if (_canonicalUrl) {
                  bestCanonicalUrl = _canonicalUrl;
                }
              }
            }
            if (currentWindow.context && currentWindow.context.sourceUrl) {
              inAmpFrame = true;
            }
          }
          stack.push(foundLocation);
          level++;
        } while (currentWindow !== win.top && level < maxNestedIframes);
        stack.reverse();
        var ref;
        try {
          ref = win.top.document.referrer;
        } catch (e) {}
        var location = reachedTop || hasTopLocation ? bestLocation : null;
        var canonicalUrl = _config_js__WEBPACK_IMPORTED_MODULE_0__.config.getConfig('pageUrl') || bestCanonicalUrl || null;
        var page = _config_js__WEBPACK_IMPORTED_MODULE_0__.config.getConfig('pageUrl') || location || ensureProtocol(canonicalUrl, win);
        if (location && location.indexOf('?') > -1 && page.indexOf('?') === -1) {
          page = "".concat(page).concat(location.substring(location.indexOf('?')));
        }
        return {
          reachedTop: reachedTop,
          isAmp: valuesFromAmp,
          numIframes: level - 1,
          stack: stack,
          topmostLocation: bestLocation || null,
          location: location,
          canonicalUrl: canonicalUrl,
          page: page,
          domain: parseDomain(page) || null,
          ref: ref || null,
          // TODO: the "legacy" refererInfo object is provided here, for now, to accomodate
          // adapters that decided to just send it verbatim to their backend.
          legacy: {
            reachedTop: reachedTop,
            isAmp: valuesFromAmp,
            numIframes: level - 1,
            stack: stack,
            referer: bestLocation || null,
            canonicalUrl: canonicalUrl
          }
        };
      }
      return refererInfo;
    }
    
    /**
     * @type {function(): refererInfo}
     */
    var getRefererInfo = detectReferer(window);
    
    /***/ }),
    
    /***/ "./src/secureCreatives.js":
    /*!********************************!*\
      !*** ./src/secureCreatives.js ***!
      \********************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "listenMessagesFromCreative": function() { return /* binding */ listenMessagesFromCreative; }
    /* harmony export */ });
    /* unused harmony exports getReplier, receiveMessage, _sendAdToCreative */
    /* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./events.js */ "./src/events.js");
    /* harmony import */ var _native_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./native.js */ "./src/native.js");
    /* harmony import */ var _constants_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.json */ "./src/constants.json");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils.js */ "./node_modules/dlv/index.js");
    /* harmony import */ var _auctionManager_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./auctionManager.js */ "./src/auctionManager.js");
    /* harmony import */ var _polyfill_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./polyfill.js */ "./src/polyfill.js");
    /* harmony import */ var _Renderer_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Renderer.js */ "./src/Renderer.js");
    /* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./config.js */ "./src/config.js");
    /* harmony import */ var _adRendering_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./adRendering.js */ "./src/adRendering.js");
    /* Secure Creatives
      Provides support for rendering creatives into cross domain iframes such as SafeFrame to prevent
       access to a publisher page from creative payloads.
     */
    
    
    
    
    
    
    
    
    
    
    var BID_WON = _constants_json__WEBPACK_IMPORTED_MODULE_0__.EVENTS.BID_WON;
    var STALE_RENDER = _constants_json__WEBPACK_IMPORTED_MODULE_0__.EVENTS.STALE_RENDER;
    var WON_AD_IDS = new WeakSet();
    var HANDLER_MAP = {
      'Prebid Request': handleRenderRequest,
      'Prebid Event': handleEventRequest
    };
    if (true) {
      Object.assign(HANDLER_MAP, {
        'Prebid Native': handleNativeRequest
      });
    }
    function listenMessagesFromCreative() {
      window.addEventListener('message', receiveMessage, false);
    }
    function getReplier(ev) {
      if (ev.origin == null && ev.ports.length === 0) {
        return function () {
          var msg = 'Cannot post message to a frame with null origin. Please update creatives to use MessageChannel, see https://github.com/prebid/Prebid.js/issues/7870';
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logError)(msg);
          throw new Error(msg);
        };
      } else if (ev.ports.length > 0) {
        return function (message) {
          ev.ports[0].postMessage(JSON.stringify(message));
        };
      } else {
        return function (message) {
          ev.source.postMessage(JSON.stringify(message), ev.origin);
        };
      }
    }
    function receiveMessage(ev) {
      var key = ev.message ? 'message' : 'data';
      var data = {};
      try {
        data = JSON.parse(ev[key]);
      } catch (e) {
        return;
      }
      if (data && data.adId && data.message) {
        var adObject = (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_2__.find)(_auctionManager_js__WEBPACK_IMPORTED_MODULE_3__.auctionManager.getBidsReceived(), function (bid) {
          return bid.adId === data.adId;
        });
        if (HANDLER_MAP.hasOwnProperty(data.message)) {
          HANDLER_MAP[data.message](getReplier(ev), data, adObject);
        }
      }
    }
    function handleRenderRequest(reply, data, adObject) {
      if (adObject == null) {
        (0,_adRendering_js__WEBPACK_IMPORTED_MODULE_4__.emitAdRenderFail)({
          reason: _constants_json__WEBPACK_IMPORTED_MODULE_0__.AD_RENDER_FAILED_REASON.CANNOT_FIND_AD,
          message: "Cannot find ad '".concat(data.adId, "' for cross-origin render request"),
          id: data.adId
        });
        return;
      }
      if (adObject.status === _constants_json__WEBPACK_IMPORTED_MODULE_0__.BID_STATUS.RENDERED) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)("Ad id ".concat(adObject.adId, " has been rendered before"));
        _events_js__WEBPACK_IMPORTED_MODULE_5__.emit(STALE_RENDER, adObject);
        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_6__["default"])(_config_js__WEBPACK_IMPORTED_MODULE_7__.config.getConfig('auctionOptions'), 'suppressStaleRender')) {
          return;
        }
      }
      try {
        _sendAdToCreative(adObject, reply);
      } catch (e) {
        (0,_adRendering_js__WEBPACK_IMPORTED_MODULE_4__.emitAdRenderFail)({
          reason: _constants_json__WEBPACK_IMPORTED_MODULE_0__.AD_RENDER_FAILED_REASON.EXCEPTION,
          message: e.message,
          id: data.adId,
          bid: adObject
        });
        return;
      }
    
      // save winning bids
      _auctionManager_js__WEBPACK_IMPORTED_MODULE_3__.auctionManager.addWinningBid(adObject);
      _events_js__WEBPACK_IMPORTED_MODULE_5__.emit(BID_WON, adObject);
    }
    function handleNativeRequest(reply, data, adObject) {
      // handle this script from native template in an ad server
      // window.parent.postMessage(JSON.stringify({
      //   message: 'Prebid Native',
      //   adId: '%%PATTERN:hb_adid%%'
      // }), '*');
      if (adObject == null) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logError)("Cannot find ad '".concat(data.adId, "' for x-origin event request"));
        return;
      }
      if (!WON_AD_IDS.has(adObject)) {
        WON_AD_IDS.add(adObject);
        _auctionManager_js__WEBPACK_IMPORTED_MODULE_3__.auctionManager.addWinningBid(adObject);
        _events_js__WEBPACK_IMPORTED_MODULE_5__.emit(BID_WON, adObject);
      }
      switch (data.action) {
        case 'assetRequest':
          reply((0,_native_js__WEBPACK_IMPORTED_MODULE_8__.getAssetMessage)(data, adObject));
          break;
        case 'allAssetRequest':
          reply((0,_native_js__WEBPACK_IMPORTED_MODULE_8__.getAllAssetsMessage)(data, adObject));
          break;
        case 'resizeNativeHeight':
          adObject.height = data.height;
          adObject.width = data.width;
          resizeRemoteCreative(adObject);
          break;
        default:
          (0,_native_js__WEBPACK_IMPORTED_MODULE_8__.fireNativeTrackers)(data, adObject);
      }
    }
    function handleEventRequest(reply, data, adObject) {
      if (adObject == null) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logError)("Cannot find ad '".concat(data.adId, "' for x-origin event request"));
        return;
      }
      if (adObject.status !== _constants_json__WEBPACK_IMPORTED_MODULE_0__.BID_STATUS.RENDERED) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)("Received x-origin event request without corresponding render request for ad '".concat(data.adId, "'"));
        return;
      }
      switch (data.event) {
        case _constants_json__WEBPACK_IMPORTED_MODULE_0__.EVENTS.AD_RENDER_FAILED:
          (0,_adRendering_js__WEBPACK_IMPORTED_MODULE_4__.emitAdRenderFail)({
            bid: adObject,
            id: data.adId,
            reason: data.info.reason,
            message: data.info.message
          });
          break;
        case _constants_json__WEBPACK_IMPORTED_MODULE_0__.EVENTS.AD_RENDER_SUCCEEDED:
          (0,_adRendering_js__WEBPACK_IMPORTED_MODULE_4__.emitAdRenderSucceeded)({
            doc: null,
            bid: adObject,
            id: data.adId
          });
          break;
        default:
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logError)("Received x-origin event request for unsupported event: '".concat(data.event, "' (adId: '").concat(data.adId, "')"));
      }
    }
    function _sendAdToCreative(adObject, reply) {
      var adId = adObject.adId,
        ad = adObject.ad,
        adUrl = adObject.adUrl,
        width = adObject.width,
        height = adObject.height,
        renderer = adObject.renderer,
        cpm = adObject.cpm,
        originalCpm = adObject.originalCpm;
      // rendering for outstream safeframe
      if ((0,_Renderer_js__WEBPACK_IMPORTED_MODULE_9__.isRendererRequired)(renderer)) {
        (0,_Renderer_js__WEBPACK_IMPORTED_MODULE_9__.executeRenderer)(renderer, adObject);
      } else if (adId) {
        resizeRemoteCreative(adObject);
        reply({
          message: 'Prebid Response',
          ad: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.replaceAuctionPrice)(ad, originalCpm || cpm),
          adUrl: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.replaceAuctionPrice)(adUrl, originalCpm || cpm),
          adId: adId,
          width: width,
          height: height
        });
      }
    }
    function resizeRemoteCreative(_ref) {
      var adId = _ref.adId,
        adUnitCode = _ref.adUnitCode,
        width = _ref.width,
        height = _ref.height;
      // resize both container div + iframe
      ['div', 'iframe'].forEach(function (elmType) {
        // not select element that gets removed after dfp render
        var element = getElementByAdUnit(elmType + ':not([style*="display: none"])');
        if (element) {
          var elementStyle = element.style;
          elementStyle.width = width ? width + 'px' : '100%';
          elementStyle.height = height + 'px';
        } else {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)("Unable to locate matching page element for adUnitCode ".concat(adUnitCode, ".  Can't resize it to ad's dimensions.  Please review setup."));
        }
      });
      function getElementByAdUnit(elmType) {
        var id = getElementIdBasedOnAdServer(adId, adUnitCode);
        var parentDivEle = document.getElementById(id);
        return parentDivEle && parentDivEle.querySelector(elmType);
      }
      function getElementIdBasedOnAdServer(adId, adUnitCode) {
        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isGptPubadsDefined)()) {
          return getDfpElementId(adId);
        } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isApnGetTagDefined)()) {
          return getAstElementId(adUnitCode);
        } else {
          return adUnitCode;
        }
      }
      function getDfpElementId(adId) {
        var slot = (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_2__.find)(window.googletag.pubads().getSlots(), function (slot) {
          return (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_2__.find)(slot.getTargetingKeys(), function (key) {
            return (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_2__.includes)(slot.getTargeting(key), adId);
          });
        });
        return slot ? slot.getSlotElementId() : null;
      }
      function getAstElementId(adUnitCode) {
        var astTag = window.apntag.getTag(adUnitCode);
        return astTag && astTag.targetId;
      }
    }
    
    /***/ }),
    
    /***/ "./src/sizeMapping.js":
    /*!****************************!*\
      !*** ./src/sizeMapping.js ***!
      \****************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "processAdUnitsForLabels": function() { return /* binding */ processAdUnitsForLabels; }
    /* harmony export */ });
    /* unused harmony exports setSizeConfig, getLabels, sizeSupported, resolveStatus */
    /* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");
    /* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config.js */ "./src/config.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "./node_modules/dlv/index.js");
    /* harmony import */ var _polyfill_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./polyfill.js */ "./src/polyfill.js");
    /* harmony import */ var _mediaTypes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mediaTypes.js */ "./src/mediaTypes.js");
    
    
    
    
    
    var sizeConfig = [];
    
    /**
     * @typedef {object} SizeConfig
     *
     * @property {string} [mediaQuery] A CSS media query string that will to be interpreted by window.matchMedia.  If the
     *  media query matches then the this config will be active and sizesSupported will filter bid and adUnit sizes.  If
     *  this property is not present then this SizeConfig will only be active if triggered manually by a call to
     *  pbjs.setConfig({labels:['label']) specifying one of the labels present on this SizeConfig.
     * @property {Array<Array>} sizesSupported The sizes to be accepted if this SizeConfig is enabled.
     * @property {Array<string>} labels The active labels to match this SizeConfig to an adUnits and/or bidders.
     */
    
    /**
     *
     * @param {Array<SizeConfig>} config
     */
    function setSizeConfig(config) {
      sizeConfig = config;
    }
    _config_js__WEBPACK_IMPORTED_MODULE_0__.config.getConfig('sizeConfig', function (config) {
      return setSizeConfig(config.sizeConfig);
    });
    
    /**
     * Returns object describing the status of labels on the adUnit or bidder along with labels passed into requestBids
     * @param bidOrAdUnit the bidder or adUnit to get label info on
     * @param activeLabels the labels passed to requestBids
     * @returns {LabelDescriptor}
     */
    function getLabels(bidOrAdUnit, activeLabels) {
      if (bidOrAdUnit.labelAll) {
        return {
          labelAll: true,
          labels: bidOrAdUnit.labelAll,
          activeLabels: activeLabels
        };
      }
      return {
        labelAll: false,
        labels: bidOrAdUnit.labelAny,
        activeLabels: activeLabels
      };
    }
    
    /**
     * Determines whether a single size is valid given configured sizes
     * @param {Array} size [width, height]
     * @param {Array<SizeConfig>} configs
     * @returns {boolean}
     */
    function sizeSupported(size) {
      var configs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : sizeConfig;
      var maps = evaluateSizeConfig(configs);
      if (!maps.shouldFilter) {
        return true;
      }
      return !!maps.sizesSupported[size];
    }
    
    /**
     * Resolves the unique set of the union of all sizes and labels that are active from a SizeConfig.mediaQuery match
     * @param {Array<string>} labels Labels specified on adUnit or bidder
     * @param {boolean} labelAll if true, all labels must match to be enabled
     * @param {Array<string>} activeLabels Labels passed in through requestBids
     * @param {object} mediaTypes A mediaTypes object describing the various media types (banner, video, native)
     * @param {Array<Array<number>>} sizes Sizes specified on adUnit (deprecated)
     * @param {Array<SizeConfig>} configs
     * @returns {{labels: Array<string>, sizes: Array<Array<number>>}}
     */
    function resolveStatus() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$labels = _ref.labels,
        labels = _ref$labels === void 0 ? [] : _ref$labels,
        _ref$labelAll = _ref.labelAll,
        labelAll = _ref$labelAll === void 0 ? false : _ref$labelAll,
        _ref$activeLabels = _ref.activeLabels,
        activeLabels = _ref$activeLabels === void 0 ? [] : _ref$activeLabels;
      var mediaTypes = arguments.length > 1 ? arguments[1] : undefined;
      var sizes = arguments.length > 2 ? arguments[2] : undefined;
      var configs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : sizeConfig;
      var maps = evaluateSizeConfig(configs);
      if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(mediaTypes)) {
        // add support for deprecated adUnit.sizes by creating correct banner mediaTypes if they don't already exist
        if (sizes) {
          mediaTypes = {
            banner: {
              sizes: sizes
            }
          };
        } else {
          mediaTypes = {};
        }
      }
      var oldSizes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"])(mediaTypes, 'banner.sizes');
      if (maps.shouldFilter && oldSizes) {
        mediaTypes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.deepClone)(mediaTypes);
        mediaTypes.banner.sizes = oldSizes.filter(function (size) {
          return maps.sizesSupported[size];
        });
      }
      var results = {
        active: !mediaTypes.hasOwnProperty(_mediaTypes_js__WEBPACK_IMPORTED_MODULE_3__.BANNER) || (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"])(mediaTypes, 'banner.sizes.length') > 0 && (labels.length === 0 || !labelAll && (labels.some(function (label) {
          return maps.labels[label];
        }) || labels.some(function (label) {
          return (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_4__.includes)(activeLabels, label);
        })) || labelAll && labels.reduce(function (result, label) {
          return !result ? result : maps.labels[label] || (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_4__.includes)(activeLabels, label);
        }, true)),
        mediaTypes: mediaTypes
      };
      if (oldSizes && oldSizes.length !== mediaTypes.banner.sizes.length) {
        results.filterResults = {
          before: oldSizes,
          after: mediaTypes.banner.sizes
        };
      }
      return results;
    }
    function evaluateSizeConfig(configs) {
      return configs.reduce(function (results, config) {
        if ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_5__["default"])(config) === 'object' && typeof config.mediaQuery === 'string' && config.mediaQuery.length > 0) {
          var ruleMatch = false;
          try {
            ruleMatch = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getWindowTop)().matchMedia(config.mediaQuery).matches;
          } catch (e) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)('Unfriendly iFrame blocks sizeConfig from being correctly evaluated');
            ruleMatch = matchMedia(config.mediaQuery).matches;
          }
          if (ruleMatch) {
            if (Array.isArray(config.sizesSupported)) {
              results.shouldFilter = true;
            }
            ['labels', 'sizesSupported'].forEach(function (type) {
              return (config[type] || []).forEach(function (thing) {
                return results[type][thing] = true;
              });
            });
          }
        } else {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)('sizeConfig rule missing required property "mediaQuery"');
        }
        return results;
      }, {
        labels: {},
        sizesSupported: {},
        shouldFilter: false
      });
    }
    function processAdUnitsForLabels(adUnits, activeLabels) {
      return adUnits.reduce(function (adUnits, adUnit) {
        var _resolveStatus = resolveStatus(getLabels(adUnit, activeLabels), adUnit.mediaTypes, adUnit.sizes),
          active = _resolveStatus.active,
          mediaTypes = _resolveStatus.mediaTypes,
          filterResults = _resolveStatus.filterResults;
        if (!active) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)("Size mapping disabled adUnit \"".concat(adUnit.code, "\""));
        } else {
          if (filterResults) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)("Size mapping filtered adUnit \"".concat(adUnit.code, "\" banner sizes from "), filterResults.before, 'to ', filterResults.after);
          }
          adUnit.mediaTypes = mediaTypes;
          adUnit.bids = adUnit.bids.reduce(function (bids, bid) {
            var _resolveStatus2 = resolveStatus(getLabels(bid, activeLabels), adUnit.mediaTypes),
              active = _resolveStatus2.active,
              mediaTypes = _resolveStatus2.mediaTypes,
              filterResults = _resolveStatus2.filterResults;
            if (!active) {
              (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)("Size mapping deactivated adUnit \"".concat(adUnit.code, "\" bidder \"").concat(bid.bidder, "\""));
            } else {
              if (filterResults) {
                (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)("Size mapping filtered adUnit \"".concat(adUnit.code, "\" bidder \"").concat(bid.bidder, "\" banner sizes from "), filterResults.before, 'to ', filterResults.after);
                bid.mediaTypes = mediaTypes;
              }
              bids.push(bid);
            }
            return bids;
          }, []);
          adUnits.push(adUnit);
        }
        return adUnits;
      }, []);
    }
    
    /***/ }),
    
    /***/ "./src/storageManager.js":
    /*!*******************************!*\
      !*** ./src/storageManager.js ***!
      \*******************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "getCoreStorageManager": function() { return /* binding */ getCoreStorageManager; },
    /* harmony export */   "getStorageManager": function() { return /* binding */ getStorageManager; },
    /* harmony export */   "storageCallbacks": function() { return /* binding */ storageCallbacks; }
    /* harmony export */ });
    /* unused harmony exports newStorageManager, validateStorageEnforcement, resetData */
    /* harmony import */ var _hook_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./hook.js */ "./src/hook.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
    /* harmony import */ var _bidderSettings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bidderSettings.js */ "./src/bidderSettings.js");
    /* harmony import */ var _consentHandler_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./consentHandler.js */ "./src/consentHandler.js");
    
    
    
    
    var moduleTypeWhiteList = ['core', 'prebid-module'];
    var storageCallbacks = [];
    
    /**
     * Storage options
     * @typedef {Object} storageOptions
     * @property {Number=} gvlid - Vendor id
     * @property {string} moduleName? - Module name
     * @property {string=} bidderCode? - Bidder code
     * @property {string=} moduleType - Module type, value can be anyone of core or prebid-module
     */
    
    /**
     * Returns list of storage related functions with gvlid, module name and module type in its scope.
     * All three argument are optional here. Below shows the usage of of these
     * - GVL Id: Pass GVL id if you are a vendor
     * - Bidder code: All bid adapters need to pass bidderCode
     * - Module name: All other modules need to pass module name
     * - Module type: Some modules may need these functions but are not vendor. e.g prebid core files in src and modules like currency.
     * @param {storageOptions} options
     */
    function newStorageManager() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        gvlid = _ref.gvlid,
        moduleName = _ref.moduleName,
        bidderCode = _ref.bidderCode,
        moduleType = _ref.moduleType;
      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref2$bidderSettings = _ref2.bidderSettings,
        bidderSettings = _ref2$bidderSettings === void 0 ? _bidderSettings_js__WEBPACK_IMPORTED_MODULE_0__.bidderSettings : _ref2$bidderSettings;
      function isBidderAllowed() {
        if (bidderCode == null) {
          return true;
        }
        var storageAllowed = bidderSettings.get(bidderCode, 'storageAllowed');
        return storageAllowed == null ? false : storageAllowed;
      }
      if (moduleTypeWhiteList.includes(moduleType)) {
        gvlid = gvlid || _consentHandler_js__WEBPACK_IMPORTED_MODULE_1__.VENDORLESS_GVLID;
      }
      function isValid(cb) {
        if (!isBidderAllowed()) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logInfo)("bidderSettings denied access to device storage for bidder '".concat(bidderCode, "'"));
          var result = {
            valid: false
          };
          return cb(result);
        } else {
          var value;
          var hookDetails = {
            hasEnforcementHook: false
          };
          validateStorageEnforcement(gvlid, bidderCode || moduleName, hookDetails, function (result) {
            if (result && result.hasEnforcementHook) {
              value = cb(result);
            } else {
              var _result = {
                hasEnforcementHook: false,
                valid: (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.hasDeviceAccess)()
              };
              value = cb(_result);
            }
          });
          return value;
        }
      }
    
      /**
       * @param {string} key
       * @param {string} value
       * @param {string} [expires='']
       * @param {string} [sameSite='/']
       * @param {string} [domain] domain (e.g., 'example.com' or 'subdomain.example.com').
       * If not specified, defaults to the host portion of the current document location.
       * If a domain is specified, subdomains are always included.
       * Domain must match the domain of the JavaScript origin. Setting cookies to foreign domains will be silently ignored.
       */
      var setCookie = function setCookie(key, value, expires, sameSite, domain, done) {
        var cb = function cb(result) {
          if (result && result.valid) {
            var domainPortion = domain && domain !== '' ? " ;domain=".concat(encodeURIComponent(domain)) : '';
            var expiresPortion = expires && expires !== '' ? " ;expires=".concat(expires) : '';
            var isNone = sameSite != null && sameSite.toLowerCase() == 'none';
            var secure = isNone ? '; Secure' : '';
            document.cookie = "".concat(key, "=").concat(encodeURIComponent(value)).concat(expiresPortion, "; path=/").concat(domainPortion).concat(sameSite ? "; SameSite=".concat(sameSite) : '').concat(secure);
          }
        };
        if (done && typeof done === 'function') {
          storageCallbacks.push(function () {
            var result = isValid(cb);
            done(result);
          });
        } else {
          return isValid(cb);
        }
      };
    
      /**
       * @param {string} name
       * @returns {(string|null)}
       */
      var getCookie = function getCookie(name, done) {
        var cb = function cb(result) {
          if (result && result.valid) {
            var m = window.document.cookie.match('(^|;)\\s*' + name + '\\s*=\\s*([^;]*)\\s*(;|$)');
            return m ? decodeURIComponent(m[2]) : null;
          }
          return null;
        };
        if (done && typeof done === 'function') {
          storageCallbacks.push(function () {
            var result = isValid(cb);
            done(result);
          });
        } else {
          return isValid(cb);
        }
      };
    
      /**
       * @returns {boolean}
       */
      var localStorageIsEnabled = function localStorageIsEnabled(done) {
        var cb = function cb(result) {
          if (result && result.valid) {
            try {
              localStorage.setItem('prebid.cookieTest', '1');
              return localStorage.getItem('prebid.cookieTest') === '1';
            } catch (error) {} finally {
              try {
                localStorage.removeItem('prebid.cookieTest');
              } catch (error) {}
            }
          }
          return false;
        };
        if (done && typeof done === 'function') {
          storageCallbacks.push(function () {
            var result = isValid(cb);
            done(result);
          });
        } else {
          return isValid(cb);
        }
      };
    
      /**
       * @returns {boolean}
       */
      var cookiesAreEnabled = function cookiesAreEnabled(done) {
        var cb = function cb(result) {
          if (result && result.valid) {
            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.checkCookieSupport)();
          }
          return false;
        };
        if (done && typeof done === 'function') {
          storageCallbacks.push(function () {
            var result = isValid(cb);
            done(result);
          });
        } else {
          return isValid(cb);
        }
      };
    
      /**
       * @param {string} key
       * @param {string} value
       */
      var setDataInLocalStorage = function setDataInLocalStorage(key, value, done) {
        var cb = function cb(result) {
          if (result && result.valid && hasLocalStorage()) {
            window.localStorage.setItem(key, value);
          }
        };
        if (done && typeof done === 'function') {
          storageCallbacks.push(function () {
            var result = isValid(cb);
            done(result);
          });
        } else {
          return isValid(cb);
        }
      };
    
      /**
       * @param {string} key
       * @returns {(string|null)}
       */
      var getDataFromLocalStorage = function getDataFromLocalStorage(key, done) {
        var cb = function cb(result) {
          if (result && result.valid && hasLocalStorage()) {
            return window.localStorage.getItem(key);
          }
          return null;
        };
        if (done && typeof done === 'function') {
          storageCallbacks.push(function () {
            var result = isValid(cb);
            done(result);
          });
        } else {
          return isValid(cb);
        }
      };
    
      /**
       * @param {string} key
       */
      var removeDataFromLocalStorage = function removeDataFromLocalStorage(key, done) {
        var cb = function cb(result) {
          if (result && result.valid && hasLocalStorage()) {
            window.localStorage.removeItem(key);
          }
        };
        if (done && typeof done === 'function') {
          storageCallbacks.push(function () {
            var result = isValid(cb);
            done(result);
          });
        } else {
          return isValid(cb);
        }
      };
    
      /**
       * @returns {boolean}
       */
      var hasLocalStorage = function hasLocalStorage(done) {
        var cb = function cb(result) {
          if (result && result.valid) {
            try {
              return !!window.localStorage;
            } catch (e) {
              (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)('Local storage api disabled');
            }
          }
          return false;
        };
        if (done && typeof done === 'function') {
          storageCallbacks.push(function () {
            var result = isValid(cb);
            done(result);
          });
        } else {
          return isValid(cb);
        }
      };
    
      /**
       * Returns all cookie values from the jar whose names contain the `keyLike`
       * Needs to exist in `utils.js` as it follows the StorageHandler interface defined in live-connect-js. If that module were to be removed, this function can go as well.
       * @param {string} keyLike
       * @return {[]}
       */
      var findSimilarCookies = function findSimilarCookies(keyLike, done) {
        var cb = function cb(result) {
          if (result && result.valid) {
            var all = [];
            if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.hasDeviceAccess)()) {
              var cookies = document.cookie.split(';');
              while (cookies.length) {
                var cookie = cookies.pop();
                var separatorIndex = cookie.indexOf('=');
                separatorIndex = separatorIndex < 0 ? cookie.length : separatorIndex;
                var cookieName = decodeURIComponent(cookie.slice(0, separatorIndex).replace(/^\s+/, ''));
                if (cookieName.indexOf(keyLike) >= 0) {
                  all.push(decodeURIComponent(cookie.slice(separatorIndex + 1)));
                }
              }
            }
            return all;
          }
        };
        if (done && typeof done === 'function') {
          storageCallbacks.push(function () {
            var result = isValid(cb);
            done(result);
          });
        } else {
          return isValid(cb);
        }
      };
      return {
        setCookie: setCookie,
        getCookie: getCookie,
        localStorageIsEnabled: localStorageIsEnabled,
        cookiesAreEnabled: cookiesAreEnabled,
        setDataInLocalStorage: setDataInLocalStorage,
        getDataFromLocalStorage: getDataFromLocalStorage,
        removeDataFromLocalStorage: removeDataFromLocalStorage,
        hasLocalStorage: hasLocalStorage,
        findSimilarCookies: findSimilarCookies
      };
    }
    
    /**
     * This hook validates the storage enforcement if gdprEnforcement module is included
     */
    var validateStorageEnforcement = (0,_hook_js__WEBPACK_IMPORTED_MODULE_3__.hook)('async', function (gvlid, moduleName, hookDetails, callback) {
      callback(hookDetails);
    }, 'validateStorageEnforcement');
    
    /**
     * This function returns storage functions to access cookies and localstorage. This function will bypass the gdpr enforcement requirement. Prebid as a software needs to use storage in some scenarios and is not a vendor so GDPR enforcement rules does not apply on Prebid.
     * @param {string} moduleName Module name
     */
    function getCoreStorageManager(moduleName) {
      return newStorageManager({
        moduleName: moduleName,
        moduleType: 'core'
      });
    }
    
    /**
     * Note: Core modules or Prebid modules like Currency, SizeMapping should use getCoreStorageManager
     * This function returns storage functions to access cookies and localstorage. Bidders and User id modules should import this and use it in their module if needed.
     * Bid adapters should always provide `bidderCode`. GVL ID and Module name are optional param but gvl id is needed for when gdpr enforcement module is used.
     * @param {Number=} gvlid? Vendor id - required for proper GDPR integration
     * @param {string=} bidderCode? - required for bid adapters
     * @param {string=} moduleName? module name
     */
    function getStorageManager() {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        gvlid = _ref3.gvlid,
        moduleName = _ref3.moduleName,
        bidderCode = _ref3.bidderCode;
      if (arguments.length > 1 || arguments.length > 0 && !(0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isPlainObject)(arguments[0])) {
        throw new Error('Invalid invocation for getStorageManager');
      }
      return newStorageManager({
        gvlid: gvlid,
        moduleName: moduleName,
        bidderCode: bidderCode
      });
    }
    function resetData() {
      storageCallbacks = [];
    }
    
    /***/ }),
    
    /***/ "./src/targeting.js":
    /*!**************************!*\
      !*** ./src/targeting.js ***!
      \**************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "isBidUsable": function() { return /* binding */ isBidUsable; },
    /* harmony export */   "targeting": function() { return /* binding */ targeting; }
    /* harmony export */ });
    /* unused harmony exports TARGETING_KEYS, filters, getHighestCpmBidsFromBidPool, sortByDealAndPriceBucketOrCpm, newTargeting */
    /* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
    /* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils.js */ "./node_modules/dlv/index.js");
    /* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config.js */ "./src/config.js");
    /* harmony import */ var _native_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./native.js */ "./src/native.js");
    /* harmony import */ var _auctionManager_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./auctionManager.js */ "./src/auctionManager.js");
    /* harmony import */ var _mediaTypes_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./mediaTypes.js */ "./src/mediaTypes.js");
    /* harmony import */ var _hook_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hook.js */ "./src/hook.js");
    /* harmony import */ var _bidderSettings_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./bidderSettings.js */ "./src/bidderSettings.js");
    /* harmony import */ var _polyfill_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./polyfill.js */ "./src/polyfill.js");
    /* harmony import */ var _constants_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.json */ "./src/constants.json");
    
    
    
    
    
    
    
    
    
    
    
    var pbTargetingKeys = [];
    var MAX_DFP_KEYLENGTH = 20;
    var DEFAULT_TTL_BUFFER = 1;
    _config_js__WEBPACK_IMPORTED_MODULE_0__.config.getConfig('ttlBuffer', function (cfg) {
      if (typeof cfg.ttlBuffer === 'number') {
        DEFAULT_TTL_BUFFER = cfg.ttlBuffer;
      } else {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logError)('Invalid value for ttlBuffer', cfg.ttlBuffer);
      }
    });
    var CFG_ALLOW_TARGETING_KEYS = "targetingControls.allowTargetingKeys";
    var CFG_ADD_TARGETING_KEYS = "targetingControls.addTargetingKeys";
    var TARGETING_KEY_CONFIGURATION_ERROR_MSG = "Only one of \"".concat(CFG_ALLOW_TARGETING_KEYS, "\" or \"").concat(CFG_ADD_TARGETING_KEYS, "\" can be set");
    var TARGETING_KEYS = Object.keys(_constants_json__WEBPACK_IMPORTED_MODULE_2__.TARGETING_KEYS).map(function (key) {
      return _constants_json__WEBPACK_IMPORTED_MODULE_2__.TARGETING_KEYS[key];
    });
    
    // return unexpired bids
    var isBidNotExpired = function isBidNotExpired(bid) {
      return bid.responseTimestamp + (bid.ttl - (bid.hasOwnProperty('ttlBuffer') ? bid.ttlBuffer : DEFAULT_TTL_BUFFER)) * 1000 > (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.timestamp)();
    };
    
    // return bids whose status is not set. Winning bids can only have a status of `rendered`.
    var isUnusedBid = function isUnusedBid(bid) {
      return bid && (bid.status && !(0,_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.includes)([_constants_json__WEBPACK_IMPORTED_MODULE_2__.BID_STATUS.RENDERED], bid.status) || !bid.status);
    };
    var filters = {
      isActualBid: function isActualBid(bid) {
        return bid.getStatusCode() === _constants_json__WEBPACK_IMPORTED_MODULE_2__.STATUS.GOOD;
      },
      isBidNotExpired: isBidNotExpired,
      isUnusedBid: isUnusedBid
    };
    function isBidUsable(bid) {
      return !Object.values(filters).some(function (predicate) {
        return !predicate(bid);
      });
    }
    
    // If two bids are found for same adUnitCode, we will use the highest one to take part in auction
    // This can happen in case of concurrent auctions
    // If adUnitBidLimit is set above 0 return top N number of bids
    var getHighestCpmBidsFromBidPool = (0,_hook_js__WEBPACK_IMPORTED_MODULE_4__.hook)('sync', function (bidsReceived, highestCpmCallback) {
      var adUnitBidLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var hasModified = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      if (!hasModified) {
        var bids = [];
        var dealPrioritization = _config_js__WEBPACK_IMPORTED_MODULE_0__.config.getConfig('sendBidsControl.dealPrioritization');
        // bucket by adUnitcode
        var buckets = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.groupBy)(bidsReceived, 'adUnitCode');
        // filter top bid for each bucket by bidder
        Object.keys(buckets).forEach(function (bucketKey) {
          var bucketBids = [];
          var bidsByBidder = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.groupBy)(buckets[bucketKey], 'bidderCode');
          Object.keys(bidsByBidder).forEach(function (key) {
            return bucketBids.push(bidsByBidder[key].reduce(highestCpmCallback));
          });
          // if adUnitBidLimit is set, pass top N number bids
          if (adUnitBidLimit > 0) {
            bucketBids = dealPrioritization ? bucketBids.sort(sortByDealAndPriceBucketOrCpm(true)) : bucketBids.sort(function (a, b) {
              return b.cpm - a.cpm;
            });
            bids.push.apply(bids, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_5__["default"])(bucketBids.slice(0, adUnitBidLimit)));
          } else {
            bids.push.apply(bids, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_5__["default"])(bucketBids));
          }
        });
        return bids;
      }
      return bidsReceived;
    });
    
    /**
    * A descending sort function that will sort the list of objects based on the following two dimensions:
    *  - bids with a deal are sorted before bids w/o a deal
    *  - then sort bids in each grouping based on the hb_pb value
    * eg: the following list of bids would be sorted like:
    *  [{
    *    "hb_adid": "vwx",
    *    "hb_pb": "28",
    *    "hb_deal": "7747"
    *  }, {
    *    "hb_adid": "jkl",
    *    "hb_pb": "10",
    *    "hb_deal": "9234"
    *  }, {
    *    "hb_adid": "stu",
    *    "hb_pb": "50"
    *  }, {
    *    "hb_adid": "def",
    *    "hb_pb": "2"
    *  }]
    */
    function sortByDealAndPriceBucketOrCpm() {
      var useCpm = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      return function (a, b) {
        if (a.adserverTargeting.hb_deal !== undefined && b.adserverTargeting.hb_deal === undefined) {
          return -1;
        }
        if (a.adserverTargeting.hb_deal === undefined && b.adserverTargeting.hb_deal !== undefined) {
          return 1;
        }
    
        // assuming both values either have a deal or don't have a deal - sort by the hb_pb param
        if (useCpm) {
          return b.cpm - a.cpm;
        }
        return b.adserverTargeting.hb_pb - a.adserverTargeting.hb_pb;
      };
    }
    
    /**
     * @typedef {Object.<string,string>} targeting
     * @property {string} targeting_key
     */
    
    /**
     * @typedef {Object.<string,Object.<string,string[]>[]>[]} targetingArray
     */
    
    function newTargeting(auctionManager) {
      var targeting = {};
      var latestAuctionForAdUnit = {};
      targeting.setLatestAuctionForAdUnit = function (adUnitCode, auctionId) {
        latestAuctionForAdUnit[adUnitCode] = auctionId;
      };
      targeting.resetPresetTargeting = function (adUnitCode, customSlotMatching) {
        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isGptPubadsDefined)()) {
          var adUnitCodes = getAdUnitCodes(adUnitCode);
          var adUnits = auctionManager.getAdUnits().filter(function (adUnit) {
            return (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.includes)(adUnitCodes, adUnit.code);
          });
          var unsetKeys = pbTargetingKeys.reduce(function (reducer, key) {
            reducer[key] = null;
            return reducer;
          }, {});
          window.googletag.pubads().getSlots().forEach(function (slot) {
            var customSlotMatchingFunc = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFn)(customSlotMatching) && customSlotMatching(slot);
            // reset only registered adunits
            adUnits.forEach(function (unit) {
              if (unit.code === slot.getAdUnitPath() || unit.code === slot.getSlotElementId() || (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFn)(customSlotMatchingFunc) && customSlotMatchingFunc(unit.code)) {
                slot.updateTargetingFromMap(unsetKeys);
              }
            });
          });
        }
      };
      targeting.resetPresetTargetingAST = function (adUnitCode) {
        var adUnitCodes = getAdUnitCodes(adUnitCode);
        adUnitCodes.forEach(function (unit) {
          var astTag = window.apntag.getTag(unit);
          if (astTag && astTag.keywords) {
            var currentKeywords = Object.keys(astTag.keywords);
            var newKeywords = {};
            currentKeywords.forEach(function (key) {
              if (!(0,_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.includes)(pbTargetingKeys, key.toLowerCase())) {
                newKeywords[key] = astTag.keywords[key];
              }
            });
            window.apntag.modifyTag(unit, {
              keywords: newKeywords
            });
          }
        });
      };
    
      /**
       * checks if bid has targeting set and belongs based on matching ad unit codes
       * @return {boolean} true or false
       */
      function bidShouldBeAddedToTargeting(bid, adUnitCodes) {
        return bid.adserverTargeting && adUnitCodes && ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(adUnitCodes) && (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.includes)(adUnitCodes, bid.adUnitCode) || typeof adUnitCodes === 'string' && bid.adUnitCode === adUnitCodes);
      }
      ;
    
      /**
       * Returns targeting for any bids which have deals if alwaysIncludeDeals === true
       */
      function getDealBids(adUnitCodes, bidsReceived) {
        if (_config_js__WEBPACK_IMPORTED_MODULE_0__.config.getConfig('targetingControls.alwaysIncludeDeals') === true) {
          var standardKeys =  true ? TARGETING_KEYS.concat(_native_js__WEBPACK_IMPORTED_MODULE_6__.NATIVE_TARGETING_KEYS) : 0;
    
          // we only want the top bid from bidders who have multiple entries per ad unit code
          var bids = getHighestCpmBidsFromBidPool(bidsReceived, _utils_js__WEBPACK_IMPORTED_MODULE_1__.getHighestCpm);
    
          // populate targeting keys for the remaining bids if they have a dealId
          return bids.map(function (bid) {
            if (bid.dealId && bidShouldBeAddedToTargeting(bid, adUnitCodes)) {
              return (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7__["default"])({}, bid.adUnitCode, getTargetingMap(bid, standardKeys.filter(function (key) {
                return typeof bid.adserverTargeting[key] !== 'undefined';
              })));
            }
          }).filter(function (bid) {
            return bid;
          }); // removes empty elements in array
        }
    
        return [];
      }
      ;
    
      /**
       * Returns filtered ad server targeting for custom and allowed keys.
       * @param {targetingArray} targeting
       * @param {string[]} allowedKeys
       * @return {targetingArray} filtered targeting
       */
      function getAllowedTargetingKeyValues(targeting, allowedKeys) {
        var defaultKeyring = Object.assign({}, _constants_json__WEBPACK_IMPORTED_MODULE_2__.TARGETING_KEYS, _constants_json__WEBPACK_IMPORTED_MODULE_2__.NATIVE_KEYS);
        var defaultKeys = Object.keys(defaultKeyring);
        var keyDispositions = {};
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)("allowTargetingKeys - allowed keys [ ".concat(allowedKeys.map(function (k) {
          return defaultKeyring[k];
        }).join(', '), " ]"));
        targeting.map(function (adUnit) {
          var adUnitCode = Object.keys(adUnit)[0];
          var keyring = adUnit[adUnitCode];
          var keys = keyring.filter(function (kvPair) {
            var key = Object.keys(kvPair)[0];
            // check if key is in default keys, if not, it's custom, we won't remove it.
            var isCustom = defaultKeys.filter(function (defaultKey) {
              return key.indexOf(defaultKeyring[defaultKey]) === 0;
            }).length === 0;
            // check if key explicitly allowed, if not, we'll remove it.
            var found = isCustom || (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.find)(allowedKeys, function (allowedKey) {
              var allowedKeyName = defaultKeyring[allowedKey];
              // we're looking to see if the key exactly starts with one of our default keys.
              // (which hopefully means it's not custom)
              var found = key.indexOf(allowedKeyName) === 0;
              return found;
            });
            keyDispositions[key] = !found;
            return found;
          });
          adUnit[adUnitCode] = keys;
        });
        var removedKeys = Object.keys(keyDispositions).filter(function (d) {
          return keyDispositions[d];
        });
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)("allowTargetingKeys - removed keys [ ".concat(removedKeys.join(', '), " ]"));
        // remove any empty targeting objects, as they're unnecessary.
        var filteredTargeting = targeting.filter(function (adUnit) {
          var adUnitCode = Object.keys(adUnit)[0];
          var keyring = adUnit[adUnitCode];
          return keyring.length > 0;
        });
        return filteredTargeting;
      }
    
      /**
       * Returns all ad server targeting for all ad units.
       * @param {string=} adUnitCode
       * @return {Object.<string,targeting>} targeting
       */
      targeting.getAllTargeting = function (adUnitCode) {
        var bidsReceived = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getBidsReceived();
        var adUnitCodes = getAdUnitCodes(adUnitCode);
    
        // Get targeting for the winning bid. Add targeting for any bids that have
        // `alwaysUseBid=true`. If sending all bids is enabled, add targeting for losing bids.
        var targeting = getWinningBidTargeting(adUnitCodes, bidsReceived).concat(getCustomBidTargeting(adUnitCodes, bidsReceived)).concat(_config_js__WEBPACK_IMPORTED_MODULE_0__.config.getConfig('enableSendAllBids') ? getBidLandscapeTargeting(adUnitCodes, bidsReceived) : getDealBids(adUnitCodes, bidsReceived)).concat(getAdUnitTargeting(adUnitCodes));
    
        // store a reference of the targeting keys
        targeting.map(function (adUnitCode) {
          Object.keys(adUnitCode).map(function (key) {
            adUnitCode[key].map(function (targetKey) {
              if (pbTargetingKeys.indexOf(Object.keys(targetKey)[0]) === -1) {
                pbTargetingKeys = Object.keys(targetKey).concat(pbTargetingKeys);
              }
            });
          });
        });
        var defaultKeys = Object.keys(Object.assign({}, _constants_json__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_TARGETING_KEYS, _constants_json__WEBPACK_IMPORTED_MODULE_2__.NATIVE_KEYS));
        var allowedKeys = _config_js__WEBPACK_IMPORTED_MODULE_0__.config.getConfig(CFG_ALLOW_TARGETING_KEYS);
        var addedKeys = _config_js__WEBPACK_IMPORTED_MODULE_0__.config.getConfig(CFG_ADD_TARGETING_KEYS);
        if (addedKeys != null && allowedKeys != null) {
          throw new Error(TARGETING_KEY_CONFIGURATION_ERROR_MSG);
        } else if (addedKeys != null) {
          allowedKeys = defaultKeys.concat(addedKeys);
        } else {
          allowedKeys = allowedKeys || defaultKeys;
        }
        if (Array.isArray(allowedKeys) && allowedKeys.length > 0) {
          targeting = getAllowedTargetingKeyValues(targeting, allowedKeys);
        }
        targeting = flattenTargeting(targeting);
        var auctionKeysThreshold = _config_js__WEBPACK_IMPORTED_MODULE_0__.config.getConfig('targetingControls.auctionKeyMaxChars');
        if (auctionKeysThreshold) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)("Detected 'targetingControls.auctionKeyMaxChars' was active for this auction; set with a limit of ".concat(auctionKeysThreshold, " characters.  Running checks on auction keys..."));
          targeting = filterTargetingKeys(targeting, auctionKeysThreshold);
        }
    
        // make sure at least there is a entry per adUnit code in the targetingSet so receivers of SET_TARGETING call's can know what ad units are being invoked
        adUnitCodes.forEach(function (code) {
          if (!targeting[code]) {
            targeting[code] = {};
          }
        });
        return targeting;
      };
    
      // warn about conflicting configuration
      _config_js__WEBPACK_IMPORTED_MODULE_0__.config.getConfig('targetingControls', function (config) {
        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_8__["default"])(config, CFG_ALLOW_TARGETING_KEYS) != null && (0,_utils_js__WEBPACK_IMPORTED_MODULE_8__["default"])(config, CFG_ADD_TARGETING_KEYS) != null) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logError)(TARGETING_KEY_CONFIGURATION_ERROR_MSG);
        }
      });
    
      // create an encoded string variant based on the keypairs of the provided object
      //  - note this will encode the characters between the keys (ie = and &)
      function convertKeysToQueryForm(keyMap) {
        return Object.keys(keyMap).reduce(function (queryString, key) {
          var encodedKeyPair = "".concat(key, "%3d").concat(encodeURIComponent(keyMap[key]), "%26");
          return queryString += encodedKeyPair;
        }, '');
      }
      function filterTargetingKeys(targeting, auctionKeysThreshold) {
        // read each targeting.adUnit object and sort the adUnits into a list of adUnitCodes based on priorization setting (eg CPM)
        var targetingCopy = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.deepClone)(targeting);
        var targetingMap = Object.keys(targetingCopy).map(function (adUnitCode) {
          return {
            adUnitCode: adUnitCode,
            adserverTargeting: targetingCopy[adUnitCode]
          };
        }).sort(sortByDealAndPriceBucketOrCpm());
    
        // iterate through the targeting based on above list and transform the keys into the query-equivalent and count characters
        return targetingMap.reduce(function (accMap, currMap, index, arr) {
          var adUnitQueryString = convertKeysToQueryForm(currMap.adserverTargeting);
    
          // for the last adUnit - trim last encoded ampersand from the converted query string
          if (index + 1 === arr.length) {
            adUnitQueryString = adUnitQueryString.slice(0, -3);
          }
    
          // if under running threshold add to result
          var code = currMap.adUnitCode;
          var querySize = adUnitQueryString.length;
          if (querySize <= auctionKeysThreshold) {
            auctionKeysThreshold -= querySize;
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)("AdUnit '".concat(code, "' auction keys comprised of ").concat(querySize, " characters.  Deducted from running threshold; new limit is ").concat(auctionKeysThreshold), targetingCopy[code]);
            accMap[code] = targetingCopy[code];
          } else {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)("The following keys for adUnitCode '".concat(code, "' exceeded the current limit of the 'auctionKeyMaxChars' setting.\nThe key-set size was ").concat(querySize, ", the current allotted amount was ").concat(auctionKeysThreshold, ".\n"), targetingCopy[code]);
          }
          if (index + 1 === arr.length && Object.keys(accMap).length === 0) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logError)('No auction targeting keys were permitted due to the setting in setConfig(targetingControls.auctionKeyMaxChars).  Please review setup and consider adjusting.');
          }
          return accMap;
        }, {});
      }
    
      /**
       * Converts targeting array and flattens to make it easily iteratable
       * e.g: Sample input to this function
       * ```
       * [
       *    {
       *      "div-gpt-ad-1460505748561-0": [{"hb_bidder": ["appnexusAst"]}]
       *    },
       *    {
       *      "div-gpt-ad-1460505748561-0": [{"hb_bidder_appnexusAs": ["appnexusAst", "other"]}]
       *    }
       * ]
       * ```
       * Resulting array
       * ```
       * {
       *  "div-gpt-ad-1460505748561-0": {
       *    "hb_bidder": "appnexusAst",
       *    "hb_bidder_appnexusAs": "appnexusAst,other"
       *  }
       * }
       * ```
       *
       * @param {targetingArray}  targeting
       * @return {Object.<string,targeting>}  targeting
       */
      function flattenTargeting(targeting) {
        var targetingObj = targeting.map(function (targeting) {
          return (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7__["default"])({}, Object.keys(targeting)[0], targeting[Object.keys(targeting)[0]].map(function (target) {
            return (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7__["default"])({}, Object.keys(target)[0], target[Object.keys(target)[0]].join(','));
          }).reduce(function (p, c) {
            return Object.assign(c, p);
          }, {}));
        }).reduce(function (accumulator, targeting) {
          var key = Object.keys(targeting)[0];
          accumulator[key] = Object.assign({}, accumulator[key], targeting[key]);
          return accumulator;
        }, {});
        return targetingObj;
      }
    
      /**
       * Sets targeting for DFP
       * @param {Object.<string,Object.<string,string>>} targetingConfig
       */
      targeting.setTargetingForGPT = function (targetingConfig, customSlotMatching) {
        window.googletag.pubads().getSlots().forEach(function (slot) {
          Object.keys(targetingConfig).filter(customSlotMatching ? customSlotMatching(slot) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isAdUnitCodeMatchingSlot)(slot)).forEach(function (targetId) {
            Object.keys(targetingConfig[targetId]).forEach(function (key) {
              var value = targetingConfig[targetId][key];
              if (typeof value === 'string' && value.indexOf(',') !== -1) {
                // due to the check the array will be formed only if string has ',' else plain string will be assigned as value
                value = value.split(',');
              }
              targetingConfig[targetId][key] = value;
            });
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logMessage)("Attempting to set targeting-map for slot: ".concat(slot.getSlotElementId(), " with targeting-map:"), targetingConfig[targetId]);
            slot.updateTargetingFromMap(targetingConfig[targetId]);
          });
        });
      };
    
      /**
       * normlizes input to a `adUnit.code` array
       * @param  {(string|string[])} adUnitCode [description]
       * @return {string[]}     AdUnit code array
       */
      function getAdUnitCodes(adUnitCode) {
        if (typeof adUnitCode === 'string') {
          return [adUnitCode];
        } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(adUnitCode)) {
          return adUnitCode;
        }
        return auctionManager.getAdUnitCodes() || [];
      }
      function getBidsReceived() {
        var bidsReceived = auctionManager.getBidsReceived();
        if (!_config_js__WEBPACK_IMPORTED_MODULE_0__.config.getConfig('useBidCache')) {
          // don't use bid cache (i.e. filter out bids not in the latest auction)
          bidsReceived = bidsReceived.filter(function (bid) {
            return latestAuctionForAdUnit[bid.adUnitCode] === bid.auctionId;
          });
        } else {
          // if custom bid cache filter function exists, run for each bid from
          // previous auctions. If it returns true, include bid in bid pool
          var filterFunction = _config_js__WEBPACK_IMPORTED_MODULE_0__.config.getConfig('bidCacheFilterFunction');
          if (typeof filterFunction === 'function') {
            bidsReceived = bidsReceived.filter(function (bid) {
              return latestAuctionForAdUnit[bid.adUnitCode] === bid.auctionId || !!filterFunction(bid);
            });
          }
        }
        bidsReceived = bidsReceived.filter(function (bid) {
          return (0,_utils_js__WEBPACK_IMPORTED_MODULE_8__["default"])(bid, 'video.context') !== _mediaTypes_js__WEBPACK_IMPORTED_MODULE_9__.ADPOD;
        }).filter(isBidUsable);
        return getHighestCpmBidsFromBidPool(bidsReceived, _utils_js__WEBPACK_IMPORTED_MODULE_1__.getOldestHighestCpmBid);
      }
    
      /**
       * Returns top bids for a given adUnit or set of adUnits.
       * @param  {(string|string[])} adUnitCode adUnitCode or array of adUnitCodes
       * @return {[type]}            [description]
       */
      targeting.getWinningBids = function (adUnitCode) {
        var bidsReceived = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getBidsReceived();
        var adUnitCodes = getAdUnitCodes(adUnitCode);
        return bidsReceived.filter(function (bid) {
          return (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.includes)(adUnitCodes, bid.adUnitCode);
        }).filter(function (bid) {
          return _bidderSettings_js__WEBPACK_IMPORTED_MODULE_10__.bidderSettings.get(bid.bidderCode, 'allowZeroCpmBids') === true ? bid.cpm >= 0 : bid.cpm > 0;
        }).map(function (bid) {
          return bid.adUnitCode;
        }).filter(_utils_js__WEBPACK_IMPORTED_MODULE_1__.uniques).map(function (adUnitCode) {
          return bidsReceived.filter(function (bid) {
            return bid.adUnitCode === adUnitCode ? bid : null;
          }).reduce(_utils_js__WEBPACK_IMPORTED_MODULE_1__.getHighestCpm);
        });
      };
    
      /**
       * @param  {(string|string[])} adUnitCode adUnitCode or array of adUnitCodes
       * Sets targeting for AST
       */
      targeting.setTargetingForAst = function (adUnitCodes) {
        var astTargeting = targeting.getAllTargeting(adUnitCodes);
        try {
          targeting.resetPresetTargetingAST(adUnitCodes);
        } catch (e) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logError)('unable to reset targeting for AST' + e);
        }
        Object.keys(astTargeting).forEach(function (targetId) {
          return Object.keys(astTargeting[targetId]).forEach(function (key) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logMessage)("Attempting to set targeting for targetId: ".concat(targetId, " key: ").concat(key, " value: ").concat(astTargeting[targetId][key]));
            // setKeywords supports string and array as value
            if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isStr)(astTargeting[targetId][key]) || (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(astTargeting[targetId][key])) {
              var keywordsObj = {};
              var regex = /pt[0-9]/;
              if (key.search(regex) < 0) {
                keywordsObj[key.toUpperCase()] = astTargeting[targetId][key];
              } else {
                // pt${n} keys should not be uppercased
                keywordsObj[key] = astTargeting[targetId][key];
              }
              window.apntag.setKeywords(targetId, keywordsObj, {
                overrideKeyValue: true
              });
            }
          });
        });
      };
    
      /**
       * Get targeting key value pairs for winning bid.
       * @param {string[]}    AdUnit code array
       * @return {targetingArray}   winning bids targeting
       */
      function getWinningBidTargeting(adUnitCodes, bidsReceived) {
        var winners = targeting.getWinningBids(adUnitCodes, bidsReceived);
        var standardKeys = getStandardKeys();
        winners = winners.map(function (winner) {
          return (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7__["default"])({}, winner.adUnitCode, Object.keys(winner.adserverTargeting).filter(function (key) {
            return typeof winner.sendStandardTargeting === 'undefined' || winner.sendStandardTargeting || standardKeys.indexOf(key) === -1;
          }).reduce(function (acc, key) {
            var targetingValue = [winner.adserverTargeting[key]];
            var targeting = (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7__["default"])({}, key.substring(0, MAX_DFP_KEYLENGTH), targetingValue);
            if (key === _constants_json__WEBPACK_IMPORTED_MODULE_2__.TARGETING_KEYS.DEAL) {
              var bidderCodeTargetingKey = "".concat(key, "_").concat(winner.bidderCode).substring(0, MAX_DFP_KEYLENGTH);
              var bidderCodeTargeting = (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7__["default"])({}, bidderCodeTargetingKey, targetingValue);
              return [].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_5__["default"])(acc), [targeting, bidderCodeTargeting]);
            }
            return [].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_5__["default"])(acc), [targeting]);
          }, []));
        });
        return winners;
      }
      function getStandardKeys() {
        return auctionManager.getStandardBidderAdServerTargeting() // in case using a custom standard key set
        .map(function (targeting) {
          return targeting.key;
        }).concat(TARGETING_KEYS).filter(_utils_js__WEBPACK_IMPORTED_MODULE_1__.uniques); // standard keys defined in the library.
      }
    
      /**
       * Merge custom adserverTargeting with same key name for same adUnitCode.
       * e.g: Appnexus defining custom keyvalue pair foo:bar and Rubicon defining custom keyvalue pair foo:baz will be merged to foo: ['bar','baz']
       *
       * @param {Object[]} acc Accumulator for reducer. It will store updated bidResponse objects
       * @param {Object} bid BidResponse
       * @param {number} index current index
       * @param {Array} arr original array
       */
      function mergeAdServerTargeting(acc, bid, index, arr) {
        function concatTargetingValue(key) {
          return function (currentBidElement) {
            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(currentBidElement.adserverTargeting[key])) {
              currentBidElement.adserverTargeting[key] = [currentBidElement.adserverTargeting[key]];
            }
            currentBidElement.adserverTargeting[key] = currentBidElement.adserverTargeting[key].concat(bid.adserverTargeting[key]).filter(_utils_js__WEBPACK_IMPORTED_MODULE_1__.uniques);
            delete bid.adserverTargeting[key];
          };
        }
        function hasSameAdunitCodeAndKey(key) {
          return function (currentBidElement) {
            return currentBidElement.adUnitCode === bid.adUnitCode && currentBidElement.adserverTargeting[key];
          };
        }
        Object.keys(bid.adserverTargeting).filter(getCustomKeys()).forEach(function (key) {
          if (acc.length) {
            acc.filter(hasSameAdunitCodeAndKey(key)).forEach(concatTargetingValue(key));
          }
        });
        acc.push(bid);
        return acc;
      }
      function getCustomKeys() {
        var standardKeys = getStandardKeys();
        if (true) {
          standardKeys = standardKeys.concat(_native_js__WEBPACK_IMPORTED_MODULE_6__.NATIVE_TARGETING_KEYS);
        }
        return function (key) {
          return standardKeys.indexOf(key) === -1;
        };
      }
      function truncateCustomKeys(bid) {
        return (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7__["default"])({}, bid.adUnitCode, Object.keys(bid.adserverTargeting)
        // Get only the non-standard keys of the losing bids, since we
        // don't want to override the standard keys of the winning bid.
        .filter(getCustomKeys()).map(function (key) {
          return (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7__["default"])({}, key.substring(0, MAX_DFP_KEYLENGTH), [bid.adserverTargeting[key]]);
        }));
      }
    
      /**
       * Get custom targeting key value pairs for bids.
       * @param {string[]}    AdUnit code array
       * @return {targetingArray}   bids with custom targeting defined in bidderSettings
       */
      function getCustomBidTargeting(adUnitCodes, bidsReceived) {
        return bidsReceived.filter(function (bid) {
          return (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.includes)(adUnitCodes, bid.adUnitCode);
        }).map(function (bid) {
          return Object.assign({}, bid);
        }).reduce(mergeAdServerTargeting, []).map(truncateCustomKeys).filter(function (bid) {
          return bid;
        }); // removes empty elements in array;
      }
    
      /**
       * Get targeting key value pairs for non-winning bids.
       * @param {string[]}    AdUnit code array
       * @return {targetingArray}   all non-winning bids targeting
       */
      function getBidLandscapeTargeting(adUnitCodes, bidsReceived) {
        var standardKeys =  true ? TARGETING_KEYS.concat(_native_js__WEBPACK_IMPORTED_MODULE_6__.NATIVE_TARGETING_KEYS) : 0;
        var adUnitBidLimit = _config_js__WEBPACK_IMPORTED_MODULE_0__.config.getConfig('sendBidsControl.bidLimit');
        var bids = getHighestCpmBidsFromBidPool(bidsReceived, _utils_js__WEBPACK_IMPORTED_MODULE_1__.getHighestCpm, adUnitBidLimit);
        var allowSendAllBidsTargetingKeys = _config_js__WEBPACK_IMPORTED_MODULE_0__.config.getConfig('targetingControls.allowSendAllBidsTargetingKeys');
        var allowedSendAllBidTargeting = allowSendAllBidsTargetingKeys ? allowSendAllBidsTargetingKeys.map(function (key) {
          return _constants_json__WEBPACK_IMPORTED_MODULE_2__.TARGETING_KEYS[key];
        }) : standardKeys;
    
        // populate targeting keys for the remaining bids
        return bids.map(function (bid) {
          if (bidShouldBeAddedToTargeting(bid, adUnitCodes)) {
            return (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7__["default"])({}, bid.adUnitCode, getTargetingMap(bid, standardKeys.filter(function (key) {
              return typeof bid.adserverTargeting[key] !== 'undefined' && allowedSendAllBidTargeting.indexOf(key) !== -1;
            })));
          }
        }).filter(function (bid) {
          return bid;
        }); // removes empty elements in array
      }
    
      function getTargetingMap(bid, keys) {
        return keys.map(function (key) {
          return (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7__["default"])({}, "".concat(key, "_").concat(bid.bidderCode).substring(0, MAX_DFP_KEYLENGTH), [bid.adserverTargeting[key]]);
        });
      }
      function getAdUnitTargeting(adUnitCodes) {
        function getTargetingObj(adUnit) {
          return (0,_utils_js__WEBPACK_IMPORTED_MODULE_8__["default"])(adUnit, _constants_json__WEBPACK_IMPORTED_MODULE_2__.JSON_MAPPING.ADSERVER_TARGETING);
        }
        function getTargetingValues(adUnit) {
          var aut = getTargetingObj(adUnit);
          return Object.keys(aut).map(function (key) {
            if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isStr)(aut[key])) aut[key] = aut[key].split(',').map(function (s) {
              return s.trim();
            });
            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(aut[key])) aut[key] = [aut[key]];
            return (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7__["default"])({}, key, aut[key]);
          });
        }
        return auctionManager.getAdUnits().filter(function (adUnit) {
          return (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.includes)(adUnitCodes, adUnit.code) && getTargetingObj(adUnit);
        }).map(function (adUnit) {
          return (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7__["default"])({}, adUnit.code, getTargetingValues(adUnit));
        });
      }
      targeting.isApntagDefined = function () {
        if (window.apntag && (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFn)(window.apntag.setKeywords)) {
          return true;
        }
      };
      return targeting;
    }
    var targeting = newTargeting(_auctionManager_js__WEBPACK_IMPORTED_MODULE_11__.auctionManager);
    
    /***/ }),
    
    /***/ "./src/userSync.js":
    /*!*************************!*\
      !*** ./src/userSync.js ***!
      \*************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "userSync": function() { return /* binding */ userSync; }
    /* harmony export */ });
    /* unused harmony exports USERSYNC_DEFAULT_CONFIG, newUserSync */
    /* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
    /* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config.js */ "./src/config.js");
    /* harmony import */ var _polyfill_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./polyfill.js */ "./src/polyfill.js");
    /* harmony import */ var _storageManager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./storageManager.js */ "./src/storageManager.js");
    
    
    
    
    
    var USERSYNC_DEFAULT_CONFIG = {
      syncEnabled: true,
      filterSettings: {
        image: {
          bidders: '*',
          filter: 'include'
        }
      },
      syncsPerBidder: 5,
      syncDelay: 3000,
      auctionDelay: 0
    };
    
    // Set userSync default values
    _config_js__WEBPACK_IMPORTED_MODULE_0__.config.setDefaults({
      'userSync': (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.deepClone)(USERSYNC_DEFAULT_CONFIG)
    });
    var storage = (0,_storageManager_js__WEBPACK_IMPORTED_MODULE_2__.getCoreStorageManager)('usersync');
    
    /**
     * Factory function which creates a new UserSyncPool.
     *
     * @param {UserSyncDependencies} userSyncDependencies Configuration options and dependencies which the
     *   UserSync object needs in order to behave properly.
     */
    function newUserSync(userSyncDependencies) {
      var publicApi = {};
      // A queue of user syncs for each adapter
      // Let getDefaultQueue() set the defaults
      var queue = getDefaultQueue();
    
      // Whether or not user syncs have been trigger on this page load for a specific bidder
      var hasFiredBidder = new Set();
      // How many bids for each adapter
      var numAdapterBids = {};
    
      // for now - default both to false in case filterSettings config is absent/misconfigured
      var permittedPixels = {
        image: true,
        iframe: false
      };
    
      // Use what is in config by default
      var usConfig = userSyncDependencies.config;
      // Update if it's (re)set
      _config_js__WEBPACK_IMPORTED_MODULE_0__.config.getConfig('userSync', function (conf) {
        // Added this logic for https://github.com/prebid/Prebid.js/issues/4864
        // if userSync.filterSettings does not contain image/all configs, merge in default image config to ensure image pixels are fired
        if (conf.userSync) {
          var fs = conf.userSync.filterSettings;
          if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(fs)) {
            if (!fs.image && !fs.all) {
              conf.userSync.filterSettings.image = {
                bidders: '*',
                filter: 'include'
              };
            }
          }
        }
        usConfig = Object.assign(usConfig, conf.userSync);
      });
    
      /**
       * @function getDefaultQueue
       * @summary Returns the default empty queue
       * @private
       * @return {object} A queue with no syncs
       */
      function getDefaultQueue() {
        return {
          image: [],
          iframe: []
        };
      }
    
      /**
       * @function fireSyncs
       * @summary Trigger all user syncs in the queue
       * @private
       */
      function fireSyncs() {
        if (!usConfig.syncEnabled || !userSyncDependencies.browserSupportsCookies) {
          return;
        }
        try {
          // Iframe syncs
          loadIframes();
          // Image pixels
          fireImagePixels();
        } catch (e) {
          return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logError)('Error firing user syncs', e);
        }
        // Reset the user sync queue
        queue = getDefaultQueue();
      }
      function forEachFire(queue, fn) {
        // Randomize the order of the pixels before firing
        // This is to avoid giving any bidder who has registered multiple syncs
        // any preferential treatment and balancing them out
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.shuffle)(queue).forEach(function (sync) {
          fn(sync);
          hasFiredBidder.add(sync[0]);
        });
      }
    
      /**
       * @function fireImagePixels
       * @summary Loops through user sync pixels and fires each one
       * @private
       */
      function fireImagePixels() {
        if (!permittedPixels.image) {
          return;
        }
        forEachFire(queue.image, function (sync) {
          var _sync = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_3__["default"])(sync, 2),
            bidderName = _sync[0],
            trackingPixelUrl = _sync[1];
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logMessage)("Invoking image pixel user sync for bidder: ".concat(bidderName));
          // Create image object and add the src url
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.triggerPixel)(trackingPixelUrl);
        });
      }
    
      /**
       * @function loadIframes
       * @summary Loops through iframe syncs and loads an iframe element into the page
       * @private
       */
      function loadIframes() {
        if (!permittedPixels.iframe) {
          return;
        }
        forEachFire(queue.iframe, function (sync) {
          var _sync2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_3__["default"])(sync, 2),
            bidderName = _sync2[0],
            iframeUrl = _sync2[1];
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logMessage)("Invoking iframe user sync for bidder: ".concat(bidderName));
          // Insert iframe into DOM
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.insertUserSyncIframe)(iframeUrl);
          // for a bidder, if iframe sync is present then remove image pixel
          removeImagePixelsForBidder(queue, bidderName);
        });
      }
      function removeImagePixelsForBidder(queue, iframeSyncBidderName) {
        queue.image = queue.image.filter(function (imageSync) {
          var imageSyncBidderName = imageSync[0];
          return imageSyncBidderName !== iframeSyncBidderName;
        });
      }
    
      /**
       * @function incrementAdapterBids
       * @summary Increment the count of user syncs queue for the adapter
       * @private
       * @params {object} numAdapterBids The object contain counts for all adapters
       * @params {string} bidder The name of the bidder adding a sync
       * @returns {object} The updated version of numAdapterBids
       */
      function incrementAdapterBids(numAdapterBids, bidder) {
        if (!numAdapterBids[bidder]) {
          numAdapterBids[bidder] = 1;
        } else {
          numAdapterBids[bidder] += 1;
        }
        return numAdapterBids;
      }
    
      /**
       * @function registerSync
       * @summary Add sync for this bidder to a queue to be fired later
       * @public
       * @params {string} type The type of the sync including image, iframe
       * @params {string} bidder The name of the adapter. e.g. "rubicon"
       * @params {string} url Either the pixel url or iframe url depending on the type
        * @example <caption>Using Image Sync</caption>
       * // registerSync(type, adapter, pixelUrl)
       * userSync.registerSync('image', 'rubicon', 'http://example.com/pixel')
       */
      publicApi.registerSync = function (type, bidder, url) {
        if (hasFiredBidder.has(bidder)) {
          return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logMessage)("already fired syncs for \"".concat(bidder, "\", ignoring registerSync call"));
        }
        if (!usConfig.syncEnabled || !(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(queue[type])) {
          return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)("User sync type \"".concat(type, "\" not supported"));
        }
        if (!bidder) {
          return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)("Bidder is required for registering sync");
        }
        if (usConfig.syncsPerBidder !== 0 && Number(numAdapterBids[bidder]) >= usConfig.syncsPerBidder) {
          return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)("Number of user syncs exceeded for \"".concat(bidder, "\""));
        }
        var canBidderRegisterSync = publicApi.canBidderRegisterSync(type, bidder);
        if (!canBidderRegisterSync) {
          return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)("Bidder \"".concat(bidder, "\" not permitted to register their \"").concat(type, "\" userSync pixels."));
        }
    
        // the bidder's pixel has passed all checks and is allowed to register
        queue[type].push([bidder, url]);
        numAdapterBids = incrementAdapterBids(numAdapterBids, bidder);
      };
    
      /**
       * @function shouldBidderBeBlocked
       * @summary Check filterSettings logic to determine if the bidder should be prevented from registering their userSync tracker
       * @private
       * @param {string} type The type of the sync; either image or iframe
       * @param {string} bidder The name of the adapter. e.g. "rubicon"
       * @returns {boolean} true => bidder is not allowed to register; false => bidder can register
        */
      function shouldBidderBeBlocked(type, bidder) {
        var filterConfig = usConfig.filterSettings;
    
        // apply the filter check if the config object is there (eg filterSettings.iframe exists) and if the config object is properly setup
        if (isFilterConfigValid(filterConfig, type)) {
          permittedPixels[type] = true;
          var activeConfig = filterConfig.all ? filterConfig.all : filterConfig[type];
          var biddersToFilter = activeConfig.bidders === '*' ? [bidder] : activeConfig.bidders;
          var filterType = activeConfig.filter || 'include'; // set default if undefined
    
          // return true if the bidder is either: not part of the include (ie outside the whitelist) or part of the exclude (ie inside the blacklist)
          var checkForFiltering = {
            'include': function include(bidders, bidder) {
              return !(0,_polyfill_js__WEBPACK_IMPORTED_MODULE_4__.includes)(bidders, bidder);
            },
            'exclude': function exclude(bidders, bidder) {
              return (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_4__.includes)(bidders, bidder);
            }
          };
          return checkForFiltering[filterType](biddersToFilter, bidder);
        }
        return !permittedPixels[type];
      }
    
      /**
       * @function isFilterConfigValid
       * @summary Check if the filterSettings object in the userSync config is setup properly
       * @private
       * @param {object} filterConfig sub-config object taken from filterSettings
       * @param {string} type The type of the sync; either image or iframe
       * @returns {boolean} true => config is setup correctly, false => setup incorrectly or filterConfig[type] is not present
       */
      function isFilterConfigValid(filterConfig, type) {
        if (filterConfig.all && filterConfig[type]) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)("Detected presence of the \"filterSettings.all\" and \"filterSettings.".concat(type, "\" in userSync config.  You cannot mix \"all\" with \"iframe/image\" configs; they are mutually exclusive."));
          return false;
        }
        var activeConfig = filterConfig.all ? filterConfig.all : filterConfig[type];
        var activeConfigName = filterConfig.all ? 'all' : type;
    
        // if current pixel type isn't part of the config's logic, skip rest of the config checks...
        // we return false to skip subsequent filter checks in shouldBidderBeBlocked() function
        if (!activeConfig) {
          return false;
        }
        var filterField = activeConfig.filter;
        var biddersField = activeConfig.bidders;
        if (filterField && filterField !== 'include' && filterField !== 'exclude') {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)("UserSync \"filterSettings.".concat(activeConfigName, ".filter\" setting '").concat(filterField, "' is not a valid option; use either 'include' or 'exclude'."));
          return false;
        }
        if (biddersField !== '*' && !(Array.isArray(biddersField) && biddersField.length > 0 && biddersField.every(function (bidderInList) {
          return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isStr)(bidderInList) && bidderInList !== '*';
        }))) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)("Detected an invalid setup in userSync \"filterSettings.".concat(activeConfigName, ".bidders\"; use either '*' (to represent all bidders) or an array of bidders."));
          return false;
        }
        return true;
      }
    
      /**
       * @function syncUsers
       * @summary Trigger all the user syncs based on publisher-defined timeout
       * @public
       * @params {int} timeout The delay in ms before syncing data - default 0
       */
      publicApi.syncUsers = function () {
        var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        if (timeout) {
          return setTimeout(fireSyncs, Number(timeout));
        }
        fireSyncs();
      };
    
      /**
       * @function triggerUserSyncs
       * @summary A `syncUsers` wrapper for determining if enableOverride has been turned on
       * @public
       */
      publicApi.triggerUserSyncs = function () {
        if (usConfig.enableOverride) {
          publicApi.syncUsers();
        }
      };
      publicApi.canBidderRegisterSync = function (type, bidder) {
        if (usConfig.filterSettings) {
          if (shouldBidderBeBlocked(type, bidder)) {
            return false;
          }
        }
        return true;
      };
      return publicApi;
    }
    var userSync = newUserSync(Object.defineProperties({
      config: _config_js__WEBPACK_IMPORTED_MODULE_0__.config.getConfig('userSync')
    }, {
      browserSupportsCookies: {
        get: function get() {
          // call storage lazily to give time for consent data to be available
          return !(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isSafariBrowser)() && storage.cookiesAreEnabled();
        }
      }
    }));
    
    /**
     * @typedef {Object} UserSyncDependencies
     *
     * @property {UserSyncConfig} config
     * @property {boolean} browserSupportsCookies True if the current browser supports cookies, and false otherwise.
     */
    
    /**
     * @typedef {Object} UserSyncConfig
     *
     * @property {boolean} enableOverride
     * @property {boolean} syncEnabled
     * @property {int} syncsPerBidder
     * @property {string[]} enabledBidders
     * @property {Object} filterSettings
     */
    
    /***/ }),
    
    /***/ "./src/utils.js":
    /*!**********************!*\
      !*** ./src/utils.js ***!
      \**********************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "_each": function() { return /* binding */ _each; },
    /* harmony export */   "_map": function() { return /* binding */ _map; },
    /* harmony export */   "_setEventEmitter": function() { return /* binding */ _setEventEmitter; },
    /* harmony export */   "adUnitsFilter": function() { return /* binding */ adUnitsFilter; },
    /* harmony export */   "bind": function() { return /* binding */ bind; },
    /* harmony export */   "buildUrl": function() { return /* binding */ buildUrl; },
    /* harmony export */   "callBurl": function() { return /* binding */ callBurl; },
    /* harmony export */   "checkCookieSupport": function() { return /* binding */ checkCookieSupport; },
    /* harmony export */   "chunk": function() { return /* binding */ chunk; },
    /* harmony export */   "compareOn": function() { return /* binding */ compareOn; },
    /* harmony export */   "contains": function() { return /* binding */ contains; },
    /* harmony export */   "convertCamelToUnderscore": function() { return /* binding */ convertCamelToUnderscore; },
    /* harmony export */   "convertTypes": function() { return /* binding */ convertTypes; },
    /* harmony export */   "createInvisibleIframe": function() { return /* binding */ createInvisibleIframe; },
    /* harmony export */   "createTrackPixelHtml": function() { return /* binding */ createTrackPixelHtml; },
    /* harmony export */   "debugTurnedOn": function() { return /* binding */ debugTurnedOn; },
    /* harmony export */   "deepClone": function() { return /* binding */ deepClone; },
    /* harmony export */   "delayExecution": function() { return /* binding */ delayExecution; },
    /* harmony export */   "fill": function() { return /* binding */ fill; },
    /* harmony export */   "flatten": function() { return /* binding */ flatten; },
    /* harmony export */   "formatQS": function() { return /* binding */ formatQS; },
    /* harmony export */   "generateUUID": function() { return /* binding */ generateUUID; },
    /* harmony export */   "getBidRequest": function() { return /* binding */ getBidRequest; },
    /* harmony export */   "getBidderCodes": function() { return /* binding */ getBidderCodes; },
    /* harmony export */   "getDNT": function() { return /* binding */ getDNT; },
    /* harmony export */   "getDefinedParams": function() { return /* binding */ getDefinedParams; },
    /* harmony export */   "getGptSlotInfoForAdUnitCode": function() { return /* binding */ getGptSlotInfoForAdUnitCode; },
    /* harmony export */   "getHighestCpm": function() { return /* binding */ getHighestCpm; },
    /* harmony export */   "getKeyByValue": function() { return /* binding */ getKeyByValue; },
    /* harmony export */   "getMaxValueFromArray": function() { return /* binding */ getMaxValueFromArray; },
    /* harmony export */   "getMinValueFromArray": function() { return /* binding */ getMinValueFromArray; },
    /* harmony export */   "getOldestHighestCpmBid": function() { return /* binding */ getOldestHighestCpmBid; },
    /* harmony export */   "getParameterByName": function() { return /* binding */ getParameterByName; },
    /* harmony export */   "getPerformanceNow": function() { return /* binding */ getPerformanceNow; },
    /* harmony export */   "getUniqueIdentifierStr": function() { return /* binding */ getUniqueIdentifierStr; },
    /* harmony export */   "getUserConfiguredParams": function() { return /* binding */ getUserConfiguredParams; },
    /* harmony export */   "getValue": function() { return /* binding */ getValue; },
    /* harmony export */   "getWindowFromDocument": function() { return /* binding */ getWindowFromDocument; },
    /* harmony export */   "getWindowSelf": function() { return /* binding */ getWindowSelf; },
    /* harmony export */   "getWindowTop": function() { return /* binding */ getWindowTop; },
    /* harmony export */   "groupBy": function() { return /* binding */ groupBy; },
    /* harmony export */   "hasDeviceAccess": function() { return /* binding */ hasDeviceAccess; },
    /* harmony export */   "inIframe": function() { return /* binding */ inIframe; },
    /* harmony export */   "insertElement": function() { return /* binding */ insertElement; },
    /* harmony export */   "insertHtmlIntoIframe": function() { return /* binding */ insertHtmlIntoIframe; },
    /* harmony export */   "insertUserSyncIframe": function() { return /* binding */ insertUserSyncIframe; },
    /* harmony export */   "isAdUnitCodeMatchingSlot": function() { return /* binding */ isAdUnitCodeMatchingSlot; },
    /* harmony export */   "isApnGetTagDefined": function() { return /* binding */ isApnGetTagDefined; },
    /* harmony export */   "isArray": function() { return /* binding */ isArray; },
    /* harmony export */   "isArrayOfNums": function() { return /* binding */ isArrayOfNums; },
    /* harmony export */   "isBoolean": function() { return /* binding */ isBoolean; },
    /* harmony export */   "isEmpty": function() { return /* binding */ isEmpty; },
    /* harmony export */   "isEmptyStr": function() { return /* binding */ isEmptyStr; },
    /* harmony export */   "isFn": function() { return /* binding */ isFn; },
    /* harmony export */   "isGptPubadsDefined": function() { return /* binding */ isGptPubadsDefined; },
    /* harmony export */   "isInteger": function() { return /* binding */ isInteger; },
    /* harmony export */   "isNumber": function() { return /* binding */ isNumber; },
    /* harmony export */   "isPlainObject": function() { return /* binding */ isPlainObject; },
    /* harmony export */   "isSafariBrowser": function() { return /* binding */ isSafariBrowser; },
    /* harmony export */   "isStr": function() { return /* binding */ isStr; },
    /* harmony export */   "isValidMediaTypes": function() { return /* binding */ isValidMediaTypes; },
    /* harmony export */   "logError": function() { return /* binding */ logError; },
    /* harmony export */   "logInfo": function() { return /* binding */ logInfo; },
    /* harmony export */   "logMessage": function() { return /* binding */ logMessage; },
    /* harmony export */   "logWarn": function() { return /* binding */ logWarn; },
    /* harmony export */   "memoize": function() { return /* binding */ memoize; },
    /* harmony export */   "mergeDeep": function() { return /* binding */ mergeDeep; },
    /* harmony export */   "parseGPTSingleSizeArray": function() { return /* binding */ parseGPTSingleSizeArray; },
    /* harmony export */   "parseQueryStringParameters": function() { return /* binding */ parseQueryStringParameters; },
    /* harmony export */   "parseSizesInput": function() { return /* binding */ parseSizesInput; },
    /* harmony export */   "parseUrl": function() { return /* binding */ parseUrl; },
    /* harmony export */   "pick": function() { return /* binding */ pick; },
    /* harmony export */   "prefixLog": function() { return /* binding */ prefixLog; },
    /* harmony export */   "replaceAuctionPrice": function() { return /* binding */ replaceAuctionPrice; },
    /* harmony export */   "replaceClickThrough": function() { return /* binding */ replaceClickThrough; },
    /* harmony export */   "setScriptAttributes": function() { return /* binding */ setScriptAttributes; },
    /* harmony export */   "shuffle": function() { return /* binding */ shuffle; },
    /* harmony export */   "timestamp": function() { return /* binding */ timestamp; },
    /* harmony export */   "transformAdServerTargetingObj": function() { return /* binding */ transformAdServerTargetingObj; },
    /* harmony export */   "transformBidderParamKeywords": function() { return /* binding */ transformBidderParamKeywords; },
    /* harmony export */   "triggerPixel": function() { return /* binding */ triggerPixel; },
    /* harmony export */   "uniques": function() { return /* binding */ uniques; },
    /* harmony export */   "unsupportedBidderMessage": function() { return /* binding */ unsupportedBidderMessage; }
    /* harmony export */ });
    /* unused harmony exports internal, getPrebidInternal, getBidIdParameter, tryAppendQueryString, getAdUnitSizes, parseGPTSingleSizeArrayToRtbSize, getWindowLocation, hasConsoleLogger, isA, hasOwn, waitForElementToLoad, createTrackPixelIframeHtml, getValueString, getKeys, getLatestHighestCpmBid, isSlotMatchingAdUnitCode, getGptSlotForAdUnitCode, cleanObj, parseQS, deepEqual, cyrb53Hash, skipUndefinedValues, safeJSONParse, escapeUnsafeChars */
    /* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
    /* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
    /* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
    /* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");
    /* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config.js */ "./src/config.js");
    /* harmony import */ var just_clone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! just-clone */ "./node_modules/just-clone/index.js");
    /* harmony import */ var just_clone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(just_clone__WEBPACK_IMPORTED_MODULE_0__);
    /* harmony import */ var _polyfill_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./polyfill.js */ "./src/polyfill.js");
    /* harmony import */ var _constants_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.json */ "./src/constants.json");
    /* harmony import */ var _utils_promise_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/promise.js */ "./src/utils/promise.js");
    
    
    
    
    
    
    
    
    
    
    
    var tArr = 'Array';
    var tStr = 'String';
    var tFn = 'Function';
    var tNumb = 'Number';
    var tObject = 'Object';
    var tBoolean = 'Boolean';
    var toString = Object.prototype.toString;
    var consoleExists = Boolean(window.console);
    var consoleLogExists = Boolean(consoleExists && window.console.log);
    var consoleInfoExists = Boolean(consoleExists && window.console.info);
    var consoleWarnExists = Boolean(consoleExists && window.console.warn);
    var consoleErrorExists = Boolean(consoleExists && window.console.error);
    var eventEmitter;
    function _setEventEmitter(emitFn) {
      // called from events.js - this hoop is to avoid circular imports
      eventEmitter = emitFn;
    }
    function emitEvent() {
      if (eventEmitter != null) {
        eventEmitter.apply(void 0, arguments);
      }
    }
    
    // this allows stubbing of utility functions that are used internally by other utility functions
    var internal = {
      checkCookieSupport: checkCookieSupport,
      createTrackPixelIframeHtml: createTrackPixelIframeHtml,
      getWindowSelf: getWindowSelf,
      getWindowTop: getWindowTop,
      getWindowLocation: getWindowLocation,
      insertUserSyncIframe: insertUserSyncIframe,
      insertElement: insertElement,
      isFn: isFn,
      triggerPixel: triggerPixel,
      logError: logError,
      logWarn: logWarn,
      logMessage: logMessage,
      logInfo: logInfo,
      parseQS: parseQS,
      formatQS: formatQS,
      deepEqual: deepEqual,
      isEmpty: isEmpty,
      skipUndefinedValues: skipUndefinedValues
    };
    var prebidInternal = {};
    /**
     * Returns object that is used as internal prebid namespace
     */
    function getPrebidInternal() {
      return prebidInternal;
    }
    var uniqueRef = {};
    var bind = function (a, b) {
      return b;
    }.bind(null, 1, uniqueRef)() === uniqueRef ? Function.prototype.bind : function (bind) {
      var self = this;
      var args = Array.prototype.slice.call(arguments, 1);
      return function () {
        return self.apply(bind, args.concat(Array.prototype.slice.call(arguments)));
      };
    };
    
    /* utility method to get incremental integer starting from 1 */
    var getIncrementalInteger = function () {
      var count = 0;
      return function () {
        count++;
        return count;
      };
    }();
    
    // generate a random string (to be used as a dynamic JSONP callback)
    function getUniqueIdentifierStr() {
      return getIncrementalInteger() + Math.random().toString(16).substr(2);
    }
    
    /**
     * Returns a random v4 UUID of the form xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx,
     * where each x is replaced with a random hexadecimal digit from 0 to f,
     * and y is replaced with a random hexadecimal digit from 8 to b.
     * https://gist.github.com/jed/982883 via node-uuid
     */
    function generateUUID(placeholder) {
      return placeholder ? (placeholder ^ _getRandomData() >> placeholder / 4).toString(16) : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, generateUUID);
    }
    
    /**
     * Returns random data using the Crypto API if available and Math.random if not
     * Method is from https://gist.github.com/jed/982883 like generateUUID, direct link https://gist.github.com/jed/982883#gistcomment-45104
     */
    function _getRandomData() {
      if (window && window.crypto && window.crypto.getRandomValues) {
        return crypto.getRandomValues(new Uint8Array(1))[0] % 16;
      } else {
        return Math.random() * 16;
      }
    }
    function getBidIdParameter(key, paramsObj) {
      if (paramsObj && paramsObj[key]) {
        return paramsObj[key];
      }
      return '';
    }
    function tryAppendQueryString(existingUrl, key, value) {
      if (value) {
        return existingUrl + key + '=' + encodeURIComponent(value) + '&';
      }
      return existingUrl;
    }
    
    // parse a query string object passed in bid params
    // bid params should be an object such as {key: "value", key1 : "value1"}
    // aliases to formatQS
    function parseQueryStringParameters(queryObj) {
      var result = '';
      for (var k in queryObj) {
        if (queryObj.hasOwnProperty(k)) {
          result += k + '=' + encodeURIComponent(queryObj[k]) + '&';
        }
      }
      result = result.replace(/&$/, '');
      return result;
    }
    
    // transform an AdServer targeting bids into a query string to send to the adserver
    function transformAdServerTargetingObj(targeting) {
      // we expect to receive targeting for a single slot at a time
      if (targeting && Object.getOwnPropertyNames(targeting).length > 0) {
        return getKeys(targeting).map(function (key) {
          return "".concat(key, "=").concat(encodeURIComponent(getValue(targeting, key)));
        }).join('&');
      } else {
        return '';
      }
    }
    
    /**
     * Read an adUnit object and return the sizes used in an [[728, 90]] format (even if they had [728, 90] defined)
     * Preference is given to the `adUnit.mediaTypes.banner.sizes` object over the `adUnit.sizes`
     * @param {object} adUnit one adUnit object from the normal list of adUnits
     * @returns {Array.<number[]>} array of arrays containing numeric sizes
     */
    function getAdUnitSizes(adUnit) {
      if (!adUnit) {
        return;
      }
      var sizes = [];
      if (adUnit.mediaTypes && adUnit.mediaTypes.banner && Array.isArray(adUnit.mediaTypes.banner.sizes)) {
        var bannerSizes = adUnit.mediaTypes.banner.sizes;
        if (Array.isArray(bannerSizes[0])) {
          sizes = bannerSizes;
        } else {
          sizes.push(bannerSizes);
        }
        // TODO - remove this else block when we're ready to deprecate adUnit.sizes for bidders
      } else if (Array.isArray(adUnit.sizes)) {
        if (Array.isArray(adUnit.sizes[0])) {
          sizes = adUnit.sizes;
        } else {
          sizes.push(adUnit.sizes);
        }
      }
      return sizes;
    }
    
    /**
     * Parse a GPT-Style general size Array like `[[300, 250]]` or `"300x250,970x90"` into an array of sizes `["300x250"]` or '['300x250', '970x90']'
     * @param  {(Array.<number[]>|Array.<number>)} sizeObj Input array or double array [300,250] or [[300,250], [728,90]]
     * @return {Array.<string>}  Array of strings like `["300x250"]` or `["300x250", "728x90"]`
     */
    function parseSizesInput(sizeObj) {
      var parsedSizes = [];
    
      // if a string for now we can assume it is a single size, like "300x250"
      if (typeof sizeObj === 'string') {
        // multiple sizes will be comma-separated
        var sizes = sizeObj.split(',');
    
        // regular expression to match strigns like 300x250
        // start of line, at least 1 number, an "x" , then at least 1 number, and the then end of the line
        var sizeRegex = /^(\d)+x(\d)+$/i;
        if (sizes) {
          for (var curSizePos in sizes) {
            if (hasOwn(sizes, curSizePos) && sizes[curSizePos].match(sizeRegex)) {
              parsedSizes.push(sizes[curSizePos]);
            }
          }
        }
      } else if ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_1__["default"])(sizeObj) === 'object') {
        var sizeArrayLength = sizeObj.length;
    
        // don't process empty array
        if (sizeArrayLength > 0) {
          // if we are a 2 item array of 2 numbers, we must be a SingleSize array
          if (sizeArrayLength === 2 && typeof sizeObj[0] === 'number' && typeof sizeObj[1] === 'number') {
            parsedSizes.push(parseGPTSingleSizeArray(sizeObj));
          } else {
            // otherwise, we must be a MultiSize array
            for (var i = 0; i < sizeArrayLength; i++) {
              parsedSizes.push(parseGPTSingleSizeArray(sizeObj[i]));
            }
          }
        }
      }
      return parsedSizes;
    }
    
    // Parse a GPT style single size array, (i.e [300, 250])
    // into an AppNexus style string, (i.e. 300x250)
    function parseGPTSingleSizeArray(singleSize) {
      if (isValidGPTSingleSize(singleSize)) {
        return singleSize[0] + 'x' + singleSize[1];
      }
    }
    
    // Parse a GPT style single size array, (i.e [300, 250])
    // into OpenRTB-compatible (imp.banner.w/h, imp.banner.format.w/h, imp.video.w/h) object(i.e. {w:300, h:250})
    function parseGPTSingleSizeArrayToRtbSize(singleSize) {
      if (isValidGPTSingleSize(singleSize)) {
        return {
          w: singleSize[0],
          h: singleSize[1]
        };
      }
    }
    function isValidGPTSingleSize(singleSize) {
      // if we aren't exactly 2 items in this array, it is invalid
      return isArray(singleSize) && singleSize.length === 2 && !isNaN(singleSize[0]) && !isNaN(singleSize[1]);
    }
    function getWindowTop() {
      return window.top;
    }
    function getWindowSelf() {
      return window.self;
    }
    function getWindowLocation() {
      return window.location;
    }
    
    /**
     * Wrappers to console.(log | info | warn | error). Takes N arguments, the same as the native methods
     */
    function logMessage() {
      if (debugTurnedOn() && consoleLogExists) {
        // eslint-disable-next-line no-console
        console.log.apply(console, decorateLog(arguments, 'MESSAGE:'));
      }
    }
    function logInfo() {
      if (debugTurnedOn() && consoleInfoExists) {
        // eslint-disable-next-line no-console
        console.info.apply(console, decorateLog(arguments, 'INFO:'));
      }
    }
    function logWarn() {
      if (debugTurnedOn() && consoleWarnExists) {
        // eslint-disable-next-line no-console
        console.warn.apply(console, decorateLog(arguments, 'WARNING:'));
      }
      emitEvent(_constants_json__WEBPACK_IMPORTED_MODULE_2__.EVENTS.AUCTION_DEBUG, {
        type: 'WARNING',
        arguments: arguments
      });
    }
    function logError() {
      if (debugTurnedOn() && consoleErrorExists) {
        // eslint-disable-next-line no-console
        console.error.apply(console, decorateLog(arguments, 'ERROR:'));
      }
      emitEvent(_constants_json__WEBPACK_IMPORTED_MODULE_2__.EVENTS.AUCTION_DEBUG, {
        type: 'ERROR',
        arguments: arguments
      });
    }
    function prefixLog(prefix) {
      function decorate(fn) {
        return function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          fn.apply(void 0, [prefix].concat(args));
        };
      }
      return {
        logError: decorate(logError),
        logWarn: decorate(logWarn),
        logMessage: decorate(logMessage),
        logInfo: decorate(logInfo)
      };
    }
    function decorateLog(args, prefix) {
      args = [].slice.call(args);
      var bidder = _config_js__WEBPACK_IMPORTED_MODULE_3__.config.getCurrentBidder();
      prefix && args.unshift(prefix);
      if (bidder) {
        args.unshift(label('#aaa'));
      }
      args.unshift(label('#3b88c3'));
      args.unshift('%cPrebid' + (bidder ? "%c".concat(bidder) : ''));
      return args;
      function label(color) {
        return "display: inline-block; color: #fff; background: ".concat(color, "; padding: 1px 4px; border-radius: 3px;");
      }
    }
    function hasConsoleLogger() {
      return consoleLogExists;
    }
    function debugTurnedOn() {
      return !!_config_js__WEBPACK_IMPORTED_MODULE_3__.config.getConfig('debug');
    }
    function createInvisibleIframe() {
      var f = document.createElement('iframe');
      f.id = getUniqueIdentifierStr();
      f.height = 0;
      f.width = 0;
      f.border = '0px';
      f.hspace = '0';
      f.vspace = '0';
      f.marginWidth = '0';
      f.marginHeight = '0';
      f.style.border = '0';
      f.scrolling = 'no';
      f.frameBorder = '0';
      f.src = 'about:blank';
      f.style.display = 'none';
      return f;
    }
    
    /*
     *   Check if a given parameter name exists in query string
     *   and if it does return the value
     */
    function getParameterByName(name) {
      return parseQS(getWindowLocation().search)[name] || '';
    }
    
    /**
     * Return if the object is of the
     * given type.
     * @param {*} object to test
     * @param {String} _t type string (e.g., Array)
     * @return {Boolean} if object is of type _t
     */
    function isA(object, _t) {
      return toString.call(object) === '[object ' + _t + ']';
    }
    function isFn(object) {
      return isA(object, tFn);
    }
    function isStr(object) {
      return isA(object, tStr);
    }
    function isArray(object) {
      return isA(object, tArr);
    }
    function isNumber(object) {
      return isA(object, tNumb);
    }
    function isPlainObject(object) {
      return isA(object, tObject);
    }
    function isBoolean(object) {
      return isA(object, tBoolean);
    }
    
    /**
     * Return if the object is "empty";
     * this includes falsey, no keys, or no items at indices
     * @param {*} object object to test
     * @return {Boolean} if object is empty
     */
    function isEmpty(object) {
      if (!object) return true;
      if (isArray(object) || isStr(object)) {
        return !(object.length > 0);
      }
      for (var k in object) {
        if (hasOwnProperty.call(object, k)) return false;
      }
      return true;
    }
    
    /**
     * Return if string is empty, null, or undefined
     * @param str string to test
     * @returns {boolean} if string is empty
     */
    function isEmptyStr(str) {
      return isStr(str) && (!str || str.length === 0);
    }
    
    /**
     * Iterate object with the function
     * falls back to es5 `forEach`
     * @param {Array|Object} object
     * @param {Function(value, key, object)} fn
     */
    function _each(object, fn) {
      if (isEmpty(object)) return;
      if (isFn(object.forEach)) return object.forEach(fn, this);
      var k = 0;
      var l = object.length;
      if (l > 0) {
        for (; k < l; k++) {
          fn(object[k], k, object);
        }
      } else {
        for (k in object) {
          if (hasOwnProperty.call(object, k)) fn.call(this, object[k], k);
        }
      }
    }
    function contains(a, obj) {
      if (isEmpty(a)) {
        return false;
      }
      if (isFn(a.indexOf)) {
        return a.indexOf(obj) !== -1;
      }
      var i = a.length;
      while (i--) {
        if (a[i] === obj) {
          return true;
        }
      }
      return false;
    }
    
    /**
     * Map an array or object into another array
     * given a function
     * @param {Array|Object} object
     * @param {Function(value, key, object)} callback
     * @return {Array}
     */
    function _map(object, callback) {
      if (isEmpty(object)) return [];
      if (isFn(object.map)) return object.map(callback);
      var output = [];
      _each(object, function (value, key) {
        output.push(callback(value, key, object));
      });
      return output;
    }
    function hasOwn(objectToCheck, propertyToCheckFor) {
      if (objectToCheck.hasOwnProperty) {
        return objectToCheck.hasOwnProperty(propertyToCheckFor);
      } else {
        return typeof objectToCheck[propertyToCheckFor] !== 'undefined' && objectToCheck.constructor.prototype[propertyToCheckFor] !== objectToCheck[propertyToCheckFor];
      }
    }
    ;
    
    /*
    * Inserts an element(elm) as targets child, by default as first child
    * @param {HTMLElement} elm
    * @param {HTMLElement} [doc]
    * @param {HTMLElement} [target]
    * @param {Boolean} [asLastChildChild]
    * @return {HTML Element}
    */
    function insertElement(elm, doc, target, asLastChildChild) {
      doc = doc || document;
      var parentEl;
      if (target) {
        parentEl = doc.getElementsByTagName(target);
      } else {
        parentEl = doc.getElementsByTagName('head');
      }
      try {
        parentEl = parentEl.length ? parentEl : doc.getElementsByTagName('body');
        if (parentEl.length) {
          parentEl = parentEl[0];
          var insertBeforeEl = asLastChildChild ? null : parentEl.firstChild;
          return parentEl.insertBefore(elm, insertBeforeEl);
        }
      } catch (e) {}
    }
    
    /**
     * Returns a promise that completes when the given element triggers a 'load' or 'error' DOM event, or when
     * `timeout` milliseconds have elapsed.
     *
     * @param {HTMLElement} element
     * @param {Number} [timeout]
     * @returns {Promise}
     */
    function waitForElementToLoad(element, timeout) {
      var timer = null;
      return new _utils_promise_js__WEBPACK_IMPORTED_MODULE_4__.GreedyPromise(function (resolve) {
        var onLoad = function onLoad() {
          element.removeEventListener('load', onLoad);
          element.removeEventListener('error', onLoad);
          if (timer != null) {
            window.clearTimeout(timer);
          }
          resolve();
        };
        element.addEventListener('load', onLoad);
        element.addEventListener('error', onLoad);
        if (timeout != null) {
          timer = window.setTimeout(onLoad, timeout);
        }
      });
    }
    
    /**
     * Inserts an image pixel with the specified `url` for cookie sync
     * @param {string} url URL string of the image pixel to load
     * @param  {function} [done] an optional exit callback, used when this usersync pixel is added during an async process
     * @param  {Number} [timeout] an optional timeout in milliseconds for the image to load before calling `done`
     */
    function triggerPixel(url, done, timeout) {
      var img = new Image();
      if (done && internal.isFn(done)) {
        waitForElementToLoad(img, timeout).then(done);
      }
      img.src = url;
    }
    function callBurl(_ref) {
      var source = _ref.source,
        burl = _ref.burl;
      if (source === _constants_json__WEBPACK_IMPORTED_MODULE_2__.S2S.SRC && burl) {
        internal.triggerPixel(burl);
      }
    }
    
    /**
     * Inserts an empty iframe with the specified `html`, primarily used for tracking purposes
     * (though could be for other purposes)
     * @param {string} htmlCode snippet of HTML code used for tracking purposes
     */
    function insertHtmlIntoIframe(htmlCode) {
      if (!htmlCode) {
        return;
      }
      var iframe = document.createElement('iframe');
      iframe.id = getUniqueIdentifierStr();
      iframe.width = 0;
      iframe.height = 0;
      iframe.hspace = '0';
      iframe.vspace = '0';
      iframe.marginWidth = '0';
      iframe.marginHeight = '0';
      iframe.style.display = 'none';
      iframe.style.height = '0px';
      iframe.style.width = '0px';
      iframe.scrolling = 'no';
      iframe.frameBorder = '0';
      iframe.allowtransparency = 'true';
      internal.insertElement(iframe, document, 'body');
      iframe.contentWindow.document.open();
      iframe.contentWindow.document.write(htmlCode);
      iframe.contentWindow.document.close();
    }
    
    /**
     * Inserts empty iframe with the specified `url` for cookie sync
     * @param  {string} url URL to be requested
     * @param  {string} encodeUri boolean if URL should be encoded before inserted. Defaults to true
     * @param  {function} [done] an optional exit callback, used when this usersync pixel is added during an async process
     * @param  {Number} [timeout] an optional timeout in milliseconds for the iframe to load before calling `done`
     */
    function insertUserSyncIframe(url, done, timeout) {
      var iframeHtml = internal.createTrackPixelIframeHtml(url, false, 'allow-scripts allow-same-origin');
      var div = document.createElement('div');
      div.innerHTML = iframeHtml;
      var iframe = div.firstChild;
      if (done && internal.isFn(done)) {
        waitForElementToLoad(iframe, timeout).then(done);
      }
      internal.insertElement(iframe, document, 'html', true);
    }
    
    /**
     * Creates a snippet of HTML that retrieves the specified `url`
     * @param  {string} url URL to be requested
     * @return {string}     HTML snippet that contains the img src = set to `url`
     */
    function createTrackPixelHtml(url) {
      if (!url) {
        return '';
      }
      var escapedUrl = encodeURI(url);
      var img = '<div style="position:absolute;left:0px;top:0px;visibility:hidden;">';
      img += '<img src="' + escapedUrl + '"></div>';
      return img;
    }
    ;
    
    /**
     * Creates a snippet of Iframe HTML that retrieves the specified `url`
     * @param  {string} url plain URL to be requested
     * @param  {string} encodeUri boolean if URL should be encoded before inserted. Defaults to true
     * @param  {string} sandbox string if provided the sandbox attribute will be included with the given value
     * @return {string}     HTML snippet that contains the iframe src = set to `url`
     */
    function createTrackPixelIframeHtml(url) {
      var encodeUri = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var sandbox = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      if (!url) {
        return '';
      }
      if (encodeUri) {
        url = encodeURI(url);
      }
      if (sandbox) {
        sandbox = "sandbox=\"".concat(sandbox, "\"");
      }
      return "<iframe ".concat(sandbox, " id=\"").concat(getUniqueIdentifierStr(), "\"\n      frameborder=\"0\"\n      allowtransparency=\"true\"\n      marginheight=\"0\" marginwidth=\"0\"\n      width=\"0\" hspace=\"0\" vspace=\"0\" height=\"0\"\n      style=\"height:0px;width:0px;display:none;\"\n      scrolling=\"no\"\n      src=\"").concat(url, "\">\n    </iframe>");
    }
    function getValueString(param, val, defaultValue) {
      if (val === undefined || val === null) {
        return defaultValue;
      }
      if (isStr(val)) {
        return val;
      }
      if (isNumber(val)) {
        return val.toString();
      }
      internal.logWarn('Unsuported type for param: ' + param + ' required type: String');
    }
    function uniques(value, index, arry) {
      return arry.indexOf(value) === index;
    }
    function flatten(a, b) {
      return a.concat(b);
    }
    function getBidRequest(id, bidderRequests) {
      if (!id) {
        return;
      }
      var bidRequest;
      bidderRequests.some(function (bidderRequest) {
        var result = (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_5__.find)(bidderRequest.bids, function (bid) {
          return ['bidId', 'adId', 'bid_id'].some(function (type) {
            return bid[type] === id;
          });
        });
        if (result) {
          bidRequest = result;
        }
        return result;
      });
      return bidRequest;
    }
    function getKeys(obj) {
      return Object.keys(obj);
    }
    function getValue(obj, key) {
      return obj[key];
    }
    
    /**
     * Get the key of an object for a given value
     */
    function getKeyByValue(obj, value) {
      for (var prop in obj) {
        if (obj.hasOwnProperty(prop)) {
          if (obj[prop] === value) {
            return prop;
          }
        }
      }
    }
    function getBidderCodes() {
      var adUnits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : owpbjs.adUnits;
      // this could memoize adUnits
      return adUnits.map(function (unit) {
        return unit.bids.map(function (bid) {
          return bid.bidder;
        }).reduce(flatten, []);
      }).reduce(flatten, []).filter(function (bidder) {
        return typeof bidder !== 'undefined';
      }).filter(uniques);
    }
    function isGptPubadsDefined() {
      if (window.googletag && isFn(window.googletag.pubads) && isFn(window.googletag.pubads().getSlots)) {
        return true;
      }
    }
    function isApnGetTagDefined() {
      if (window.apntag && isFn(window.apntag.getTag)) {
        return true;
      }
    }
    
    // This function will get highest cpm value bid, in case of tie it will return the bid with lowest timeToRespond
    var getHighestCpm = getHighestCpmCallback('timeToRespond', function (previous, current) {
      return previous > current;
    });
    
    // This function will get the oldest hightest cpm value bid, in case of tie it will return the bid which came in first
    // Use case for tie: https://github.com/prebid/Prebid.js/issues/2448
    var getOldestHighestCpmBid = getHighestCpmCallback('responseTimestamp', function (previous, current) {
      return previous > current;
    });
    
    // This function will get the latest hightest cpm value bid, in case of tie it will return the bid which came in last
    // Use case for tie: https://github.com/prebid/Prebid.js/issues/2539
    var getLatestHighestCpmBid = getHighestCpmCallback('responseTimestamp', function (previous, current) {
      return previous < current;
    });
    function getHighestCpmCallback(useTieBreakerProperty, tieBreakerCallback) {
      return function (previous, current) {
        if (previous.cpm === current.cpm) {
          return tieBreakerCallback(previous[useTieBreakerProperty], current[useTieBreakerProperty]) ? current : previous;
        }
        return previous.cpm < current.cpm ? current : previous;
      };
    }
    
    /**
     * Fisher–Yates shuffle
     * http://stackoverflow.com/a/6274398
     * https://bost.ocks.org/mike/shuffle/
     * istanbul ignore next
     */
    function shuffle(array) {
      var counter = array.length;
    
      // while there are elements in the array
      while (counter > 0) {
        // pick a random index
        var index = Math.floor(Math.random() * counter);
    
        // decrease counter by 1
        counter--;
    
        // and swap the last element with it
        var temp = array[counter];
        array[counter] = array[index];
        array[index] = temp;
      }
      return array;
    }
    function adUnitsFilter(filter, bid) {
      return (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_5__.includes)(filter, bid && bid.adUnitCode);
    }
    function deepClone(obj) {
      return just_clone__WEBPACK_IMPORTED_MODULE_0___default()(obj);
    }
    function inIframe() {
      try {
        return internal.getWindowSelf() !== internal.getWindowTop();
      } catch (e) {
        return true;
      }
    }
    function isSafariBrowser() {
      return /^((?!chrome|android|crios|fxios).)*safari/i.test(navigator.userAgent);
    }
    function replaceAuctionPrice(str, cpm) {
      if (!str) return;
      return str.replace(/\$\{AUCTION_PRICE\}/g, cpm);
    }
    function replaceClickThrough(str, clicktag) {
      if (!str || !clicktag || typeof clicktag !== 'string') return;
      return str.replace(/\${CLICKTHROUGH}/g, clicktag);
    }
    function timestamp() {
      return new Date().getTime();
    }
    
    /**
     * The returned value represents the time elapsed since the time origin. @see https://developer.mozilla.org/en-US/docs/Web/API/Performance/now
     * @returns {number}
     */
    function getPerformanceNow() {
      return window.performance && window.performance.now && window.performance.now() || 0;
    }
    
    /**
     * When the deviceAccess flag config option is false, no cookies should be read or set
     * @returns {boolean}
     */
    function hasDeviceAccess() {
      return _config_js__WEBPACK_IMPORTED_MODULE_3__.config.getConfig('deviceAccess') !== false;
    }
    
    /**
     * @returns {(boolean|undefined)}
     */
    function checkCookieSupport() {
      if (window.navigator.cookieEnabled || !!document.cookie.length) {
        return true;
      }
    }
    
    /**
     * Given a function, return a function which only executes the original after
     * it's been called numRequiredCalls times.
     *
     * Note that the arguments from the previous calls will *not* be forwarded to the original function.
     * Only the final call's arguments matter.
     *
     * @param {function} func The function which should be executed, once the returned function has been executed
     *   numRequiredCalls times.
     * @param {int} numRequiredCalls The number of times which the returned function needs to be called before
     *   func is.
     */
    function delayExecution(func, numRequiredCalls) {
      if (numRequiredCalls < 1) {
        throw new Error("numRequiredCalls must be a positive number. Got ".concat(numRequiredCalls));
      }
      var numCalls = 0;
      return function () {
        numCalls++;
        if (numCalls === numRequiredCalls) {
          func.apply(this, arguments);
        }
      };
    }
    
    /**
     * https://stackoverflow.com/a/34890276/428704
     * @export
     * @param {array} xs
     * @param {string} key
     * @returns {Object} {${key_value}: ${groupByArray}, key_value: {groupByArray}}
     */
    function groupBy(xs, key) {
      return xs.reduce(function (rv, x) {
        (rv[x[key]] = rv[x[key]] || []).push(x);
        return rv;
      }, {});
    }
    
    /**
     * Build an object consisting of only defined parameters to avoid creating an
     * object with defined keys and undefined values.
     * @param {Object} object The object to pick defined params out of
     * @param {string[]} params An array of strings representing properties to look for in the object
     * @returns {Object} An object containing all the specified values that are defined
     */
    function getDefinedParams(object, params) {
      return params.filter(function (param) {
        return object[param];
      }).reduce(function (bid, param) {
        return Object.assign(bid, (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6__["default"])({}, param, object[param]));
      }, {});
    }
    
    /**
     * @typedef {Object} MediaTypes
     * @property {Object} banner banner configuration
     * @property {Object} native native configuration
     * @property {Object} video video configuration
     */
    
    /**
     * Validates an adunit's `mediaTypes` parameter
     * @param {MediaTypes} mediaTypes mediaTypes parameter to validate
     * @return {boolean} If object is valid
     */
    function isValidMediaTypes(mediaTypes) {
      var SUPPORTED_MEDIA_TYPES = ['banner', 'native', 'video'];
      var SUPPORTED_STREAM_TYPES = ['instream', 'outstream', 'adpod'];
      var types = Object.keys(mediaTypes);
      if (!types.every(function (type) {
        return (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_5__.includes)(SUPPORTED_MEDIA_TYPES, type);
      })) {
        return false;
      }
      if (mediaTypes.video && mediaTypes.video.context) {
        return (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_5__.includes)(SUPPORTED_STREAM_TYPES, mediaTypes.video.context);
      }
      return true;
    }
    
    /**
     * Returns user configured bidder params from adunit
     * @param {Object} adUnits
     * @param {string} adUnitCode code
     * @param {string} bidder code
     * @return {Array} user configured param for the given bidder adunit configuration
     */
    function getUserConfiguredParams(adUnits, adUnitCode, bidder) {
      return adUnits.filter(function (adUnit) {
        return adUnit.code === adUnitCode;
      }).map(function (adUnit) {
        return adUnit.bids;
      }).reduce(flatten, []).filter(function (bidderData) {
        return bidderData.bidder === bidder;
      }).map(function (bidderData) {
        return bidderData.params || {};
      });
    }
    
    /**
     * Returns Do Not Track state
     */
    function getDNT() {
      return navigator.doNotTrack === '1' || window.doNotTrack === '1' || navigator.msDoNotTrack === '1' || navigator.doNotTrack === 'yes';
    }
    var compareCodeAndSlot = function compareCodeAndSlot(slot, adUnitCode) {
      return slot.getAdUnitPath() === adUnitCode || slot.getSlotElementId() === adUnitCode;
    };
    
    /**
     * Returns filter function to match adUnitCode in slot
     * @param {Object} slot GoogleTag slot
     * @return {function} filter function
     */
    function isAdUnitCodeMatchingSlot(slot) {
      return function (adUnitCode) {
        return compareCodeAndSlot(slot, adUnitCode);
      };
    }
    
    /**
     * Returns filter function to match adUnitCode in slot
     * @param {string} adUnitCode AdUnit code
     * @return {function} filter function
     */
    function isSlotMatchingAdUnitCode(adUnitCode) {
      return function (slot) {
        return compareCodeAndSlot(slot, adUnitCode);
      };
    }
    
    /**
     * @summary Uses the adUnit's code in order to find a matching gpt slot object on the page
     */
    function getGptSlotForAdUnitCode(adUnitCode) {
      var matchingSlot;
      if (isGptPubadsDefined()) {
        // find the first matching gpt slot on the page
        matchingSlot = (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_5__.find)(window.googletag.pubads().getSlots(), isSlotMatchingAdUnitCode(adUnitCode));
      }
      return matchingSlot;
    }
    ;
    
    /**
     * @summary Uses the adUnit's code in order to find a matching gptSlot on the page
     */
    function getGptSlotInfoForAdUnitCode(adUnitCode) {
      var matchingSlot = getGptSlotForAdUnitCode(adUnitCode);
      if (matchingSlot) {
        return {
          gptSlot: matchingSlot.getAdUnitPath(),
          divId: matchingSlot.getSlotElementId()
        };
      }
      return {};
    }
    ;
    
    /**
     * Constructs warning message for when unsupported bidders are dropped from an adunit
     * @param {Object} adUnit ad unit from which the bidder is being dropped
     * @param {string} bidder bidder code that is not compatible with the adUnit
     * @return {string} warning message to display when condition is met
     */
    function unsupportedBidderMessage(adUnit, bidder) {
      var mediaType = Object.keys(adUnit.mediaTypes || {
        'banner': 'banner'
      }).join(', ');
      return "\n    ".concat(adUnit.code, " is a ").concat(mediaType, " ad unit\n    containing bidders that don't support ").concat(mediaType, ": ").concat(bidder, ".\n    This bidder won't fetch demand.\n  ");
    }
    
    /**
     * Checks input is integer or not
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger
     * @param {*} value
     */
    function isInteger(value) {
      if (Number.isInteger) {
        return Number.isInteger(value);
      } else {
        return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
      }
    }
    
    /**
     * Converts a string value in camel-case to underscore eg 'placementId' becomes 'placement_id'
     * @param {string} value string value to convert
     */
    function convertCamelToUnderscore(value) {
      return value.replace(/(?:^|\.?)([A-Z])/g, function (x, y) {
        return '_' + y.toLowerCase();
      }).replace(/^_/, '');
    }
    
    /**
     * Returns a new object with undefined properties removed from given object
     * @param obj the object to clean
     */
    function cleanObj(obj) {
      return Object.keys(obj).reduce(function (newObj, key) {
        if (typeof obj[key] !== 'undefined') {
          newObj[key] = obj[key];
        }
        return newObj;
      }, {});
    }
    
    /**
     * Create a new object with selected properties.  Also allows property renaming and transform functions.
     * @param obj the original object
     * @param properties An array of desired properties
     */
    function pick(obj, properties) {
      if ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_1__["default"])(obj) !== 'object') {
        return {};
      }
      return properties.reduce(function (newObj, prop, i) {
        if (typeof prop === 'function') {
          return newObj;
        }
        var newProp = prop;
        var match = prop.match(/^(.+?)\sas\s(.+?)$/i);
        if (match) {
          prop = match[1];
          newProp = match[2];
        }
        var value = obj[prop];
        if (typeof properties[i + 1] === 'function') {
          value = properties[i + 1](value, newObj);
        }
        if (typeof value !== 'undefined') {
          newObj[newProp] = value;
        }
        return newObj;
      }, {});
    }
    
    /**
     * Converts an object of arrays (either strings or numbers) into an array of objects containing key and value properties
     * normally read from bidder params
     * eg { foo: ['bar', 'baz'], fizz: ['buzz'] }
     * becomes [{ key: 'foo', value: ['bar', 'baz']}, {key: 'fizz', value: ['buzz']}]
     * @param {Object} keywords object of arrays representing keyvalue pairs
     * @param {string} paramName name of parent object (eg 'keywords') containing keyword data, used in error handling
     */
    function transformBidderParamKeywords(keywords) {
      var paramName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'keywords';
      var arrs = [];
      _each(keywords, function (v, k) {
        if (isArray(v)) {
          var values = [];
          _each(v, function (val) {
            val = getValueString(paramName + '.' + k, val);
            if (val || val === '') {
              values.push(val);
            }
          });
          v = values;
        } else {
          v = getValueString(paramName + '.' + k, v);
          if (isStr(v)) {
            v = [v];
          } else {
            return;
          } // unsuported types - don't send a key
        }
    
        arrs.push({
          key: k,
          value: v
        });
      });
      return arrs;
    }
    
    /**
     * Try to convert a value to a type.
     * If it can't be done, the value will be returned.
     *
     * @param {string} typeToConvert The target type. e.g. "string", "number", etc.
     * @param {*} value The value to be converted into typeToConvert.
     */
    function tryConvertType(typeToConvert, value) {
      if (typeToConvert === 'string') {
        return value && value.toString();
      } else if (typeToConvert === 'number') {
        return Number(value);
      } else {
        return value;
      }
    }
    function convertTypes(types, params) {
      Object.keys(types).forEach(function (key) {
        if (params[key]) {
          if (isFn(types[key])) {
            params[key] = types[key](params[key]);
          } else {
            params[key] = tryConvertType(types[key], params[key]);
          }
    
          // don't send invalid values
          if (isNaN(params[key])) {
            delete params.key;
          }
        }
      });
      return params;
    }
    function isArrayOfNums(val, size) {
      return isArray(val) && (size ? val.length === size : true) && val.every(function (v) {
        return isInteger(v);
      });
    }
    
    /**
     * Creates an array of n length and fills each item with the given value
     */
    function fill(value, length) {
      var newArray = [];
      for (var i = 0; i < length; i++) {
        var valueToPush = isPlainObject(value) ? deepClone(value) : value;
        newArray.push(valueToPush);
      }
      return newArray;
    }
    
    /**
     * http://npm.im/chunk
     * Returns an array with *size* chunks from given array
     *
     * Example:
     * ['a', 'b', 'c', 'd', 'e'] chunked by 2 =>
     * [['a', 'b'], ['c', 'd'], ['e']]
     */
    function chunk(array, size) {
      var newArray = [];
      for (var i = 0; i < Math.ceil(array.length / size); i++) {
        var start = i * size;
        var end = start + size;
        newArray.push(array.slice(start, end));
      }
      return newArray;
    }
    function getMinValueFromArray(array) {
      return Math.min.apply(Math, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__["default"])(array));
    }
    function getMaxValueFromArray(array) {
      return Math.max.apply(Math, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__["default"])(array));
    }
    
    /**
     * This function will create compare function to sort on object property
     * @param {string} property
     * @returns {function} compare function to be used in sorting
     */
    function compareOn(property) {
      return function compare(a, b) {
        if (a[property] < b[property]) {
          return 1;
        }
        if (a[property] > b[property]) {
          return -1;
        }
        return 0;
      };
    }
    function parseQS(query) {
      return !query ? {} : query.replace(/^\?/, '').split('&').reduce(function (acc, criteria) {
        var _criteria$split = criteria.split('='),
          _criteria$split2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_8__["default"])(_criteria$split, 2),
          k = _criteria$split2[0],
          v = _criteria$split2[1];
        if (/\[\]$/.test(k)) {
          k = k.replace('[]', '');
          acc[k] = acc[k] || [];
          acc[k].push(v);
        } else {
          acc[k] = v || '';
        }
        return acc;
      }, {});
    }
    function formatQS(query) {
      return Object.keys(query).map(function (k) {
        return Array.isArray(query[k]) ? query[k].map(function (v) {
          return "".concat(k, "[]=").concat(v);
        }).join('&') : "".concat(k, "=").concat(query[k]);
      }).join('&');
    }
    function parseUrl(url, options) {
      var parsed = document.createElement('a');
      if (options && 'noDecodeWholeURL' in options && options.noDecodeWholeURL) {
        parsed.href = url;
      } else {
        parsed.href = decodeURIComponent(url);
      }
      // in window.location 'search' is string, not object
      var qsAsString = options && 'decodeSearchAsString' in options && options.decodeSearchAsString;
      return {
        href: parsed.href,
        protocol: (parsed.protocol || '').replace(/:$/, ''),
        hostname: parsed.hostname,
        port: +parsed.port,
        pathname: parsed.pathname.replace(/^(?!\/)/, '/'),
        search: qsAsString ? parsed.search : internal.parseQS(parsed.search || ''),
        hash: (parsed.hash || '').replace(/^#/, ''),
        host: parsed.host || window.location.host
      };
    }
    function buildUrl(obj) {
      return (obj.protocol || 'http') + '://' + (obj.host || obj.hostname + (obj.port ? ":".concat(obj.port) : '')) + (obj.pathname || '') + (obj.search ? "?".concat(internal.formatQS(obj.search || '')) : '') + (obj.hash ? "#".concat(obj.hash) : '');
    }
    
    /**
     * This function deeply compares two objects checking for their equivalence.
     * @param {Object} obj1
     * @param {Object} obj2
     * @param checkTypes {boolean} if set, two objects with identical properties but different constructors will *not*
     * be considered equivalent.
     * @returns {boolean}
     */
    function deepEqual(obj1, obj2) {
      var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref2$checkTypes = _ref2.checkTypes,
        checkTypes = _ref2$checkTypes === void 0 ? false : _ref2$checkTypes;
      if (obj1 === obj2) return true;else if ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_1__["default"])(obj1) === 'object' && obj1 !== null && (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_1__["default"])(obj2) === 'object' && obj2 !== null && (!checkTypes || obj1.constructor === obj2.constructor)) {
        if (Object.keys(obj1).length !== Object.keys(obj2).length) return false;
        for (var prop in obj1) {
          if (obj2.hasOwnProperty(prop)) {
            if (!deepEqual(obj1[prop], obj2[prop], {
              checkTypes: checkTypes
            })) {
              return false;
            }
          } else {
            return false;
          }
        }
        return true;
      } else {
        return false;
      }
    }
    function mergeDeep(target) {
      for (var _len2 = arguments.length, sources = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        sources[_key2 - 1] = arguments[_key2];
      }
      if (!sources.length) return target;
      var source = sources.shift();
      if (isPlainObject(target) && isPlainObject(source)) {
        var _loop = function _loop(key) {
          if (isPlainObject(source[key])) {
            if (!target[key]) Object.assign(target, (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6__["default"])({}, key, {}));
            mergeDeep(target[key], source[key]);
          } else if (isArray(source[key])) {
            if (!target[key]) {
              Object.assign(target, (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6__["default"])({}, key, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__["default"])(source[key])));
            } else if (isArray(target[key])) {
              source[key].forEach(function (obj) {
                var addItFlag = 1;
                for (var i = 0; i < target[key].length; i++) {
                  if (deepEqual(target[key][i], obj)) {
                    addItFlag = 0;
                    break;
                  }
                }
                if (addItFlag) {
                  target[key].push(obj);
                }
              });
            }
          } else {
            Object.assign(target, (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6__["default"])({}, key, source[key]));
          }
        };
        for (var key in source) {
          _loop(key);
        }
      }
      return mergeDeep.apply(void 0, [target].concat(sources));
    }
    
    /**
     * returns a hash of a string using a fast algorithm
     * source: https://stackoverflow.com/a/52171480/845390
     * @param str
     * @param seed (optional)
     * @returns {string}
     */
    function cyrb53Hash(str) {
      var seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      // IE doesn't support imul
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul#Polyfill
      var imul = function imul(opA, opB) {
        if (isFn(Math.imul)) {
          return Math.imul(opA, opB);
        } else {
          opB |= 0; // ensure that opB is an integer. opA will automatically be coerced.
          // floating points give us 53 bits of precision to work with plus 1 sign bit
          // automatically handled for our convienence:
          // 1. 0x003fffff /*opA & 0x000fffff*/ * 0x7fffffff /*opB*/ = 0x1fffff7fc00001
          //    0x1fffff7fc00001 < Number.MAX_SAFE_INTEGER /*0x1fffffffffffff*/
          var result = (opA & 0x003fffff) * opB;
          // 2. We can remove an integer coersion from the statement above because:
          //    0x1fffff7fc00001 + 0xffc00000 = 0x1fffffff800001
          //    0x1fffffff800001 < Number.MAX_SAFE_INTEGER /*0x1fffffffffffff*/
          if (opA & 0xffc00000) result += (opA & 0xffc00000) * opB | 0;
          return result | 0;
        }
      };
      var h1 = 0xdeadbeef ^ seed;
      var h2 = 0x41c6ce57 ^ seed;
      for (var i = 0, ch; i < str.length; i++) {
        ch = str.charCodeAt(i);
        h1 = imul(h1 ^ ch, 2654435761);
        h2 = imul(h2 ^ ch, 1597334677);
      }
      h1 = imul(h1 ^ h1 >>> 16, 2246822507) ^ imul(h2 ^ h2 >>> 13, 3266489909);
      h2 = imul(h2 ^ h2 >>> 16, 2246822507) ^ imul(h1 ^ h1 >>> 13, 3266489909);
      return (4294967296 * (2097151 & h2) + (h1 >>> 0)).toString();
    }
    function skipUndefinedValues(obj) {
      var newObj = {};
      var prop;
      for (prop in obj) {
        if (obj[prop]) {
          newObj[prop] = obj[prop];
        }
      }
      return newObj;
    }
    
    /**
     * returns a window object, which holds the provided document or null
     * @param {Document} doc
     * @returns {Window}
     */
    function getWindowFromDocument(doc) {
      return doc ? doc.defaultView : null;
    }
    
    /**
     * returns the result of `JSON.parse(data)`, or undefined if that throws an error.
     * @param data
     * @returns {any}
     */
    function safeJSONParse(data) {
      try {
        return JSON.parse(data);
      } catch (e) {}
    }
    
    /**
     * Returns a memoized version of `fn`.
     *
     * @param fn
     * @param key cache key generator, invoked with the same arguments passed to `fn`.
     *        By default, the first argument is used as key.
     * @return {function(): any}
     */
    function memoize(fn) {
      var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (arg) {
        return arg;
      };
      var cache = new Map();
      var memoized = function memoized() {
        var cacheKey = key.apply(this, arguments);
        if (!cache.has(cacheKey)) {
          cache.set(cacheKey, fn.apply(this, arguments));
        }
        return cache.get(cacheKey);
      };
      memoized.clear = cache.clear.bind(cache);
      return memoized;
    }
    
    /**
     * Sets dataset attributes on a script
     * @param {Script} script
     * @param {object} attributes
     */
    function setScriptAttributes(script, attributes) {
      for (var key in attributes) {
        if (attributes.hasOwnProperty(key)) {
          script.setAttribute(key, attributes[key]);
        }
      }
    }
    
    /**
     * Encode a string for inclusion in HTML.
     * See https://pragmaticwebsecurity.com/articles/spasecurity/json-stringify-xss.html and
     * https://codeql.github.com/codeql-query-help/javascript/js-bad-code-sanitization/
     * @return {string}
     */
    var escapeUnsafeChars = function () {
      var escapes = {
        '<': "\\u003C",
        '>': "\\u003E",
        '/': "\\u002F",
        '\\': '\\\\',
        '\b': '\\b',
        '\f': '\\f',
        '\n': '\\n',
        '\r': '\\r',
        '\t': '\\t',
        '\0': '\\0',
        "\u2028": "\\u2028",
        "\u2029": "\\u2029"
      };
      return function (str) {
        return str.replace(/[<>\b\f\n\r\t\0\u2028\u2029\\]/g, function (x) {
          return escapes[x];
        });
      };
    }();
    
    /***/ }),
    
    /***/ "./src/utils/cpm.js":
    /*!**************************!*\
      !*** ./src/utils/cpm.js ***!
      \**************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "adjustCpm": function() { return /* binding */ adjustCpm; }
    /* harmony export */ });
    /* harmony import */ var _auctionManager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auctionManager.js */ "./src/auctionManager.js");
    /* harmony import */ var _bidderSettings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bidderSettings.js */ "./src/bidderSettings.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils.js */ "./src/utils.js");
    
    
    
    function adjustCpm(cpm, bidResponse, bidRequest) {
      var _bidRequest;
      var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
        _ref$index = _ref.index,
        index = _ref$index === void 0 ? _auctionManager_js__WEBPACK_IMPORTED_MODULE_0__.auctionManager.index : _ref$index,
        _ref$bs = _ref.bs,
        bs = _ref$bs === void 0 ? _bidderSettings_js__WEBPACK_IMPORTED_MODULE_1__.bidderSettings : _ref$bs;
      bidRequest = bidRequest || index.getBidRequest(bidResponse);
      var bidCpmAdjustment = bs.get((bidResponse === null || bidResponse === void 0 ? void 0 : bidResponse.bidderCode) || ((_bidRequest = bidRequest) === null || _bidRequest === void 0 ? void 0 : _bidRequest.bidder), 'bidCpmAdjustment');
      if (bidCpmAdjustment && typeof bidCpmAdjustment === 'function') {
        try {
          return bidCpmAdjustment(cpm, Object.assign({}, bidResponse), bidRequest);
        } catch (e) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)('Error during bid adjustment', e);
        }
      }
      return cpm;
    }
    
    /***/ }),
    
    /***/ "./src/utils/perfMetrics.js":
    /*!**********************************!*\
      !*** ./src/utils/perfMetrics.js ***!
      \**********************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "newMetrics": function() { return /* binding */ newMetrics; },
    /* harmony export */   "timedAuctionHook": function() { return /* binding */ timedAuctionHook; },
    /* harmony export */   "timedBidResponseHook": function() { return /* binding */ timedBidResponseHook; },
    /* harmony export */   "useMetrics": function() { return /* binding */ useMetrics; }
    /* harmony export */ });
    /* unused harmony exports CONFIG_TOGGLE, metricsFactory, hookTimer */
    /* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
    /* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config.js */ "./src/config.js");
    
    function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
    function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
    function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
    
    var CONFIG_TOGGLE = 'performanceMetrics';
    var getTime = window.performance && window.performance.now ? function () {
      return window.performance.now();
    } : function () {
      return Date.now();
    };
    var NODES = new WeakMap();
    function metricsFactory() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$now = _ref.now,
        now = _ref$now === void 0 ? getTime : _ref$now,
        _ref$mkNode = _ref.mkNode,
        mkNode = _ref$mkNode === void 0 ? makeNode : _ref$mkNode,
        _ref$mkTimer = _ref.mkTimer,
        mkTimer = _ref$mkTimer === void 0 ? makeTimer : _ref$mkTimer,
        _ref$mkRenamer = _ref.mkRenamer,
        mkRenamer = _ref$mkRenamer === void 0 ? function (rename) {
          return rename;
        } : _ref$mkRenamer,
        _ref$nodes = _ref.nodes,
        nodes = _ref$nodes === void 0 ? NODES : _ref$nodes;
      return function newMetrics() {
        function makeMetrics(self) {
          var rename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (n) {
            return {
              forEach: function forEach(fn) {
                fn(n);
              }
            };
          };
          rename = mkRenamer(rename);
          function accessor(slot) {
            return function (name) {
              return self.dfWalk({
                visit: function visit(edge, node) {
                  var obj = node[slot];
                  if (obj.hasOwnProperty(name)) {
                    return obj[name];
                  }
                }
              });
            };
          }
          var getTimestamp = accessor('timestamps');
    
          /**
           * Register a metric.
           *
           * @param name metric name
           * @param value metric valiue
           */
          function setMetric(name, value) {
            var names = rename(name);
            self.dfWalk({
              follow: function follow(inEdge, outEdge) {
                return outEdge.propagate && (!inEdge || !inEdge.stopPropagation);
              },
              visit: function visit(edge, node) {
                names.forEach(function (name) {
                  if (edge == null) {
                    node.metrics[name] = value;
                  } else {
                    if (!node.groups.hasOwnProperty(name)) {
                      node.groups[name] = [];
                    }
                    node.groups[name].push(value);
                  }
                });
              }
            });
          }
    
          /**
           * Mark the current time as a checkpoint with the given name, to be referenced later
           * by `timeSince` or `timeBetween`.
           *
           * @param name checkpoint name
           */
          function checkpoint(name) {
            self.timestamps[name] = now();
          }
    
          /**
           * Get the tame passed since `checkpoint`, and optionally save it as a metric.
           *
           * @param checkpoint checkpoint name
           * @param metric? metric name
           * @return {number} time between now and `checkpoint`
           */
          function timeSince(checkpoint, metric) {
            var ts = getTimestamp(checkpoint);
            var elapsed = ts != null ? now() - ts : null;
            if (metric != null) {
              setMetric(metric, elapsed);
            }
            return elapsed;
          }
    
          /**
           * Get the time passed between `startCheckpoint` and `endCheckpoint`, optionally saving it as a metric.
           *
           * @param startCheckpoint begin checkpoint
           * @param endCheckpoint end checkpoint
           * @param metric? metric name
           * @return {number} time passed between `startCheckpoint` and `endCheckpoint`
           */
          function timeBetween(startCheckpoint, endCheckpoint, metric) {
            var start = getTimestamp(startCheckpoint);
            var end = getTimestamp(endCheckpoint);
            var elapsed = start != null && end != null ? end - start : null;
            if (metric != null) {
              setMetric(metric, elapsed);
            }
            return elapsed;
          }
    
          /**
           * A function that, when called, stops a time measure and saves it as a metric.
           *
           * @typedef {function(): void} MetricsTimer
           * @template {function} F
           * @property {function(F): F} stopBefore returns a wrapper around the given function that begins by
           *   stopping this time measure.
           * @property {function(F): F} stopAfter returns a wrapper around the given function that ends by
           *   stopping this time measure.
           */
    
          /**
           * Start measuring a time metric with the given name.
           *
           * @param name metric name
           * @return {MetricsTimer}
           */
          function startTiming(name) {
            return mkTimer(now, function (val) {
              return setMetric(name, val);
            });
          }
    
          /**
           * Run fn and measure the time spent in it.
           *
           * @template T
           * @param name the name to use for the measured time metric
           * @param {function(): T} fn
           * @return {T} the return value of `fn`
           */
          function measureTime(name, fn) {
            return startTiming(name).stopAfter(fn)();
          }
    
          /**
           * @typedef {function: T} HookFn
           * @property {function(T): void} bail
           *
           * @template T
           * @typedef {T: HookFn} TimedHookFn
           * @property {function(): void} stopTiming
           * @property {T} untimed
           */
    
          /**
           * Convenience method for measuring time spent in a `.before` or `.after` hook.
           *
           * @template T
           * @param name metric name
           * @param {HookFn} next the hook's `next` (first) argument
           * @param {function(TimedHookFn): T} fn a function that will be run immediately; it takes `next`,
           *    where both `next` and `next.bail` automatically
           *    call `stopTiming` before continuing with the original hook.
           * @return {T} fn's return value
           */
          function measureHookTime(name, next, fn) {
            var stopTiming = startTiming(name);
            return fn(function (orig) {
              var next = stopTiming.stopBefore(orig);
              next.bail = orig.bail && stopTiming.stopBefore(orig.bail);
              next.stopTiming = stopTiming;
              next.untimed = orig;
              return next;
            }(next));
          }
    
          /**
           * Get all registered metrics.
           * @return {{}}
           */
          function getMetrics() {
            var result = {};
            self.dfWalk({
              visit: function visit(edge, node) {
                result = Object.assign({}, !edge || edge.includeGroups ? node.groups : null, node.metrics, result);
              }
            });
            return result;
          }
    
          /**
           * Create and return a new metrics object that starts as a view on all metrics registered here,
           * and - by default - also propagates all new metrics here.
           *
           * Propagated metrics are grouped together, and intended for repeated operations. For example, with the following:
           *
           * ```
           * const metrics = newMetrics();
           * const requests = metrics.measureTime('buildRequests', buildRequests)
           * requests.forEach((req) => {
           *   const requestMetrics = metrics.fork();
           *   requestMetrics.measureTime('processRequest', () => processRequest(req);
           * })
           * ```
           *
           * if `buildRequests` takes 10ms and returns 3 objects, which respectively take 100, 200, and 300ms in `processRequest`, then
           * the final `metrics.getMetrics()` would be:
           *
           * ```
           * {
           *    buildRequests: 10,
           *    processRequest: [100, 200, 300]
           * }
           * ```
           *
           * while the inner `requestMetrics.getMetrics()` would be:
           *
           * ```
           * {
           *   buildRequests: 10,
           *   processRequest: 100 // or 200 for the 2nd loop, etc
           * }
           * ```
           *
           *
           * @param propagate if false, the forked metrics will not be propagated here
           * @param stopPropagation if true, propagation from the new metrics is stopped here - instead of
           *   continuing up the chain (if for example these metrics were themselves created through `.fork()`)
           * @param includeGroups if true, the forked metrics will also replicate metrics that were propagated
           *   here from elsewhere. For example:
           *   ```
           *   const metrics = newMetrics();
           *   const op1 = metrics.fork();
           *   const withoutGroups = metrics.fork();
           *   const withGroups = metrics.fork({includeGroups: true});
           *   op1.setMetric('foo', 'bar');
           *   withoutGroups.getMetrics() // {}
           *   withGroups.getMetrics() // {foo: ['bar']}
           *   ```
           */
          function fork() {
            var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              _ref2$propagate = _ref2.propagate,
              propagate = _ref2$propagate === void 0 ? true : _ref2$propagate,
              _ref2$stopPropagation = _ref2.stopPropagation,
              stopPropagation = _ref2$stopPropagation === void 0 ? false : _ref2$stopPropagation,
              _ref2$includeGroups = _ref2.includeGroups,
              includeGroups = _ref2$includeGroups === void 0 ? false : _ref2$includeGroups;
            return makeMetrics(mkNode([[self, {
              propagate: propagate,
              stopPropagation: stopPropagation,
              includeGroups: includeGroups
            }]]), rename);
          }
    
          /**
           * Join `otherMetrics` with these; all metrics from `otherMetrics` will (by default) be propagated here,
           * and all metrics from here will be included in `otherMetrics`.
           *
           * `propagate`, `stopPropagation` and `includeGroups` have the same semantics as in `.fork()`.
           */
          function join(otherMetrics) {
            var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
              _ref3$propagate = _ref3.propagate,
              propagate = _ref3$propagate === void 0 ? true : _ref3$propagate,
              _ref3$stopPropagation = _ref3.stopPropagation,
              stopPropagation = _ref3$stopPropagation === void 0 ? false : _ref3$stopPropagation,
              _ref3$includeGroups = _ref3.includeGroups,
              includeGroups = _ref3$includeGroups === void 0 ? false : _ref3$includeGroups;
            var other = nodes.get(otherMetrics);
            if (other != null) {
              other.addParent(self, {
                propagate: propagate,
                stopPropagation: stopPropagation,
                includeGroups: includeGroups
              });
            }
          }
    
          /**
           * return a version of these metrics where all new metrics are renamed according to `renameFn`.
           *
           * @param {function(String): Array[String]} renameFn
           */
          function renameWith(renameFn) {
            return makeMetrics(self, renameFn);
          }
    
          /**
           * Create a new metrics object that uses the same propagation and renaming rules as this one.
           */
          function newMetrics() {
            return makeMetrics(self.newSibling(), rename);
          }
          var metrics = {
            startTiming: startTiming,
            measureTime: measureTime,
            measureHookTime: measureHookTime,
            checkpoint: checkpoint,
            timeSince: timeSince,
            timeBetween: timeBetween,
            setMetric: setMetric,
            getMetrics: getMetrics,
            fork: fork,
            join: join,
            newMetrics: newMetrics,
            renameWith: renameWith,
            toJSON: function toJSON() {
              return getMetrics();
            }
          };
          nodes.set(metrics, self);
          return metrics;
        }
        return makeMetrics(mkNode([]));
      };
    }
    function wrapFn(fn, before, after) {
      return function () {
        before && before();
        try {
          return fn.apply(this, arguments);
        } finally {
          after && after();
        }
      };
    }
    function makeTimer(now, cb) {
      var start = now();
      var done = false;
      function stopTiming() {
        if (!done) {
          // eslint-disable-next-line standard/no-callback-literal
          cb(now() - start);
          done = true;
        }
      }
      stopTiming.stopBefore = function (fn) {
        return wrapFn(fn, stopTiming);
      };
      stopTiming.stopAfter = function (fn) {
        return wrapFn(fn, null, stopTiming);
      };
      return stopTiming;
    }
    function makeNode(parents) {
      return {
        metrics: {},
        timestamps: {},
        groups: {},
        addParent: function addParent(node, edge) {
          parents.push([node, edge]);
        },
        newSibling: function newSibling() {
          return makeNode(parents.slice());
        },
        dfWalk: function dfWalk() {
          var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            visit = _ref4.visit,
            _ref4$follow = _ref4.follow,
            follow = _ref4$follow === void 0 ? function () {
              return true;
            } : _ref4$follow,
            _ref4$visited = _ref4.visited,
            visited = _ref4$visited === void 0 ? new Set() : _ref4$visited,
            inEdge = _ref4.inEdge;
          var res;
          if (!visited.has(this)) {
            visited.add(this);
            res = visit(inEdge, this);
            if (res != null) return res;
            var _iterator = _createForOfIteratorHelper(parents),
              _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var _step$value = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__["default"])(_step.value, 2),
                  parent = _step$value[0],
                  outEdge = _step$value[1];
                if (follow(inEdge, outEdge)) {
                  res = parent.dfWalk({
                    visit: visit,
                    follow: follow,
                    visited: visited,
                    inEdge: outEdge
                  });
                  if (res != null) return res;
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
        }
      };
    }
    var nullMetrics = function () {
      var nop = function nop() {};
      var empty = function empty() {
        return {};
      };
      var none = {
        forEach: nop
      };
      var nullTimer = function nullTimer() {
        return null;
      };
      nullTimer.stopBefore = function (fn) {
        return fn;
      };
      nullTimer.stopAfter = function (fn) {
        return fn;
      };
      var nullNode = Object.defineProperties({
        dfWalk: nop,
        newSibling: function newSibling() {
          return nullNode;
        },
        addParent: nop
      }, Object.fromEntries(['metrics', 'timestamps', 'groups'].map(function (prop) {
        return [prop, {
          get: empty
        }];
      })));
      return metricsFactory({
        now: function now() {
          return 0;
        },
        mkNode: function mkNode() {
          return nullNode;
        },
        mkRenamer: function mkRenamer() {
          return function () {
            return none;
          };
        },
        mkTimer: function mkTimer() {
          return nullTimer;
        },
        nodes: {
          get: nop,
          set: nop
        }
      })();
    }();
    var enabled = true;
    _config_js__WEBPACK_IMPORTED_MODULE_1__.config.getConfig(CONFIG_TOGGLE, function (cfg) {
      enabled = !!cfg[CONFIG_TOGGLE];
    });
    
    /**
     * convenience fallback function for metrics that may be undefined, especially during tests.
     */
    function useMetrics(metrics) {
      return enabled && metrics || nullMetrics;
    }
    var newMetrics = function () {
      var makeMetrics = metricsFactory();
      return function () {
        return enabled ? makeMetrics() : nullMetrics;
      };
    }();
    function hookTimer(prefix, getMetrics) {
      return function (name, hookFn) {
        return function (next) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          var that = this;
          return useMetrics(getMetrics.apply(that, args)).measureHookTime(prefix + name, next, function (next) {
            return hookFn.call.apply(hookFn, [that, next].concat(args));
          });
        };
      };
    }
    var timedAuctionHook = hookTimer('requestBids.', function (req) {
      return req.metrics;
    });
    var timedBidResponseHook = hookTimer('addBidResponse.', function (_, bid) {
      return bid.metrics;
    });
    
    /***/ }),
    
    /***/ "./src/utils/promise.js":
    /*!******************************!*\
      !*** ./src/utils/promise.js ***!
      \******************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "GreedyPromise": function() { return /* binding */ GreedyPromise; },
    /* harmony export */   "defer": function() { return /* binding */ defer; }
    /* harmony export */ });
    /* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
    /* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
    /* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
    /* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ "./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js");
    /* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/esm/get.js");
    /* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
    /* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
    /* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
    /* harmony import */ var _babel_runtime_helpers_classPrivateFieldGet__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @babel/runtime/helpers/classPrivateFieldGet */ "./node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js");
    /* harmony import */ var _babel_runtime_helpers_classPrivateFieldSet__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/classPrivateFieldSet */ "./node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js");
    /* harmony import */ var _prebidGlobal_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../prebidGlobal.js */ "./src/prebidGlobal.js");
    
    
    
    
    
    
    
    
    
    
    function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_0__["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_0__["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__["default"])(this, result); }; }
    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
    function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
    function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
    
    var SUCCESS = 0;
    var FAIL = 1;
    
    /**
     * A version of Promise that runs callbacks synchronously when it can (i.e. after it's been fulfilled or rejected).
     */
    var _result = /*#__PURE__*/new WeakMap();
    var _callbacks = /*#__PURE__*/new WeakMap();
    var _parent = /*#__PURE__*/new WeakMap();
    var GreedyPromise = /*#__PURE__*/function (_ref) {
      (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__["default"])(GreedyPromise, _ref);
      var _super = _createSuper(GreedyPromise);
      function GreedyPromise(resolver) {
        var _this;
        (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3__["default"])(this, GreedyPromise);
        var result = [];
        var callbacks = [];
        function handler(type, resolveFn) {
          return function (value) {
            if (!result.length) {
              result.push(type, value);
              while (callbacks.length) {
                callbacks.shift()();
              }
              resolveFn(value);
            }
          };
        }
        _this = _super.call(this, typeof resolver !== 'function' ? resolver // let super throw an error
        : function (resolve, reject) {
          var rejectHandler = handler(FAIL, reject);
          var resolveHandler = function () {
            var done = handler(SUCCESS, resolve);
            return function (value) {
              return typeof (value === null || value === void 0 ? void 0 : value.then) === 'function' ? value.then(done, rejectHandler) : done(value);
            };
          }();
          try {
            resolver(resolveHandler, rejectHandler);
          } catch (e) {
            rejectHandler(e);
          }
        });
        _classPrivateFieldInitSpec((0,_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__["default"])(_this), _result, {
          writable: true,
          value: void 0
        });
        _classPrivateFieldInitSpec((0,_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__["default"])(_this), _callbacks, {
          writable: true,
          value: void 0
        });
        _classPrivateFieldInitSpec((0,_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__["default"])(_this), _parent, {
          writable: true,
          value: null
        });
        (0,_babel_runtime_helpers_classPrivateFieldSet__WEBPACK_IMPORTED_MODULE_5__["default"])((0,_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__["default"])(_this), _result, result);
        (0,_babel_runtime_helpers_classPrivateFieldSet__WEBPACK_IMPORTED_MODULE_5__["default"])((0,_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__["default"])(_this), _callbacks, callbacks);
        return _this;
      }
      (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_6__["default"])(GreedyPromise, [{
        key: "then",
        value: function then(onSuccess, onError) {
          var _this2 = this;
          if (typeof onError === 'function') {
            // if an error handler is provided, attach a dummy error handler to super,
            // and do the same for all promises without an error handler that precede this one in a chain.
            // This is to avoid unhandled rejection events / warnings for errors that were, in fact, handled;
            // since we are not using super's callback mechanisms we need to make it aware of this separately.
            var node = this;
            while (node) {
              (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_7__["default"])((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_0__["default"])(GreedyPromise.prototype), "then", this).call(node, null, function () {
                return null;
              });
              var next = (0,_babel_runtime_helpers_classPrivateFieldGet__WEBPACK_IMPORTED_MODULE_8__["default"])(node, _parent);
              (0,_babel_runtime_helpers_classPrivateFieldSet__WEBPACK_IMPORTED_MODULE_5__["default"])(node, _parent, null); // since we attached a handler already, we are no longer interested in what will happen later in the chain
              node = next;
            }
          }
          var result = (0,_babel_runtime_helpers_classPrivateFieldGet__WEBPACK_IMPORTED_MODULE_8__["default"])(this, _result);
          var res = new GreedyPromise(function (resolve, reject) {
            var continuation = function continuation() {
              var value = result[1];
              var _ref2 = result[0] === SUCCESS ? [onSuccess, resolve] : [onError, reject],
                _ref3 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_9__["default"])(_ref2, 2),
                handler = _ref3[0],
                resolveFn = _ref3[1];
              if (typeof handler === 'function') {
                try {
                  value = handler(value);
                } catch (e) {
                  reject(e);
                  return;
                }
                resolveFn = resolve;
              }
              resolveFn(value);
            };
            result.length ? continuation() : (0,_babel_runtime_helpers_classPrivateFieldGet__WEBPACK_IMPORTED_MODULE_8__["default"])(_this2, _callbacks).push(continuation);
          });
          (0,_babel_runtime_helpers_classPrivateFieldSet__WEBPACK_IMPORTED_MODULE_5__["default"])(res, _parent, this);
          return res;
        }
      }], [{
        key: "timeout",
        value:
        /**
         * Convenience wrapper for setTimeout; takes care of returning an already fulfilled GreedyPromise when the delay is zero.
         *
         * @param {Number} delayMs delay in milliseconds
         * @returns {GreedyPromise} a promise that resolves (to undefined) in `delayMs` milliseconds
         */
        function timeout() {
          var delayMs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
          return new GreedyPromise(function (resolve) {
            delayMs === 0 ? resolve() : setTimeout(resolve, delayMs);
          });
        }
      }, {
        key: "resolve",
        value: function resolve(value) {
          return new this(function (resolve) {
            return resolve(value);
          });
        }
      }, {
        key: "reject",
        value: function reject(error) {
          return new this(function (resolve, reject) {
            return reject(error);
          });
        }
      }]);
      return GreedyPromise;
    }((0,_prebidGlobal_js__WEBPACK_IMPORTED_MODULE_10__.getGlobal)().Promise || Promise);
    
    /**
     * @returns a {promise, resolve, reject} trio where `promise` is resolved by calling `resolve` or `reject`.
     */
    function defer() {
      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref4$promiseFactory = _ref4.promiseFactory,
        promiseFactory = _ref4$promiseFactory === void 0 ? function (resolver) {
          return new GreedyPromise(resolver);
        } : _ref4$promiseFactory;
      function invoker(delegate) {
        return function (val) {
          return delegate(val);
        };
      }
      var resolveFn, rejectFn;
      return {
        promise: promiseFactory(function (resolve, reject) {
          resolveFn = resolve;
          rejectFn = reject;
        }),
        resolve: invoker(resolveFn),
        reject: invoker(rejectFn)
      };
    }
    
    /***/ }),
    
    /***/ "./src/video.js":
    /*!**********************!*\
      !*** ./src/video.js ***!
      \**********************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "INSTREAM": function() { return /* binding */ INSTREAM; },
    /* harmony export */   "OUTSTREAM": function() { return /* binding */ OUTSTREAM; },
    /* harmony export */   "checkVideoBidSetup": function() { return /* binding */ checkVideoBidSetup; },
    /* harmony export */   "isValidVideoBid": function() { return /* binding */ isValidVideoBid; }
    /* harmony export */ });
    /* unused harmony exports videoAdUnit, videoBidder, hasNonVideoBidder */
    /* harmony import */ var _adapterManager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./adapterManager.js */ "./src/adapterManager.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./node_modules/dlv/index.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
    /* harmony import */ var _src_config_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../src/config.js */ "./src/config.js");
    /* harmony import */ var _polyfill_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./polyfill.js */ "./src/polyfill.js");
    /* harmony import */ var _hook_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hook.js */ "./src/hook.js");
    /* harmony import */ var _auctionManager_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./auctionManager.js */ "./src/auctionManager.js");
    
    
    
    
    
    
    var VIDEO_MEDIA_TYPE = 'video';
    var OUTSTREAM = 'outstream';
    var INSTREAM = 'instream';
    
    /**
     * Helper functions for working with video-enabled adUnits
     */
    var videoAdUnit = function videoAdUnit(adUnit) {
      var mediaType = adUnit.mediaType === VIDEO_MEDIA_TYPE;
      var mediaTypes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"])(adUnit, 'mediaTypes.video');
      return mediaType || mediaTypes;
    };
    var videoBidder = function videoBidder(bid) {
      return (0,_polyfill_js__WEBPACK_IMPORTED_MODULE_1__.includes)(_adapterManager_js__WEBPACK_IMPORTED_MODULE_2__["default"].videoAdapters, bid.bidder);
    };
    var hasNonVideoBidder = function hasNonVideoBidder(adUnit) {
      return adUnit.bids.filter(function (bid) {
        return !videoBidder(bid);
      }).length;
    };
    
    /**
     * @typedef {object} VideoBid
     * @property {string} adId id of the bid
     */
    
    /**
     * Validate that the assets required for video context are present on the bid
     * @param {VideoBid} bid Video bid to validate
     * @param index
     * @return {Boolean} If object is valid
     */
    function isValidVideoBid(bid) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$index = _ref.index,
        index = _ref$index === void 0 ? _auctionManager_js__WEBPACK_IMPORTED_MODULE_3__.auctionManager.index : _ref$index;
      var videoMediaType = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"])(index.getMediaTypes(bid), 'video');
      var context = videoMediaType && (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"])(videoMediaType, 'context');
      var useCacheKey = videoMediaType && (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"])(videoMediaType, 'useCacheKey');
      var adUnit = index.getAdUnit(bid);
    
      // if context not defined assume default 'instream' for video bids
      // instream bids require a vast url or vast xml content
      return checkVideoBidSetup(bid, adUnit, videoMediaType, context, useCacheKey);
    }
    var checkVideoBidSetup = (0,_hook_js__WEBPACK_IMPORTED_MODULE_4__.hook)('sync', function (bid, adUnit, videoMediaType, context, useCacheKey) {
      if (videoMediaType && (useCacheKey || context !== OUTSTREAM)) {
        // xml-only video bids require a prebid cache url
        if (!_src_config_js__WEBPACK_IMPORTED_MODULE_5__.config.getConfig('cache.url') && bid.vastXml && !bid.vastUrl) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_6__.logError)("\n        This bid contains only vastXml and will not work when a prebid cache url is not specified.\n        Try enabling prebid cache with owpbjs.setConfig({ cache: {url: \"...\"} });\n      ");
          return false;
        }
        return !!(bid.vastUrl || bid.vastXml);
      }
    
      // outstream bids require a renderer on the bid or pub-defined on adunit
      if (context === OUTSTREAM && !useCacheKey) {
        return !!(bid.renderer || adUnit && adUnit.renderer || videoMediaType.renderer);
      }
      return true;
    }, 'checkVideoBidSetup');
    
    /***/ }),
    
    /***/ "./src/videoCache.js":
    /*!***************************!*\
      !*** ./src/videoCache.js ***!
      \***************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "getCacheUrl": function() { return /* binding */ getCacheUrl; },
    /* harmony export */   "store": function() { return /* binding */ store; }
    /* harmony export */ });
    /* harmony import */ var _ajax_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ajax.js */ "./src/ajax.js");
    /* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config.js */ "./src/config.js");
    /* harmony import */ var _auctionManager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./auctionManager.js */ "./src/auctionManager.js");
    /**
     * This module interacts with the server used to cache video ad content to be restored later.
     * At a high level, the expected workflow goes like this:
     *
     *   - Request video ads from Bidders
     *   - Generate IDs for each valid bid, and cache the key/value pair on the server.
     *   - Return these IDs so that publishers can use them to fetch the bids later.
     *
     * This trickery helps integrate with ad servers, which set character limits on request params.
     */
    
    
    
    
    
    /**
     * Might be useful to be configurable in the future
     * Depending on publisher needs
     */
    var ttlBufferInSeconds = 15;
    
    /**
     * @typedef {object} CacheableUrlBid
     * @property {string} vastUrl A URL which loads some valid VAST XML.
     */
    
    /**
     * @typedef {object} CacheablePayloadBid
     * @property {string} vastXml Some VAST XML which loads an ad in a video player.
     */
    
    /**
     * A CacheableBid describes the types which the videoCache can store.
     *
     * @typedef {CacheableUrlBid|CacheablePayloadBid} CacheableBid
     */
    
    /**
     * Function which wraps a URI that serves VAST XML, so that it can be loaded.
     *
     * @param {string} uri The URI where the VAST content can be found.
     * @param {string} impUrl An impression tracker URL for the delivery of the video ad
     * @return A VAST URL which loads XML from the given URI.
     */
    function wrapURI(uri, impUrl) {
      // Technically, this is vulnerable to cross-script injection by sketchy vastUrl bids.
      // We could make sure it's a valid URI... but since we're loading VAST XML from the
      // URL they provide anyway, that's probably not a big deal.
      var vastImp = impUrl ? "<![CDATA[".concat(impUrl, "]]>") : "";
      return "<VAST version=\"3.0\">\n    <Ad>\n      <Wrapper>\n        <AdSystem>prebid.org wrapper</AdSystem>\n        <VASTAdTagURI><![CDATA[".concat(uri, "]]></VASTAdTagURI>\n        <Impression>").concat(vastImp, "</Impression>\n        <Creatives></Creatives>\n      </Wrapper>\n    </Ad>\n  </VAST>");
    }
    
    /**
     * Wraps a bid in the format expected by the prebid-server endpoints, or returns null if
     * the bid can't be converted cleanly.
     *
     * @param {CacheableBid} bid
     * @param index
     */
    function toStorageRequest(bid) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$index = _ref.index,
        index = _ref$index === void 0 ? _auctionManager_js__WEBPACK_IMPORTED_MODULE_0__.auctionManager.index : _ref$index;
      var vastValue = bid.vastXml ? bid.vastXml : wrapURI(bid.vastUrl, bid.vastImpUrl);
      var auction = index.getAuction(bid);
      /* istanbul ignore next */
      if (window && window.PWT) {
        vastValue = window.PWT.UpdateVastWithTracker(bid, vastValue);
      }
      var ttlWithBuffer = Number(bid.ttl) + ttlBufferInSeconds;
      var payload = {
        type: 'xml',
        value: vastValue,
        ttlseconds: ttlWithBuffer
      };
      if (_config_js__WEBPACK_IMPORTED_MODULE_1__.config.getConfig('cache.vasttrack')) {
        payload.bidder = bid.bidder;
        payload.bidid = bid.requestId;
        payload.aid = bid.auctionId;
      }
      if (auction != null) {
        payload.timestamp = auction.getAuctionStart();
      }
      if (typeof bid.customCacheKey === 'string' && bid.customCacheKey !== '') {
        payload.key = bid.customCacheKey;
      }
      return payload;
    }
    
    /**
     * A function which should be called with the results of the storage operation.
     *
     * @callback videoCacheStoreCallback
     *
     * @param {Error} [error] The error, if one occurred.
     * @param {?string[]} uuids An array of unique IDs. The array will have one element for each bid we were asked
     *   to store. It may include null elements if some of the bids were malformed, or an error occurred.
     *   Each non-null element in this array is a valid input into the retrieve function, which will fetch
     *   some VAST XML which can be used to render this bid's ad.
     */
    
    /**
     * A function which bridges the APIs between the videoCacheStoreCallback and our ajax function's API.
     *
     * @param {videoCacheStoreCallback} done A callback to the "store" function.
     * @return {Function} A callback which interprets the cache server's responses, and makes up the right
     *   arguments for our callback.
     */
    function shimStorageCallback(done) {
      return {
        success: function success(responseBody) {
          var ids;
          try {
            ids = JSON.parse(responseBody).responses;
          } catch (e) {
            done(e, []);
            return;
          }
          if (ids) {
            done(null, ids);
          } else {
            done(new Error("The cache server didn't respond with a responses property."), []);
          }
        },
        error: function error(statusText, responseBody) {
          done(new Error("Error storing video ad in the cache: ".concat(statusText, ": ").concat(JSON.stringify(responseBody))), []);
        }
      };
    }
    
    /**
     * If the given bid is for a Video ad, generate a unique ID and cache it somewhere server-side.
     *
     * @param {CacheableBid[]} bids A list of bid objects which should be cached.
     * @param {videoCacheStoreCallback} [done] An optional callback which should be executed after
     * the data has been stored in the cache.
     */
    function store(bids, done) {
      var requestData = {
        puts: bids.map(toStorageRequest)
      };
      (0,_ajax_js__WEBPACK_IMPORTED_MODULE_2__.ajax)(_config_js__WEBPACK_IMPORTED_MODULE_1__.config.getConfig('cache.url'), shimStorageCallback(done), JSON.stringify(requestData), {
        contentType: 'text/plain',
        withCredentials: true
      });
    }
    function getCacheUrl(id) {
      return "".concat(_config_js__WEBPACK_IMPORTED_MODULE_1__.config.getConfig('cache.url'), "?uuid=").concat(id);
    }
    
    /***/ }),
    
    /***/ "./node_modules/dlv/index.js":
    /*!***********************************!*\
      !*** ./node_modules/dlv/index.js ***!
      \***********************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ dlv; }
    /* harmony export */ });
    function dlv(obj, key, def, p, undef) {
        key = key.split ? key.split('.') : key;
        for (p = 0; p < key.length; p++) {
            obj = obj ? obj[key[p]] : undef;
        }
        return obj === undef ? def : obj;
    }
    
    
    /***/ }),
    
    /***/ "./node_modules/fun-hooks/no-eval/index.js":
    /*!*************************************************!*\
      !*** ./node_modules/fun-hooks/no-eval/index.js ***!
      \*************************************************/
    /***/ (function(module) {
    
    /*
    * @license MIT
    * Fun Hooks v0.9.10
    * (c) @snapwich
    */
    create.SYNC = 1;
    create.ASYNC = 2;
    create.QUEUE = 4;
    
    var packageName = "fun-hooks";
    
    function hasProxy() {
      return !!(typeof Proxy === "function" && Proxy.revocable);
    }
    
    var defaults = Object.freeze({
      useProxy: true,
      ready: 0
    });
    
    var hookableMap = new WeakMap();
    
    // detect incorrectly implemented reduce and if found use polyfill
    // https://github.com/prebid/Prebid.js/issues/3576
    // polyfill from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce
    var reduce =
      [1]
        .reduce(function(a, b, c) {
          return [a, b, c];
        }, 2)
        .toString() === "2,1,0"
        ? Array.prototype.reduce
        : function(callback, initial) {
            var o = Object(this);
            var len = o.length >>> 0;
            var k = 0;
            var value;
            if (initial) {
              value = initial;
            } else {
              while (k < len && !(k in o)) {
                k++;
              }
              value = o[k++];
            }
            while (k < len) {
              if (k in o) {
                value = callback(value, o[k], k, o);
              }
              k++;
            }
            return value;
          };
    
    function rest(args, skip) {
      return Array.prototype.slice.call(args, skip);
    }
    
    var assign =
      Object.assign ||
      function assign(target) {
        return reduce.call(
          rest(arguments, 1),
          function(target, obj) {
            if (obj) {
              Object.keys(obj).forEach(function(prop) {
                target[prop] = obj[prop];
              });
            }
            return target;
          },
          target
        );
      };
    
    function runAll(queue) {
      var queued;
      // eslint-disable-next-line no-cond-assign
      while ((queued = queue.shift())) {
        queued();
      }
    }
    
    function create(config) {
      var hooks = {};
      var postReady = [];
    
      config = assign({}, defaults, config);
    
      function dispatch(arg1, arg2) {
        if (typeof arg1 === "function") {
          return hookFn.call(null, "sync", arg1, arg2);
        } else if (typeof arg1 === "string" && typeof arg2 === "function") {
          return hookFn.apply(null, arguments);
        } else if (typeof arg1 === "object") {
          return hookObj.apply(null, arguments);
        }
      }
    
      var ready;
      if (config.ready) {
        dispatch.ready = function() {
          ready = true;
          runAll(postReady);
        };
      } else {
        ready = true;
      }
    
      function hookObj(obj, props, objName) {
        var walk = true;
        if (typeof props === "undefined") {
          props = Object.getOwnPropertyNames(obj);
          walk = false;
        }
        var objHooks = {};
        var doNotHook = ["constructor"];
        do {
          props = props.filter(function(prop) {
            return (
              typeof obj[prop] === "function" &&
              !(doNotHook.indexOf(prop) !== -1) &&
              !prop.match(/^_/)
            );
          });
          props.forEach(function(prop) {
            var parts = prop.split(":");
            var name = parts[0];
            var type = parts[1] || "sync";
            if (!objHooks[name]) {
              var fn = obj[name];
              objHooks[name] = obj[name] = hookFn(
                type,
                fn,
                objName ? [objName, name] : undefined
              );
            }
          });
          obj = Object.getPrototypeOf(obj);
        } while (walk && obj);
        return objHooks;
      }
    
      /**
       * Navigates a string path to return a hookable function.  If not found, creates a placeholder for hooks.
       * @param {(Array<string> | string)} path
       */
      function get(path) {
        var parts = Array.isArray(path) ? path : path.split(".");
        return reduce.call(
          parts,
          function(memo, part, i) {
            var item = memo[part];
            var installed = false;
            if (item) {
              return item;
            } else if (i === parts.length - 1) {
              if (!ready) {
                postReady.push(function() {
                  if (!installed) {
                    // eslint-disable-next-line no-console
                    console.warn(
                      packageName +
                        ": referenced '" +
                        path +
                        "' but it was never created"
                    );
                  }
                });
              }
              return (memo[part] = newHookable(function(fn) {
                memo[part] = fn;
                installed = true;
              }));
            }
            return (memo[part] = {});
          },
          hooks
        );
      }
    
      function newHookable(onInstall) {
        var before = [];
        var after = [];
        var generateTrap = function() {};
    
        var api = {
          before: function(hook, priority) {
            return add.call(this, before, "before", hook, priority);
          },
          after: function(hook, priority) {
            return add.call(this, after, "after", hook, priority);
          },
          getHooks: function(match) {
            var hooks = before.concat(after);
            if (typeof match === "object") {
              hooks = hooks.filter(function(entry) {
                return Object.keys(match).every(function(prop) {
                  return entry[prop] === match[prop];
                });
              });
            }
            try {
              assign(hooks, {
                remove: function() {
                  hooks.forEach(function(entry) {
                    entry.remove();
                  });
                  return this;
                }
              });
            } catch (e) {
              console.error(
                "error adding `remove` to array, did you modify Array.prototype?"
              );
            }
            return hooks;
          },
          removeAll: function() {
            return this.getHooks().remove();
          }
        };
    
        var meta = {
          install: function(type, fn, generate) {
            this.type = type;
            generateTrap = generate;
            generate(before, after);
            onInstall && onInstall(fn);
          }
        };
    
        // store meta data related to hookable. use `api.after` since `api` reference is not available on our proxy.
        hookableMap.set(api.after, meta);
    
        return api;
    
        function add(store, type, hook, priority) {
          var entry = {
            hook: hook,
            type: type,
            priority: priority || 10,
            remove: function() {
              var index = store.indexOf(entry);
              if (index !== -1) {
                store.splice(index, 1);
                generateTrap(before, after);
              }
            }
          };
          store.push(entry);
          store.sort(function(a, b) {
            return b.priority - a.priority;
          });
          generateTrap(before, after);
          return this;
        }
      }
    
      function hookFn(type, fn, name) {
        // check if function has already been wrapped
        var meta = fn.after && hookableMap.get(fn.after);
        if (meta) {
          if (meta.type !== type) {
            throw packageName + ": recreated hookable with different type";
          } else {
            return fn;
          }
        }
    
        var hookable = name ? get(name) : newHookable();
    
        var trap;
        var hookedFn;
        var handlers = {
          get: function(target, prop) {
            return hookable[prop] || Reflect.get.apply(Reflect, arguments);
          }
        };
    
        if (!ready) {
          postReady.push(setTrap);
        }
    
        if (config.useProxy && hasProxy()) {
          hookedFn = new Proxy(fn, handlers);
        } else {
          hookedFn = function() {
            return handlers.apply
              ? handlers.apply(fn, this, rest(arguments))
              : fn.apply(this, arguments);
          };
          assign(hookedFn, hookable);
        }
    
        hookableMap.get(hookedFn.after).install(type, hookedFn, generateTrap);
    
        return hookedFn;
    
        // eslint-disable-next-line no-redeclare
        function generateTrap(before, after) {
          var order = [];
          var targetIndex;
          if (before.length || after.length) {
            before.forEach(addToOrder);
            // placeholder for target function wrapper
            targetIndex = order.push(undefined) - 1;
            after.forEach(addToOrder);
            trap = function(target, thisArg, args) {
              var curr = 0;
              var result;
              var callback =
                type === "async" &&
                typeof args[args.length - 1] === "function" &&
                args.pop();
              function bail(value) {
                if (type === "sync") {
                  result = value;
                } else if (callback) {
                  callback.apply(null, arguments);
                }
              }
              function next(value) {
                if (order[curr]) {
                  var args = rest(arguments);
                  next.bail = bail;
                  args.unshift(next);
                  return order[curr++].apply(thisArg, args);
                }
                if (type === "sync") {
                  result = value;
                } else if (callback) {
                  callback.apply(null, arguments);
                }
              }
              order[targetIndex] = function() {
                var args = rest(arguments, 1);
                if (type === "async" && callback) {
                  delete next.bail;
                  args.push(next);
                }
                var result = target.apply(thisArg, args);
                if (type === "sync") {
                  next(result);
                }
              };
              next.apply(null, args);
              return result;
            };
          } else {
            trap = undefined;
          }
          setTrap();
    
          function addToOrder(entry) {
            order.push(entry.hook);
          }
        }
    
        function setTrap() {
          if (
            ready ||
            (type === "sync" && !(config.ready & create.SYNC)) ||
            (type === "async" && !(config.ready & create.ASYNC))
          ) {
            handlers.apply = trap;
          } else if (type === "sync" || !(config.ready & create.QUEUE)) {
            handlers.apply = function() {
              throw packageName + ": hooked function not ready";
            };
          } else {
            handlers.apply = function() {
              var args = arguments;
              postReady.push(function() {
                hookedFn.apply(args[1], args[2]);
              });
            };
          }
        }
      }
    
      dispatch.get = get;
      return dispatch;
    }
    
    /* global module */
    module.exports = create;
    
    
    /***/ }),
    
    /***/ "./node_modules/just-clone/index.js":
    /*!******************************************!*\
      !*** ./node_modules/just-clone/index.js ***!
      \******************************************/
    /***/ (function(module) {
    
    module.exports = clone;
    
    /*
      Identical to `just-extend(true, {}, obj1)`
    
      var arr = [1, 2, 3];
      var subObj = {aa: 1};
      var obj = {a: 3, b: 5, c: arr, d: subObj};
      var objClone = clone(obj);
      arr.push(4);
      subObj.bb = 2;
      obj; // {a: 3, b: 5, c: [1, 2, 3, 4], d: {aa: 1}}  
      objClone; // {a: 3, b: 5, c: [1, 2, 3], d: {aa: 1, bb: 2}}
    */
    
    function clone(obj) {
      var result = Array.isArray(obj) ? [] : {};
      for (var key in obj) {
        // include prototype properties
        var value = obj[key];
        if (value && typeof value == 'object') {
          result[key] = clone(value);
        } else {
          result[key] = value;
        }
      }
      return result;
    }
    
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js":
    /*!*********************************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js ***!
      \*********************************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _arrayLikeToArray; }
    /* harmony export */ });
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js":
    /*!*******************************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js ***!
      \*******************************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _arrayWithHoles; }
    /* harmony export */ });
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js":
    /*!**********************************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js ***!
      \**********************************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _arrayWithoutHoles; }
    /* harmony export */ });
    /* harmony import */ var _arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayLikeToArray.js */ "./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js");
    
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(arr);
    }
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js":
    /*!**************************************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js ***!
      \**************************************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _assertThisInitialized; }
    /* harmony export */ });
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/classApplyDescriptorGet.js":
    /*!****************************************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/classApplyDescriptorGet.js ***!
      \****************************************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _classApplyDescriptorGet; }
    /* harmony export */ });
    function _classApplyDescriptorGet(receiver, descriptor) {
      if (descriptor.get) {
        return descriptor.get.call(receiver);
      }
      return descriptor.value;
    }
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/classApplyDescriptorSet.js":
    /*!****************************************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/classApplyDescriptorSet.js ***!
      \****************************************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _classApplyDescriptorSet; }
    /* harmony export */ });
    function _classApplyDescriptorSet(receiver, descriptor, value) {
      if (descriptor.set) {
        descriptor.set.call(receiver, value);
      } else {
        if (!descriptor.writable) {
          throw new TypeError("attempted to set read only private field");
        }
        descriptor.value = value;
      }
    }
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js":
    /*!*******************************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js ***!
      \*******************************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _classCallCheck; }
    /* harmony export */ });
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/classExtractFieldDescriptor.js":
    /*!********************************************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/classExtractFieldDescriptor.js ***!
      \********************************************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _classExtractFieldDescriptor; }
    /* harmony export */ });
    function _classExtractFieldDescriptor(receiver, privateMap, action) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to " + action + " private field on non-instance");
      }
      return privateMap.get(receiver);
    }
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js":
    /*!*************************************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js ***!
      \*************************************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _classPrivateFieldGet; }
    /* harmony export */ });
    /* harmony import */ var _classApplyDescriptorGet_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./classApplyDescriptorGet.js */ "./node_modules/@babel/runtime/helpers/esm/classApplyDescriptorGet.js");
    /* harmony import */ var _classExtractFieldDescriptor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./classExtractFieldDescriptor.js */ "./node_modules/@babel/runtime/helpers/esm/classExtractFieldDescriptor.js");
    
    
    function _classPrivateFieldGet(receiver, privateMap) {
      var descriptor = (0,_classExtractFieldDescriptor_js__WEBPACK_IMPORTED_MODULE_0__["default"])(receiver, privateMap, "get");
      return (0,_classApplyDescriptorGet_js__WEBPACK_IMPORTED_MODULE_1__["default"])(receiver, descriptor);
    }
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js":
    /*!*************************************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js ***!
      \*************************************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _classPrivateFieldSet; }
    /* harmony export */ });
    /* harmony import */ var _classApplyDescriptorSet_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./classApplyDescriptorSet.js */ "./node_modules/@babel/runtime/helpers/esm/classApplyDescriptorSet.js");
    /* harmony import */ var _classExtractFieldDescriptor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./classExtractFieldDescriptor.js */ "./node_modules/@babel/runtime/helpers/esm/classExtractFieldDescriptor.js");
    
    
    function _classPrivateFieldSet(receiver, privateMap, value) {
      var descriptor = (0,_classExtractFieldDescriptor_js__WEBPACK_IMPORTED_MODULE_0__["default"])(receiver, privateMap, "set");
      (0,_classApplyDescriptorSet_js__WEBPACK_IMPORTED_MODULE_1__["default"])(receiver, descriptor, value);
      return value;
    }
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/createClass.js":
    /*!****************************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/createClass.js ***!
      \****************************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _createClass; }
    /* harmony export */ });
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js":
    /*!*******************************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/defineProperty.js ***!
      \*******************************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _defineProperty; }
    /* harmony export */ });
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/get.js":
    /*!********************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/get.js ***!
      \********************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _get; }
    /* harmony export */ });
    /* harmony import */ var _superPropBase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./superPropBase.js */ "./node_modules/@babel/runtime/helpers/esm/superPropBase.js");
    
    function _get() {
      if (typeof Reflect !== "undefined" && Reflect.get) {
        _get = Reflect.get.bind();
      } else {
        _get = function _get(target, property, receiver) {
          var base = (0,_superPropBase_js__WEBPACK_IMPORTED_MODULE_0__["default"])(target, property);
          if (!base) return;
          var desc = Object.getOwnPropertyDescriptor(base, property);
          if (desc.get) {
            return desc.get.call(arguments.length < 3 ? target : receiver);
          }
          return desc.value;
        };
      }
      return _get.apply(this, arguments);
    }
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js":
    /*!*******************************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js ***!
      \*******************************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _getPrototypeOf; }
    /* harmony export */ });
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/inherits.js":
    /*!*************************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/inherits.js ***!
      \*************************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _inherits; }
    /* harmony export */ });
    /* harmony import */ var _setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setPrototypeOf.js */ "./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js");
    
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) (0,_setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__["default"])(subClass, superClass);
    }
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/iterableToArray.js":
    /*!********************************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js ***!
      \********************************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _iterableToArray; }
    /* harmony export */ });
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
    }
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js":
    /*!*************************************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js ***!
      \*************************************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _iterableToArrayLimit; }
    /* harmony export */ });
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js":
    /*!********************************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js ***!
      \********************************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _nonIterableRest; }
    /* harmony export */ });
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js":
    /*!**********************************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js ***!
      \**********************************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _nonIterableSpread; }
    /* harmony export */ });
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js":
    /*!******************************************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js ***!
      \******************************************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _possibleConstructorReturn; }
    /* harmony export */ });
    /* harmony import */ var _typeof_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./typeof.js */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");
    /* harmony import */ var _assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./assertThisInitialized.js */ "./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js");
    
    
    function _possibleConstructorReturn(self, call) {
      if (call && ((0,_typeof_js__WEBPACK_IMPORTED_MODULE_0__["default"])(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return (0,_assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_1__["default"])(self);
    }
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js":
    /*!*******************************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js ***!
      \*******************************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _setPrototypeOf; }
    /* harmony export */ });
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js":
    /*!******************************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js ***!
      \******************************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _slicedToArray; }
    /* harmony export */ });
    /* harmony import */ var _arrayWithHoles_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayWithHoles.js */ "./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js");
    /* harmony import */ var _iterableToArrayLimit_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iterableToArrayLimit.js */ "./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js");
    /* harmony import */ var _unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./unsupportedIterableToArray.js */ "./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js");
    /* harmony import */ var _nonIterableRest_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nonIterableRest.js */ "./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js");
    
    
    
    
    function _slicedToArray(arr, i) {
      return (0,_arrayWithHoles_js__WEBPACK_IMPORTED_MODULE_0__["default"])(arr) || (0,_iterableToArrayLimit_js__WEBPACK_IMPORTED_MODULE_1__["default"])(arr, i) || (0,_unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__["default"])(arr, i) || (0,_nonIterableRest_js__WEBPACK_IMPORTED_MODULE_3__["default"])();
    }
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/superPropBase.js":
    /*!******************************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/superPropBase.js ***!
      \******************************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _superPropBase; }
    /* harmony export */ });
    /* harmony import */ var _getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getPrototypeOf.js */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
    
    function _superPropBase(object, property) {
      while (!Object.prototype.hasOwnProperty.call(object, property)) {
        object = (0,_getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object);
        if (object === null) break;
      }
      return object;
    }
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js":
    /*!**********************************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js ***!
      \**********************************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _toConsumableArray; }
    /* harmony export */ });
    /* harmony import */ var _arrayWithoutHoles_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayWithoutHoles.js */ "./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js");
    /* harmony import */ var _iterableToArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iterableToArray.js */ "./node_modules/@babel/runtime/helpers/esm/iterableToArray.js");
    /* harmony import */ var _unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./unsupportedIterableToArray.js */ "./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js");
    /* harmony import */ var _nonIterableSpread_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nonIterableSpread.js */ "./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js");
    
    
    
    
    function _toConsumableArray(arr) {
      return (0,_arrayWithoutHoles_js__WEBPACK_IMPORTED_MODULE_0__["default"])(arr) || (0,_iterableToArray_js__WEBPACK_IMPORTED_MODULE_1__["default"])(arr) || (0,_unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__["default"])(arr) || (0,_nonIterableSpread_js__WEBPACK_IMPORTED_MODULE_3__["default"])();
    }
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/typeof.js":
    /*!***********************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/typeof.js ***!
      \***********************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _typeof; }
    /* harmony export */ });
    function _typeof(obj) {
      "@babel/helpers - typeof";
    
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js":
    /*!*******************************************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js ***!
      \*******************************************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _unsupportedIterableToArray; }
    /* harmony export */ });
    /* harmony import */ var _arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayLikeToArray.js */ "./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js");
    
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(o, minLen);
    }
    
    /***/ }),
    
    /***/ "./node_modules/dset/dist/index.mjs":
    /*!******************************************!*\
      !*** ./node_modules/dset/dist/index.mjs ***!
      \******************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "dset": function() { return /* binding */ dset; }
    /* harmony export */ });
    function dset(obj, keys, val) {
        keys.split && (keys=keys.split('.'));
        var i=0, l=keys.length, t=obj, x, k;
        while (i < l) {
            k = keys[i++];
            if (k === '__proto__' || k === 'constructor' || k === 'prototype') break;
            t = t[k] = (i === l) ? val : (typeof(x=t[k])===typeof(keys)) ? x : (keys[i]*0 !== 0 || !!~(''+keys[i]).indexOf('.')) ? {} : [];
        }
    }
    
    
    /***/ }),
    
    /***/ "./src/constants.json":
    /*!****************************!*\
      !*** ./src/constants.json ***!
      \****************************/
    /***/ (function(module) {
    
    "use strict";
    module.exports = JSON.parse('{"JSON_MAPPING":{"ADSERVER_TARGETING":"adserverTargeting","BD_SETTING_STANDARD":"standard"},"DEBUG_MODE":"pbjs_debug","STATUS":{"GOOD":1,"NO_BID":2},"EVENTS":{"AUCTION_INIT":"auctionInit","AUCTION_END":"auctionEnd","BID_ADJUSTMENT":"bidAdjustment","BID_TIMEOUT":"bidTimeout","BID_REQUESTED":"bidRequested","BID_RESPONSE":"bidResponse","BID_REJECTED":"bidRejected","NO_BID":"noBid","SEAT_NON_BID":"seatNonBid","BID_WON":"bidWon","BIDDER_DONE":"bidderDone","BIDDER_ERROR":"bidderError","SET_TARGETING":"setTargeting","BEFORE_REQUEST_BIDS":"beforeRequestBids","BEFORE_BIDDER_HTTP":"beforeBidderHttp","REQUEST_BIDS":"requestBids","ADD_AD_UNITS":"addAdUnits","AD_RENDER_FAILED":"adRenderFailed","AD_RENDER_SUCCEEDED":"adRenderSucceeded","TCF2_ENFORCEMENT":"tcf2Enforcement","AUCTION_DEBUG":"auctionDebug","BID_VIEWABLE":"bidViewable","STALE_RENDER":"staleRender","BILLABLE_EVENT":"billableEvent","IH_INIT":"initIdentityHub"},"AD_RENDER_FAILED_REASON":{"PREVENT_WRITING_ON_MAIN_DOCUMENT":"preventWritingOnMainDocument","NO_AD":"noAd","EXCEPTION":"exception","CANNOT_FIND_AD":"cannotFindAd","MISSING_DOC_OR_ADID":"missingDocOrAdid"},"EVENT_ID_PATHS":{"bidWon":"adUnitCode"},"GRANULARITY_OPTIONS":{"LOW":"low","MEDIUM":"medium","HIGH":"high","AUTO":"auto","DENSE":"dense","CUSTOM":"custom"},"TARGETING_KEYS":"%%TG_KEYS%%","DEFAULT_TARGETING_KEYS":{"BIDDER":"hb_bidder","AD_ID":"hb_adid","PRICE_BUCKET":"hb_pb","SIZE":"hb_size","DEAL":"hb_deal","SOURCE":"hb_source","FORMAT":"hb_format","UUID":"hb_uuid","CACHE_ID":"hb_cache_id","CACHE_HOST":"hb_cache_host"},"NATIVE_KEYS":"%%TG_NATIVE_KEYS%%","S2S":{"SRC":"s2s"},"BID_STATUS":{"BID_TARGETING_SET":"targetingSet","RENDERED":"rendered","BID_REJECTED":"bidRejected"},"REJECTION_REASON":{"INVALID":"Bid has missing or invalid properties","INVALID_REQUEST_ID":"Invalid request ID","BIDDER_DISALLOWED":"Bidder code is not allowed by allowedAlternateBidderCodes / allowUnknownBidderCodes","FLOOR_NOT_MET":"Bid does not meet price floor"},"PREBID_NATIVE_DATA_KEYS_TO_ORTB":{"body":"desc","body2":"desc2","sponsoredBy":"sponsored","cta":"ctatext","rating":"rating","address":"address","downloads":"downloads","likes":"likes","phone":"phone","price":"price","salePrice":"saleprice","displayUrl":"displayurl"},"NATIVE_ASSET_TYPES":{"sponsored":1,"desc":2,"rating":3,"likes":4,"downloads":5,"price":6,"saleprice":7,"phone":8,"address":9,"desc2":10,"displayurl":11,"ctatext":12},"NATIVE_IMAGE_TYPES":{"ICON":1,"MAIN":3},"NATIVE_KEYS_THAT_ARE_NOT_ASSETS":["privacyLink","clickUrl","sendTargetingKeys","adTemplate","rendererUrl","type"]}');
    
    /***/ })
    
    /******/ 	});
    /************************************************************************/
    /******/ 	// The module cache
    /******/ 	var __webpack_module_cache__ = {};
    /******/ 	
    /******/ 	// The require function
    /******/ 	function __webpack_require__(moduleId) {
    /******/ 		// Check if module is in cache
    /******/ 		var cachedModule = __webpack_module_cache__[moduleId];
    /******/ 		if (cachedModule !== undefined) {
    /******/ 			return cachedModule.exports;
    /******/ 		}
    /******/ 		// Create a new module (and put it into the cache)
    /******/ 		var module = __webpack_module_cache__[moduleId] = {
    /******/ 			// no module.id needed
    /******/ 			// no module.loaded needed
    /******/ 			exports: {}
    /******/ 		};
    /******/ 	
    /******/ 		// Execute the module function
    /******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
    /******/ 	
    /******/ 		// Return the exports of the module
    /******/ 		return module.exports;
    /******/ 	}
    /******/ 	
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/ 	__webpack_require__.m = __webpack_modules__;
    /******/ 	
    /************************************************************************/
    /******/ 	/* webpack/runtime/chunk loaded */
    /******/ 	!function() {
    /******/ 		var deferred = [];
    /******/ 		__webpack_require__.O = function(result, chunkIds, fn, priority) {
    /******/ 			if(chunkIds) {
    /******/ 				priority = priority || 0;
    /******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
    /******/ 				deferred[i] = [chunkIds, fn, priority];
    /******/ 				return;
    /******/ 			}
    /******/ 			var notFulfilled = Infinity;
    /******/ 			for (var i = 0; i < deferred.length; i++) {
    /******/ 				var chunkIds = deferred[i][0];
    /******/ 				var fn = deferred[i][1];
    /******/ 				var priority = deferred[i][2];
    /******/ 				var fulfilled = true;
    /******/ 				for (var j = 0; j < chunkIds.length; j++) {
    /******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {
    /******/ 						chunkIds.splice(j--, 1);
    /******/ 					} else {
    /******/ 						fulfilled = false;
    /******/ 						if(priority < notFulfilled) notFulfilled = priority;
    /******/ 					}
    /******/ 				}
    /******/ 				if(fulfilled) {
    /******/ 					deferred.splice(i--, 1)
    /******/ 					var r = fn();
    /******/ 					if (r !== undefined) result = r;
    /******/ 				}
    /******/ 			}
    /******/ 			return result;
    /******/ 		};
    /******/ 	}();
    /******/ 	
    /******/ 	/* webpack/runtime/compat get default export */
    /******/ 	!function() {
    /******/ 		// getDefaultExport function for compatibility with non-harmony modules
    /******/ 		__webpack_require__.n = function(module) {
    /******/ 			var getter = module && module.__esModule ?
    /******/ 				function() { return module['default']; } :
    /******/ 				function() { return module; };
    /******/ 			__webpack_require__.d(getter, { a: getter });
    /******/ 			return getter;
    /******/ 		};
    /******/ 	}();
    /******/ 	
    /******/ 	/* webpack/runtime/define property getters */
    /******/ 	!function() {
    /******/ 		// define getter functions for harmony exports
    /******/ 		__webpack_require__.d = function(exports, definition) {
    /******/ 			for(var key in definition) {
    /******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
    /******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
    /******/ 				}
    /******/ 			}
    /******/ 		};
    /******/ 	}();
    /******/ 	
    /******/ 	/* webpack/runtime/hasOwnProperty shorthand */
    /******/ 	!function() {
    /******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
    /******/ 	}();
    /******/ 	
    /******/ 	/* webpack/runtime/jsonp chunk loading */
    /******/ 	!function() {
    /******/ 		// no baseURI
    /******/ 		
    /******/ 		// object to store loaded and loading chunks
    /******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
    /******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
    /******/ 		var installedChunks = {
    /******/ 			"prebid-core": 0
    /******/ 		};
    /******/ 		
    /******/ 		// no chunk on demand loading
    /******/ 		
    /******/ 		// no prefetching
    /******/ 		
    /******/ 		// no preloaded
    /******/ 		
    /******/ 		// no HMR
    /******/ 		
    /******/ 		// no HMR manifest
    /******/ 		
    /******/ 		__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };
    /******/ 		
    /******/ 		// install a JSONP callback for chunk loading
    /******/ 		var webpackJsonpCallback = function(parentChunkLoadingFunction, data) {
    /******/ 			var chunkIds = data[0];
    /******/ 			var moreModules = data[1];
    /******/ 			var runtime = data[2];
    /******/ 			// add "moreModules" to the modules object,
    /******/ 			// then flag all "chunkIds" as loaded and fire callback
    /******/ 			var moduleId, chunkId, i = 0;
    /******/ 			if(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {
    /******/ 				for(moduleId in moreModules) {
    /******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
    /******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
    /******/ 					}
    /******/ 				}
    /******/ 				if(runtime) var result = runtime(__webpack_require__);
    /******/ 			}
    /******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
    /******/ 			for(;i < chunkIds.length; i++) {
    /******/ 				chunkId = chunkIds[i];
    /******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
    /******/ 					installedChunks[chunkId][0]();
    /******/ 				}
    /******/ 				installedChunks[chunkId] = 0;
    /******/ 			}
    /******/ 			return __webpack_require__.O(result);
    /******/ 		}
    /******/ 		
    /******/ 		var chunkLoadingGlobal = self["owpbjsChunk"] = self["owpbjsChunk"] || [];
    /******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
    /******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
    /******/ 	}();
    /******/ 	
    /************************************************************************/
    /******/ 	
    /******/ 	// startup
    /******/ 	// Load entry module and return exports
    /******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
    /******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["fpd"], function() { return __webpack_require__("./src/prebid.js"); })
    /******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
    /******/ 	
    /******/ })()
    ;
    
    "use strict";
    (self["owpbjsChunk"] = self["owpbjsChunk"] || []).push([["fpd"],{
    
    /***/ "./libraries/fpd/sua.js":
    /*!******************************!*\
      !*** ./libraries/fpd/sua.js ***!
      \******************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "getHighEntropySUA": function() { return /* binding */ getHighEntropySUA; },
    /* harmony export */   "getLowEntropySUA": function() { return /* binding */ getLowEntropySUA; }
    /* harmony export */ });
    /* unused harmony exports SUA_SOURCE_UNKNOWN, SUA_SOURCE_LOW_ENTROPY, SUA_SOURCE_HIGH_ENTROPY, SUA_SOURCE_UA_HEADER, HIGH_ENTROPY_HINTS, lowEntropySUAAccessor, highEntropySUAAccessor, uaDataToSUA */
    /* harmony import */ var _src_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/utils.js */ "./src/utils.js");
    /* harmony import */ var _src_utils_promise_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../src/utils/promise.js */ "./src/utils/promise.js");
    
    
    var SUA_SOURCE_UNKNOWN = 0;
    var SUA_SOURCE_LOW_ENTROPY = 1;
    var SUA_SOURCE_HIGH_ENTROPY = 2;
    var SUA_SOURCE_UA_HEADER = 3;
    
    // "high entropy" (i.e. privacy-sensitive) fields that can be requested from the navigator.
    var HIGH_ENTROPY_HINTS = ['architecture', 'bitness', 'model', 'platformVersion', 'fullVersionList'];
    
    /**
     * Returns low entropy UA client hints encoded as an ortb2.6 device.sua object; or null if no UA client hints are available.
     */
    var getLowEntropySUA = lowEntropySUAAccessor();
    
    /**
     * Returns a promise to high entropy UA client hints encoded as an ortb2.6 device.sua object, or null if no UA client hints are available.
     *
     * Note that the return value is a promise because the underlying browser API returns a promise; this
     * seems to plan for additional controls (such as alerts / permission request prompts to the user); it's unclear
     * at the moment if this means that asking for more hints would result in slower / more expensive calls.
     *
     * @param {Array[String]} hints hints to request, defaults to all (HIGH_ENTROPY_HINTS).
     */
    var getHighEntropySUA = highEntropySUAAccessor();
    function lowEntropySUAAccessor() {
      var _window$navigator;
      var uaData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (_window$navigator = window.navigator) === null || _window$navigator === void 0 ? void 0 : _window$navigator.userAgentData;
      var sua = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_0__.isEmpty)(uaData) ? null : Object.freeze(uaDataToSUA(SUA_SOURCE_LOW_ENTROPY, uaData));
      return function () {
        return sua;
      };
    }
    function highEntropySUAAccessor() {
      var _window$navigator2;
      var uaData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (_window$navigator2 = window.navigator) === null || _window$navigator2 === void 0 ? void 0 : _window$navigator2.userAgentData;
      var cache = {};
      var keys = new WeakMap();
      return function () {
        var hints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : HIGH_ENTROPY_HINTS;
        if (!keys.has(hints)) {
          var sorted = Array.from(hints);
          sorted.sort();
          keys.set(hints, sorted.join('|'));
        }
        var key = keys.get(hints);
        if (!cache.hasOwnProperty(key)) {
          try {
            cache[key] = uaData.getHighEntropyValues(hints).then(function (result) {
              return (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_0__.isEmpty)(result) ? null : Object.freeze(uaDataToSUA(SUA_SOURCE_HIGH_ENTROPY, result));
            }).catch(function () {
              return null;
            });
          } catch (e) {
            cache[key] = _src_utils_promise_js__WEBPACK_IMPORTED_MODULE_1__.GreedyPromise.resolve(null);
          }
        }
        return cache[key];
      };
    }
    
    /**
     * Convert a User Agent client hints object to an ORTB 2.6 device.sua fragment
     * https://iabtechlab.com/wp-content/uploads/2022/04/OpenRTB-2-6_FINAL.pdf
     *
     * @param source source of the UAData object (0 to 3)
     * @param uaData https://developer.mozilla.org/en-US/docs/Web/API/NavigatorUAData/
     * @return {{}}
     */
    function uaDataToSUA(source, uaData) {
      function toBrandVersion(brand, version) {
        var bv = {
          brand: brand
        };
        if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_0__.isStr)(version) && !(0,_src_utils_js__WEBPACK_IMPORTED_MODULE_0__.isEmptyStr)(version)) {
          bv.version = version.split('.');
        }
        return bv;
      }
      var sua = {
        source: source
      };
      if (uaData.platform) {
        sua.platform = toBrandVersion(uaData.platform, uaData.platformVersion);
      }
      if (uaData.fullVersionList || uaData.brands) {
        sua.browsers = (uaData.fullVersionList || uaData.brands).map(function (_ref) {
          var brand = _ref.brand,
            version = _ref.version;
          return toBrandVersion(brand, version);
        });
      }
      if (uaData.hasOwnProperty('mobile')) {
        sua.mobile = uaData.mobile ? 1 : 0;
      }
      ['model', 'bitness', 'architecture'].forEach(function (prop) {
        var value = uaData[prop];
        if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_0__.isStr)(value)) {
          sua[prop] = value;
        }
      });
      return sua;
    }
    
    /***/ })
    
    }]);
    
    "use strict";
    (self["owpbjsChunk"] = self["owpbjsChunk"] || []).push([["analyticsAdapter"],{
    
    /***/ "./libraries/analyticsAdapter/AnalyticsAdapter.js":
    /*!********************************************************!*\
      !*** ./libraries/analyticsAdapter/AnalyticsAdapter.js ***!
      \********************************************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ AnalyticsAdapter; }
    /* harmony export */ });
    /* unused harmony exports _internal, DEFAULT_INCLUDE_EVENTS, setDebounceDelay */
    /* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
    /* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");
    /* harmony import */ var _src_constants_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../src/constants.json */ "./src/constants.json");
    /* harmony import */ var _src_ajax_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/ajax.js */ "./src/ajax.js");
    /* harmony import */ var _src_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../src/utils.js */ "./src/utils.js");
    /* harmony import */ var _src_events_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../src/events.js */ "./src/events.js");
    
    
    
    
    
    
    var _internal = {
      ajax: _src_ajax_js__WEBPACK_IMPORTED_MODULE_0__.ajax
    };
    var ENDPOINT = 'endpoint';
    var BUNDLE = 'bundle';
    var DEFAULT_INCLUDE_EVENTS = Object.values(_src_constants_json__WEBPACK_IMPORTED_MODULE_1__.EVENTS).filter(function (ev) {
      return ev !== _src_constants_json__WEBPACK_IMPORTED_MODULE_1__.EVENTS.AUCTION_DEBUG;
    });
    var debounceDelay = 100;
    function setDebounceDelay(delay) {
      debounceDelay = delay;
    }
    function AnalyticsAdapter(_ref) {
      var url = _ref.url,
        analyticsType = _ref.analyticsType,
        global = _ref.global,
        handler = _ref.handler;
      var queue = [];
      var handlers;
      var enabled = false;
      var sampled = true;
      var provider;
      var emptyQueue = function () {
        var running = false;
        var timer;
        var clearQueue = function clearQueue() {
          if (!running) {
            running = true; // needed to avoid recursive re-processing when analytics event handlers trigger other events
            try {
              var i = 0;
              var notDecreasing = 0;
              while (queue.length > 0) {
                i++;
                var len = queue.length;
                queue.shift()();
                if (queue.length >= len) {
                  notDecreasing++;
                } else {
                  notDecreasing = 0;
                }
                if (notDecreasing >= 10) {
                  (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)('Detected probable infinite loop, discarding events', queue);
                  queue.length = 0;
                  return;
                }
              }
              (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logMessage)("".concat(provider, " analytics: processed ").concat(i, " events"));
            } finally {
              running = false;
            }
          }
        };
        return function () {
          if (timer != null) {
            clearTimeout(timer);
            timer = null;
          }
          debounceDelay === 0 ? clearQueue() : timer = setTimeout(clearQueue, debounceDelay);
        };
      }();
      return Object.defineProperties({
        track: _track,
        enqueue: _enqueue,
        enableAnalytics: _enable,
        disableAnalytics: _disable,
        getAdapterType: function getAdapterType() {
          return analyticsType;
        },
        getGlobal: function getGlobal() {
          return global;
        },
        getHandler: function getHandler() {
          return handler;
        },
        getUrl: function getUrl() {
          return url;
        }
      }, {
        enabled: {
          get: function get() {
            return enabled;
          }
        }
      });
      function _track(_ref2) {
        var eventType = _ref2.eventType,
          args = _ref2.args;
        if (this.getAdapterType() === BUNDLE) {
          window[global](handler, eventType, args);
        }
        if (this.getAdapterType() === ENDPOINT) {
          _callEndpoint.apply(void 0, arguments);
        }
      }
      function _callEndpoint(_ref3) {
        var eventType = _ref3.eventType,
          args = _ref3.args,
          callback = _ref3.callback;
        _internal.ajax(url, callback, JSON.stringify({
          eventType: eventType,
          args: args
        }));
      }
      function _enqueue(_ref4) {
        var _this2 = this;
        var eventType = _ref4.eventType,
          args = _ref4.args;
        queue.push(function () {
          _this2.track({
            eventType: eventType,
            args: args
          });
        });
        emptyQueue();
      }
      function _enable(config) {
        var _this3 = this;
        provider = config === null || config === void 0 ? void 0 : config.provider;
        var _this = this;
        if ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_3__["default"])(config) === 'object' && (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_3__["default"])(config.options) === 'object') {
          sampled = typeof config.options.sampling === 'undefined' || Math.random() < parseFloat(config.options.sampling);
        } else {
          sampled = true;
        }
        if (sampled) {
          var trackedEvents = function () {
            var _ref5 = config || {},
              _ref5$includeEvents = _ref5.includeEvents,
              includeEvents = _ref5$includeEvents === void 0 ? DEFAULT_INCLUDE_EVENTS : _ref5$includeEvents,
              _ref5$excludeEvents = _ref5.excludeEvents,
              excludeEvents = _ref5$excludeEvents === void 0 ? [] : _ref5$excludeEvents;
            return new Set(Object.values(_src_constants_json__WEBPACK_IMPORTED_MODULE_1__.EVENTS).filter(function (ev) {
              return includeEvents.includes(ev);
            }).filter(function (ev) {
              return !excludeEvents.includes(ev);
            }));
          }();
    
          // first send all events fired before enableAnalytics called
          _src_events_js__WEBPACK_IMPORTED_MODULE_4__.getEvents().forEach(function (event) {
            if (!event || !trackedEvents.has(event.eventType)) {
              return;
            }
            var eventType = event.eventType,
              args = event.args;
            _enqueue.call(_this, {
              eventType: eventType,
              args: args
            });
          });
    
          // Next register event listeners to send data immediately
          handlers = Object.fromEntries(Array.from(trackedEvents).map(function (ev) {
            var handler = ev === _src_constants_json__WEBPACK_IMPORTED_MODULE_1__.EVENTS.AUCTION_INIT ? function (args) {
              // TODO: remove this special case in v8
              args.config = (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_3__["default"])(config) === 'object' ? config.options || {} : {};
              _this3.enqueue({
                eventType: ev,
                args: args
              });
            } : function (args) {
              return _this3.enqueue({
                eventType: ev,
                args: args
              });
            };
            _src_events_js__WEBPACK_IMPORTED_MODULE_4__.on(ev, handler);
            return [ev, handler];
          }));
        } else {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logMessage)("Analytics adapter for \"".concat(global, "\" disabled by sampling"));
        }
    
        // finally set this function to return log message, prevents multiple adapter listeners
        this._oldEnable = this.enableAnalytics;
        this.enableAnalytics = function _enable() {
          return (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logMessage)("Analytics adapter for \"".concat(global, "\" already enabled, unnecessary call to `enableAnalytics`."));
        };
        enabled = true;
      }
      function _disable() {
        Object.entries(handlers || {}).forEach(function (_ref6) {
          var _ref7 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_5__["default"])(_ref6, 2),
            event = _ref7[0],
            handler = _ref7[1];
          _src_events_js__WEBPACK_IMPORTED_MODULE_4__.off(event, handler);
        });
        this.enableAnalytics = this._oldEnable ? this._oldEnable : _enable;
        enabled = false;
      }
    }
    
    /***/ })
    
    }]);
    
    "use strict";
    (self["owpbjsChunk"] = self["owpbjsChunk"] || []).push([["adpod"],{
    
    /***/ "./modules/adpod.js":
    /*!**************************!*\
      !*** ./modules/adpod.js ***!
      \**************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    /* unused harmony exports callPrebidCacheHook, checkAdUnitSetupHook, checkVideoBidSetupHook, adpodSetConfig, callPrebidCacheAfterAuction, sortByPricePerSecond, getTargeting */
    /* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
    /* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
    /* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
    /* harmony import */ var _src_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../src/utils.js */ "./src/utils.js");
    /* harmony import */ var _src_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../src/utils.js */ "./node_modules/dlv/index.js");
    /* harmony import */ var _src_auction_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../src/auction.js */ "./src/auction.js");
    /* harmony import */ var _src_prebid_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../src/prebid.js */ "./src/prebid.js");
    /* harmony import */ var _src_video_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../src/video.js */ "./src/video.js");
    /* harmony import */ var _src_hook_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../src/hook.js */ "./src/hook.js");
    /* harmony import */ var _src_videoCache_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../src/videoCache.js */ "./src/videoCache.js");
    /* harmony import */ var _src_config_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../src/config.js */ "./src/config.js");
    /* harmony import */ var _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../src/mediaTypes.js */ "./src/mediaTypes.js");
    /* harmony import */ var _src_polyfill_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../src/polyfill.js */ "./src/polyfill.js");
    /* harmony import */ var _src_auctionManager_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../src/auctionManager.js */ "./src/auctionManager.js");
    /* harmony import */ var _src_constants_json__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../src/constants.json */ "./src/constants.json");
    
    
    
    /**
     * This module houses the functionality to evaluate and process adpod adunits/bids.  Specifically there are several hooked functions,
     * that either supplement the base function (ie to check something additional or unique to adpod objects) or to replace the base function
     * entirely when appropriate.
     *
     * Brief outline of each hook:
     * - `callPrebidCacheHook` - for any adpod bids, this function will temporarily hold them in a queue in order to send the bids to Prebid Cache in bulk
     * - `checkAdUnitSetupHook` - evaluates the adUnits to ensure that required fields for adpod adUnits are present.  Invalid adpod adUntis are removed from the array.
     * - `checkVideoBidSetupHook` - evaluates the adpod bid returned from an adaptor/bidder to ensure required fields are populated; also initializes duration bucket field.
     *
     * To initialize the module, there is an `initAdpodHooks()` function that should be imported and executed by a corresponding `...AdServerVideo`
     * module that designed to support adpod video type ads.  This import process allows this module to effectively act as a sub-module.
     */
    
    
    
    
    
    
    
    
    
    
    
    
    var TARGETING_KEY_PB_CAT_DUR = 'hb_pb_cat_dur';
    var TARGETING_KEY_CACHE_ID = 'hb_cache_id';
    var queueTimeDelay = 50;
    var queueSizeLimit = 5;
    var bidCacheRegistry = createBidCacheRegistry();
    
    /**
     * Create a registry object that stores/manages bids while be held in queue for Prebid Cache.
     * @returns registry object with defined accessor functions
     */
    function createBidCacheRegistry() {
      var registry = {};
      function setupRegistrySlot(auctionId) {
        registry[auctionId] = {};
        registry[auctionId].bidStorage = new Set();
        registry[auctionId].queueDispatcher = createDispatcher(queueTimeDelay);
        registry[auctionId].initialCacheKey = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.generateUUID)();
      }
      return {
        addBid: function addBid(bid) {
          // create parent level object based on auction ID (in case there are concurrent auctions running) to store objects for that auction
          if (!registry[bid.auctionId]) {
            setupRegistrySlot(bid.auctionId);
          }
          registry[bid.auctionId].bidStorage.add(bid);
        },
        removeBid: function removeBid(bid) {
          registry[bid.auctionId].bidStorage.delete(bid);
        },
        getBids: function getBids(bid) {
          return registry[bid.auctionId] && registry[bid.auctionId].bidStorage.values();
        },
        getQueueDispatcher: function getQueueDispatcher(bid) {
          return registry[bid.auctionId] && registry[bid.auctionId].queueDispatcher;
        },
        setupInitialCacheKey: function setupInitialCacheKey(bid) {
          if (!registry[bid.auctionId]) {
            registry[bid.auctionId] = {};
            registry[bid.auctionId].initialCacheKey = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.generateUUID)();
          }
        },
        getInitialCacheKey: function getInitialCacheKey(bid) {
          return registry[bid.auctionId] && registry[bid.auctionId].initialCacheKey;
        }
      };
    }
    
    /**
     * Creates a function that when called updates the bid queue and extends the running timer (when called subsequently).
     * Once the time threshold for the queue (defined by queueSizeLimit) is reached, the queue will be flushed by calling the `firePrebidCacheCall` function.
     * If there is a long enough time between calls (based on timeoutDration), the queue will automatically flush itself.
     * @param {Number} timeoutDuration number of milliseconds to pass before timer expires and current bid queue is flushed
     * @returns {Function}
     */
    function createDispatcher(timeoutDuration) {
      var timeout;
      var counter = 1;
      return function (auctionInstance, bidListArr, afterBidAdded, killQueue) {
        var context = this;
        var callbackFn = function callbackFn() {
          firePrebidCacheCall.call(context, auctionInstance, bidListArr, afterBidAdded);
        };
        clearTimeout(timeout);
        if (!killQueue) {
          // want to fire off the queue if either: size limit is reached or time has passed since last call to dispatcher
          if (counter === queueSizeLimit) {
            counter = 1;
            callbackFn();
          } else {
            counter++;
            timeout = setTimeout(callbackFn, timeoutDuration);
          }
        } else {
          counter = 1;
        }
      };
    }
    function getPricePartForAdpodKey(bid) {
      var pricePart;
      var prioritizeDeals = _src_config_js__WEBPACK_IMPORTED_MODULE_2__.config.getConfig('adpod.prioritizeDeals');
      if (prioritizeDeals && (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"])(bid, 'video.dealTier')) {
        var adpodDealPrefix = _src_config_js__WEBPACK_IMPORTED_MODULE_2__.config.getConfig("adpod.dealTier.".concat(bid.bidderCode, ".prefix"));
        pricePart = adpodDealPrefix ? adpodDealPrefix + (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"])(bid, 'video.dealTier') : (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"])(bid, 'video.dealTier');
      } else {
        var granularity = (0,_src_auction_js__WEBPACK_IMPORTED_MODULE_4__.getPriceGranularity)(bid);
        pricePart = (0,_src_auction_js__WEBPACK_IMPORTED_MODULE_4__.getPriceByGranularity)(granularity)(bid);
      }
      return pricePart;
    }
    
    /**
     * This function reads certain fields from the bid to generate a specific key used for caching the bid in Prebid Cache
     * @param {Object} bid bid object to update
     * @param {Boolean} brandCategoryExclusion value read from setConfig; influences whether category is required or not
     */
    function attachPriceIndustryDurationKeyToBid(bid, brandCategoryExclusion) {
      var initialCacheKey = bidCacheRegistry.getInitialCacheKey(bid);
      var duration = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"])(bid, 'video.durationBucket');
      var pricePart = getPricePartForAdpodKey(bid);
      var pcd;
      if (brandCategoryExclusion) {
        var category = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"])(bid, 'meta.adServerCatId');
        pcd = "".concat(pricePart, "_").concat(category, "_").concat(duration, "s");
      } else {
        pcd = "".concat(pricePart, "_").concat(duration, "s");
      }
      if (!bid.adserverTargeting) {
        bid.adserverTargeting = {};
      }
      bid.adserverTargeting[TARGETING_KEY_PB_CAT_DUR] = pcd;
      bid.adserverTargeting[TARGETING_KEY_CACHE_ID] = initialCacheKey;
      bid.videoCacheKey = initialCacheKey;
      bid.customCacheKey = "".concat(pcd, "_").concat(initialCacheKey);
    }
    
    /**
     * Updates the running queue for the associated auction.
     * Does a check to ensure the auction is still running; if it's not - the previously running queue is killed.
     * @param {*} auctionInstance running context of the auction
     * @param {Object} bidResponse bid object being added to queue
     * @param {Function} afterBidAdded callback function used when Prebid Cache responds
     */
    function updateBidQueue(auctionInstance, bidResponse, afterBidAdded) {
      var bidListIter = bidCacheRegistry.getBids(bidResponse);
      if (bidListIter) {
        var bidListArr = (0,_src_polyfill_js__WEBPACK_IMPORTED_MODULE_5__.arrayFrom)(bidListIter);
        var callDispatcher = bidCacheRegistry.getQueueDispatcher(bidResponse);
        var killQueue = !!(auctionInstance.getAuctionStatus() !== _src_auction_js__WEBPACK_IMPORTED_MODULE_4__.AUCTION_IN_PROGRESS);
        callDispatcher(auctionInstance, bidListArr, afterBidAdded, killQueue);
      } else {
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)('Attempted to cache a bid from an unknown auction. Bid:', bidResponse);
      }
    }
    
    /**
     * Small helper function to remove bids from internal storage; normally b/c they're about to sent to Prebid Cache for processing.
     * @param {Array[Object]} bidResponses list of bids to remove
     */
    function removeBidsFromStorage(bidResponses) {
      for (var i = 0; i < bidResponses.length; i++) {
        bidCacheRegistry.removeBid(bidResponses[i]);
      }
    }
    
    /**
     * This function will send a list of bids to Prebid Cache.  It also removes the same bids from the internal bidCacheRegistry
     * to maintain which bids are in queue.
     * If the bids are successfully cached, they will be added to the respective auction.
     * @param {*} auctionInstance running context of the auction
     * @param {Array[Object]} bidList list of bid objects that need to be sent to Prebid Cache
     * @param {Function} afterBidAdded callback function used when Prebid Cache responds
     */
    function firePrebidCacheCall(auctionInstance, bidList, afterBidAdded) {
      // remove entries now so other incoming bids won't accidentally have a stale version of the list while PBC is processing the current submitted list
      removeBidsFromStorage(bidList);
      (0,_src_videoCache_js__WEBPACK_IMPORTED_MODULE_6__.store)(bidList, function (error, cacheIds) {
        if (error) {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)("Failed to save to the video cache: ".concat(error, ". Video bid(s) must be discarded."));
          for (var i = 0; i < bidList.length; i++) {
            (0,_src_auction_js__WEBPACK_IMPORTED_MODULE_4__.doCallbacksIfTimedout)(auctionInstance, bidList[i]);
          }
        } else {
          for (var _i = 0; _i < cacheIds.length; _i++) {
            // when uuid in response is empty string then the key already existed, so this bid wasn't cached
            if (cacheIds[_i].uuid !== '') {
              (0,_src_auction_js__WEBPACK_IMPORTED_MODULE_4__.addBidToAuction)(auctionInstance, bidList[_i]);
            } else {
              (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.logInfo)("Detected a bid was not cached because the custom key was already registered.  Attempted to use key: ".concat(bidList[_i].customCacheKey, ". Bid was: "), bidList[_i]);
            }
            afterBidAdded();
          }
        }
      });
    }
    
    /**
     * This is the main hook function to handle adpod bids; maintains the logic to temporarily hold bids in a queue in order to send bulk requests to Prebid Cache.
     * @param {Function} fn reference to original function (used by hook logic)
     * @param {*} auctionInstance running context of the auction
     * @param {Object} bidResponse incoming bid; if adpod, will be processed through hook function.  If not adpod, returns to original function.
     * @param {Function} afterBidAdded callback function used when Prebid Cache responds
     * @param {Object} videoConfig mediaTypes.video from the bid's adUnit
     */
    function callPrebidCacheHook(fn, auctionInstance, bidResponse, afterBidAdded, videoConfig) {
      if (videoConfig && videoConfig.context === _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_7__.ADPOD) {
        var brandCategoryExclusion = _src_config_js__WEBPACK_IMPORTED_MODULE_2__.config.getConfig('adpod.brandCategoryExclusion');
        var adServerCatId = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"])(bidResponse, 'meta.adServerCatId');
        if (!adServerCatId && brandCategoryExclusion) {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)('Detected a bid without meta.adServerCatId while setConfig({adpod.brandCategoryExclusion}) was enabled.  This bid has been rejected:', bidResponse);
          afterBidAdded();
        } else {
          if (_src_config_js__WEBPACK_IMPORTED_MODULE_2__.config.getConfig('adpod.deferCaching') === false) {
            bidCacheRegistry.addBid(bidResponse);
            attachPriceIndustryDurationKeyToBid(bidResponse, brandCategoryExclusion);
            updateBidQueue(auctionInstance, bidResponse, afterBidAdded);
          } else {
            // generate targeting keys for bid
            bidCacheRegistry.setupInitialCacheKey(bidResponse);
            attachPriceIndustryDurationKeyToBid(bidResponse, brandCategoryExclusion);
    
            // add bid to auction
            (0,_src_auction_js__WEBPACK_IMPORTED_MODULE_4__.addBidToAuction)(auctionInstance, bidResponse);
            afterBidAdded();
          }
        }
      } else {
        fn.call(this, auctionInstance, bidResponse, afterBidAdded, videoConfig);
      }
    }
    
    /**
     * This hook function will review the adUnit setup and verify certain required values are present in any adpod adUnits.
     * If the fields are missing or incorrectly setup, the adUnit is removed from the list.
     * @param {Function} fn reference to original function (used by hook logic)
     * @param {Array[Object]} adUnits list of adUnits to be evaluated
     * @returns {Array[Object]} list of adUnits that passed the check
     */
    function checkAdUnitSetupHook(fn, adUnits) {
      var goodAdUnits = adUnits.filter(function (adUnit) {
        var mediaTypes = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"])(adUnit, 'mediaTypes');
        var videoConfig = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"])(mediaTypes, 'video');
        if (videoConfig && videoConfig.context === _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_7__.ADPOD) {
          // run check to see if other mediaTypes are defined (ie multi-format); reject adUnit if so
          if (Object.keys(mediaTypes).length > 1) {
            (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)("Detected more than one mediaType in adUnitCode: ".concat(adUnit.code, " while attempting to define an 'adpod' video adUnit.  'adpod' adUnits cannot be mixed with other mediaTypes.  This adUnit will be removed from the auction."));
            return false;
          }
          var errMsg = "Detected missing or incorrectly setup fields for an adpod adUnit.  Please review the following fields of adUnitCode: ".concat(adUnit.code, ".  This adUnit will be removed from the auction.");
          var playerSize = !!(videoConfig.playerSize && ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.isArrayOfNums)(videoConfig.playerSize, 2) || (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(videoConfig.playerSize) && videoConfig.playerSize.every(function (sz) {
            return (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.isArrayOfNums)(sz, 2);
          })) || videoConfig.sizeConfig);
          var adPodDurationSec = !!(videoConfig.adPodDurationSec && (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(videoConfig.adPodDurationSec) && videoConfig.adPodDurationSec > 0);
          var durationRangeSec = !!(videoConfig.durationRangeSec && (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.isArrayOfNums)(videoConfig.durationRangeSec) && videoConfig.durationRangeSec.every(function (range) {
            return range > 0;
          }));
          if (!playerSize || !adPodDurationSec || !durationRangeSec) {
            errMsg += !playerSize ? '\nmediaTypes.video.playerSize' : '';
            errMsg += !adPodDurationSec ? '\nmediaTypes.video.adPodDurationSec' : '';
            errMsg += !durationRangeSec ? '\nmediaTypes.video.durationRangeSec' : '';
            (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)(errMsg);
            return false;
          }
        }
        return true;
      });
      adUnits = goodAdUnits;
      fn.call(this, adUnits);
    }
    
    /**
     * This check evaluates the incoming bid's `video.durationSeconds` field and tests it against specific logic depending on adUnit config.  Summary of logic below:
     * when adUnit.mediaTypes.video.requireExactDuration is true
     *  - only bids that exactly match those listed values are accepted (don't round at all).
     *  - populate the `bid.video.durationBucket` field with the matching duration value
     * when adUnit.mediaTypes.video.requireExactDuration is false
     *  - round the duration to the next highest specified duration value based on adunit.  If the duration is above a range within a set buffer, that bid falls down into that bucket.
     *      (eg if range was [5, 15, 30] -> 2s is rounded to 5s; 17s is rounded back to 15s; 18s is rounded up to 30s)
     *  - if the bid is above the range of the listed durations (and outside the buffer), reject the bid
     *  - set the rounded duration value in the `bid.video.durationBucket` field for accepted bids
     * @param {Object} videoMediaType 'mediaTypes.video' associated to bidResponse
     * @param {Object} bidResponse incoming bidResponse being evaluated by bidderFactory
     * @returns {boolean} return false if bid duration is deemed invalid as per adUnit configuration; return true if fine
    */
    function checkBidDuration(videoMediaType, bidResponse) {
      var buffer = 2;
      var bidDuration = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"])(bidResponse, 'video.durationSeconds');
      var adUnitRanges = videoMediaType.durationRangeSec;
      adUnitRanges.sort(function (a, b) {
        return a - b;
      }); // ensure the ranges are sorted in numeric order
    
      if (!videoMediaType.requireExactDuration) {
        var max = Math.max.apply(Math, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_8__["default"])(adUnitRanges));
        if (bidDuration <= max + buffer) {
          var nextHighestRange = (0,_src_polyfill_js__WEBPACK_IMPORTED_MODULE_5__.find)(adUnitRanges, function (range) {
            return range + buffer >= bidDuration;
          });
          bidResponse.video.durationBucket = nextHighestRange;
        } else {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)("Detected a bid with a duration value outside the accepted ranges specified in adUnit.mediaTypes.video.durationRangeSec.  Rejecting bid: ", bidResponse);
          return false;
        }
      } else {
        if ((0,_src_polyfill_js__WEBPACK_IMPORTED_MODULE_5__.find)(adUnitRanges, function (range) {
          return range === bidDuration;
        })) {
          bidResponse.video.durationBucket = bidDuration;
        } else {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)("Detected a bid with a duration value not part of the list of accepted ranges specified in adUnit.mediaTypes.video.durationRangeSec.  Exact match durations must be used for this adUnit. Rejecting bid: ", bidResponse);
          return false;
        }
      }
      return true;
    }
    
    /**
     * This hooked function evaluates an adpod bid and determines if the required fields are present.
     * If it's found to not be an adpod bid, it will return to original function via hook logic
     * @param {Function} fn reference to original function (used by hook logic)
     * @param {Object} bid incoming bid object
     * @param {Object} adUnit adUnit object of associated bid
     * @param {Object} videoMediaType copy of the `bidRequest.mediaTypes.video` object; used in original function
     * @param {String} context value of the `bidRequest.mediaTypes.video.context` field; used in original function
     * @returns {boolean} this return is only used for adpod bids
     */
    function checkVideoBidSetupHook(fn, bid, adUnit, videoMediaType, context) {
      if (context === _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_7__.ADPOD) {
        var result = true;
        var brandCategoryExclusion = _src_config_js__WEBPACK_IMPORTED_MODULE_2__.config.getConfig('adpod.brandCategoryExclusion');
        if (brandCategoryExclusion && !(0,_src_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"])(bid, 'meta.primaryCatId')) {
          result = false;
        }
        if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"])(bid, 'video')) {
          if (!(0,_src_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"])(bid, 'video.context') || bid.video.context !== _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_7__.ADPOD) {
            result = false;
          }
          if (!(0,_src_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"])(bid, 'video.durationSeconds') || bid.video.durationSeconds <= 0) {
            result = false;
          } else {
            var isBidGood = checkBidDuration(videoMediaType, bid);
            if (!isBidGood) result = false;
          }
        }
        if (!_src_config_js__WEBPACK_IMPORTED_MODULE_2__.config.getConfig('cache.url') && bid.vastXml && !bid.vastUrl) {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.logError)("\n        This bid contains only vastXml and will not work when a prebid cache url is not specified.\n        Try enabling prebid cache with pbjs.setConfig({ cache: {url: \"...\"} });\n      ");
          result = false;
        }
        ;
        fn.bail(result);
      } else {
        fn.call(this, bid, adUnit, videoMediaType, context);
      }
    }
    
    /**
     * This function reads the (optional) settings for the adpod as set from the setConfig()
     * @param {Object} config contains the config settings for adpod module
     */
    function adpodSetConfig(config) {
      if (config.bidQueueTimeDelay !== undefined) {
        if (typeof config.bidQueueTimeDelay === 'number' && config.bidQueueTimeDelay > 0) {
          queueTimeDelay = config.bidQueueTimeDelay;
        } else {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)("Detected invalid value for adpod.bidQueueTimeDelay in setConfig; must be a positive number.  Using default: ".concat(queueTimeDelay));
        }
      }
      if (config.bidQueueSizeLimit !== undefined) {
        if (typeof config.bidQueueSizeLimit === 'number' && config.bidQueueSizeLimit > 0) {
          queueSizeLimit = config.bidQueueSizeLimit;
        } else {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)("Detected invalid value for adpod.bidQueueSizeLimit in setConfig; must be a positive number.  Using default: ".concat(queueSizeLimit));
        }
      }
    }
    _src_config_js__WEBPACK_IMPORTED_MODULE_2__.config.getConfig('adpod', function (config) {
      return adpodSetConfig(config.adpod);
    });
    
    /**
     * This function initializes the adpod module's hooks.  This is called by the corresponding adserver video module.
     */
    function initAdpodHooks() {
      (0,_src_hook_js__WEBPACK_IMPORTED_MODULE_9__.setupBeforeHookFnOnce)(_src_auction_js__WEBPACK_IMPORTED_MODULE_4__.callPrebidCache, callPrebidCacheHook);
      (0,_src_hook_js__WEBPACK_IMPORTED_MODULE_9__.setupBeforeHookFnOnce)(_src_prebid_js__WEBPACK_IMPORTED_MODULE_0__.checkAdUnitSetup, checkAdUnitSetupHook);
      (0,_src_hook_js__WEBPACK_IMPORTED_MODULE_9__.setupBeforeHookFnOnce)(_src_video_js__WEBPACK_IMPORTED_MODULE_10__.checkVideoBidSetup, checkVideoBidSetupHook);
    }
    initAdpodHooks();
    
    /**
     *
     * @param {Array[Object]} bids list of 'winning' bids that need to be cached
     * @param {Function} callback send the cached bids (or error) back to adserverVideoModule for further processing
     }}
     */
    function callPrebidCacheAfterAuction(bids, callback) {
      // will call PBC here and execute cb param to initialize player code
      (0,_src_videoCache_js__WEBPACK_IMPORTED_MODULE_6__.store)(bids, function (error, cacheIds) {
        if (error) {
          callback(error, null);
        } else {
          var successfulCachedBids = [];
          for (var i = 0; i < cacheIds.length; i++) {
            if (cacheIds[i] !== '') {
              successfulCachedBids.push(bids[i]);
            }
          }
          callback(null, successfulCachedBids);
        }
      });
    }
    
    /**
     * Compare function to be used in sorting long-form bids. This will compare bids on price per second.
     * @param {Object} bid
     * @param {Object} bid
     */
    function sortByPricePerSecond(a, b) {
      if (a.adserverTargeting[_src_constants_json__WEBPACK_IMPORTED_MODULE_11__.TARGETING_KEYS.PRICE_BUCKET] / a.video.durationBucket < b.adserverTargeting[_src_constants_json__WEBPACK_IMPORTED_MODULE_11__.TARGETING_KEYS.PRICE_BUCKET] / b.video.durationBucket) {
        return 1;
      }
      if (a.adserverTargeting[_src_constants_json__WEBPACK_IMPORTED_MODULE_11__.TARGETING_KEYS.PRICE_BUCKET] / a.video.durationBucket > b.adserverTargeting[_src_constants_json__WEBPACK_IMPORTED_MODULE_11__.TARGETING_KEYS.PRICE_BUCKET] / b.video.durationBucket) {
        return -1;
      }
      return 0;
    }
    
    /**
     * This function returns targeting keyvalue pairs for long-form adserver modules. Freewheel and GAM are currently supporting Prebid long-form
     * @param {Object} options
     * @param {Array[string]} codes
     * @param {function} callback
     * @returns targeting kvs for adUnitCodes
     */
    function getTargeting() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        codes = _ref.codes,
        callback = _ref.callback;
      if (!callback) {
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.logError)('No callback function was defined in the getTargeting call.  Aborting getTargeting().');
        return;
      }
      codes = codes || [];
      var adPodAdUnits = getAdPodAdUnits(codes);
      var bidsReceived = _src_auctionManager_js__WEBPACK_IMPORTED_MODULE_12__.auctionManager.getBidsReceived();
      var competiveExclusionEnabled = _src_config_js__WEBPACK_IMPORTED_MODULE_2__.config.getConfig('adpod.brandCategoryExclusion');
      var deferCachingSetting = _src_config_js__WEBPACK_IMPORTED_MODULE_2__.config.getConfig('adpod.deferCaching');
      var deferCachingEnabled = typeof deferCachingSetting === 'boolean' ? deferCachingSetting : true;
      var bids = getBidsForAdpod(bidsReceived, adPodAdUnits);
      bids = competiveExclusionEnabled || deferCachingEnabled ? getExclusiveBids(bids) : bids;
      var prioritizeDeals = _src_config_js__WEBPACK_IMPORTED_MODULE_2__.config.getConfig('adpod.prioritizeDeals');
      if (prioritizeDeals) {
        var _bids$reduce = bids.reduce(function (partitions, bid) {
            var bidDealTier = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"])(bid, 'video.dealTier');
            var minDealTier = _src_config_js__WEBPACK_IMPORTED_MODULE_2__.config.getConfig("adpod.dealTier.".concat(bid.bidderCode, ".minDealTier"));
            if (minDealTier && bidDealTier) {
              if (bidDealTier >= minDealTier) {
                partitions[1].push(bid);
              } else {
                partitions[0].push(bid);
              }
            } else if (bidDealTier) {
              partitions[1].push(bid);
            } else {
              partitions[0].push(bid);
            }
            return partitions;
          }, [[], []]),
          _bids$reduce2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_13__["default"])(_bids$reduce, 2),
          otherBids = _bids$reduce2[0],
          highPriorityDealBids = _bids$reduce2[1];
        highPriorityDealBids.sort(sortByPricePerSecond);
        otherBids.sort(sortByPricePerSecond);
        bids = highPriorityDealBids.concat(otherBids);
      } else {
        bids.sort(sortByPricePerSecond);
      }
      var targeting = {};
      if (deferCachingEnabled === false) {
        adPodAdUnits.forEach(function (adUnit) {
          var adPodTargeting = [];
          var adPodDurationSeconds = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"])(adUnit, 'mediaTypes.video.adPodDurationSec');
          bids.filter(function (bid) {
            return bid.adUnitCode === adUnit.code;
          }).forEach(function (bid, index, arr) {
            if (bid.video.durationBucket <= adPodDurationSeconds) {
              adPodTargeting.push((0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_14__["default"])({}, TARGETING_KEY_PB_CAT_DUR, bid.adserverTargeting[TARGETING_KEY_PB_CAT_DUR]));
              adPodDurationSeconds -= bid.video.durationBucket;
            }
            if (index === arr.length - 1 && adPodTargeting.length > 0) {
              adPodTargeting.push((0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_14__["default"])({}, TARGETING_KEY_CACHE_ID, bid.adserverTargeting[TARGETING_KEY_CACHE_ID]));
            }
          });
          targeting[adUnit.code] = adPodTargeting;
        });
        callback(null, targeting);
      } else {
        var bidsToCache = [];
        adPodAdUnits.forEach(function (adUnit) {
          var adPodDurationSeconds = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"])(adUnit, 'mediaTypes.video.adPodDurationSec');
          bids.filter(function (bid) {
            return bid.adUnitCode === adUnit.code;
          }).forEach(function (bid) {
            if (bid.video.durationBucket <= adPodDurationSeconds) {
              bidsToCache.push(bid);
              adPodDurationSeconds -= bid.video.durationBucket;
            }
          });
        });
        callPrebidCacheAfterAuction(bidsToCache, function (error, bidsSuccessfullyCached) {
          if (error) {
            callback(error, null);
          } else {
            var groupedBids = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.groupBy)(bidsSuccessfullyCached, 'adUnitCode');
            Object.keys(groupedBids).forEach(function (adUnitCode) {
              var adPodTargeting = [];
              groupedBids[adUnitCode].forEach(function (bid, index, arr) {
                adPodTargeting.push((0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_14__["default"])({}, TARGETING_KEY_PB_CAT_DUR, bid.adserverTargeting[TARGETING_KEY_PB_CAT_DUR]));
                if (index === arr.length - 1 && adPodTargeting.length > 0) {
                  adPodTargeting.push((0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_14__["default"])({}, TARGETING_KEY_CACHE_ID, bid.adserverTargeting[TARGETING_KEY_CACHE_ID]));
                }
              });
              targeting[adUnitCode] = adPodTargeting;
            });
            callback(null, targeting);
          }
        });
      }
      return targeting;
    }
    
    /**
     * This function returns the adunit of mediaType adpod
     * @param {Array} codes adUnitCodes
     * @returns {Array[Object]} adunits of mediaType adpod
     */
    function getAdPodAdUnits(codes) {
      return _src_auctionManager_js__WEBPACK_IMPORTED_MODULE_12__.auctionManager.getAdUnits().filter(function (adUnit) {
        return (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"])(adUnit, 'mediaTypes.video.context') === _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_7__.ADPOD;
      }).filter(function (adUnit) {
        return codes.length > 0 ? codes.indexOf(adUnit.code) != -1 : true;
      });
    }
    
    /**
     * This function removes bids of same category. It will be used when competitive exclusion is enabled.
     * @param {Array[Object]} bidsReceived
     * @returns {Array[Object]} unique category bids
     */
    function getExclusiveBids(bidsReceived) {
      var bids = bidsReceived.map(function (bid) {
        return Object.assign({}, bid, (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_14__["default"])({}, TARGETING_KEY_PB_CAT_DUR, bid.adserverTargeting[TARGETING_KEY_PB_CAT_DUR]));
      });
      bids = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.groupBy)(bids, TARGETING_KEY_PB_CAT_DUR);
      var filteredBids = [];
      Object.keys(bids).forEach(function (targetingKey) {
        bids[targetingKey].sort((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.compareOn)('responseTimestamp'));
        filteredBids.push(bids[targetingKey][0]);
      });
      return filteredBids;
    }
    
    /**
     * This function returns bids for adpod adunits
     * @param {Array[Object]} bidsReceived
     * @param {Array[Object]} adPodAdUnits
     * @returns {Array[Object]} bids of mediaType adpod
     */
    function getBidsForAdpod(bidsReceived, adPodAdUnits) {
      var adUnitCodes = adPodAdUnits.map(function (adUnit) {
        return adUnit.code;
      });
      return bidsReceived.filter(function (bid) {
        return adUnitCodes.indexOf(bid.adUnitCode) != -1 && bid.video && bid.video.context === _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_7__.ADPOD;
      });
    }
    var sharedMethods = {
      TARGETING_KEY_PB_CAT_DUR: TARGETING_KEY_PB_CAT_DUR,
      TARGETING_KEY_CACHE_ID: TARGETING_KEY_CACHE_ID,
      'getTargeting': getTargeting
    };
    Object.freeze(sharedMethods);
    (0,_src_hook_js__WEBPACK_IMPORTED_MODULE_9__.module)('adpod', function shareAdpodUtilities() {
      if (!(0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(arguments.length <= 0 ? undefined : arguments[0])) {
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.logError)('Adpod module needs plain object to share methods with submodule');
        return;
      }
      function addMethods(object, func) {
        for (var name in func) {
          object[name] = func[name];
        }
      }
      addMethods(arguments.length <= 0 ? undefined : arguments[0], sharedMethods);
    });
    window.owpbjs.installedModules.push('adpod');
    
    /***/ })
    
    },
    /******/ function(__webpack_require__) { // webpackRuntimeModules
    /******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
    /******/ __webpack_require__.O(0, ["fpd"], function() { return __webpack_exec__("./modules/adpod.js"); });
    /******/ var __webpack_exports__ = __webpack_require__.O();
    /******/ }
    ]);
    
    "use strict";
    (self["owpbjsChunk"] = self["owpbjsChunk"] || []).push([["appnexusBidAdapter"],{
    
    /***/ "./modules/appnexusBidAdapter.js":
    /*!***************************************!*\
      !*** ./modules/appnexusBidAdapter.js ***!
      \***************************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    /* unused harmony export spec */
    /* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");
    /* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
    /* harmony import */ var _src_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../src/utils.js */ "./src/utils.js");
    /* harmony import */ var _src_utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../src/utils.js */ "./node_modules/dlv/index.js");
    /* harmony import */ var _src_Renderer_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../src/Renderer.js */ "./src/Renderer.js");
    /* harmony import */ var _src_config_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../src/config.js */ "./src/config.js");
    /* harmony import */ var _src_adapters_bidderFactory_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../src/adapters/bidderFactory.js */ "./src/adapters/bidderFactory.js");
    /* harmony import */ var _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../src/mediaTypes.js */ "./src/mediaTypes.js");
    /* harmony import */ var _src_auctionManager_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../src/auctionManager.js */ "./src/auctionManager.js");
    /* harmony import */ var _src_polyfill_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../src/polyfill.js */ "./src/polyfill.js");
    /* harmony import */ var _src_video_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../src/video.js */ "./src/video.js");
    /* harmony import */ var _src_storageManager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../src/storageManager.js */ "./src/storageManager.js");
    /* harmony import */ var _src_bidderSettings_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../src/bidderSettings.js */ "./src/bidderSettings.js");
    /* harmony import */ var _src_utils_gpdr_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../src/utils/gpdr.js */ "./src/utils/gpdr.js");
    /* harmony import */ var _src_native_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../src/native.js */ "./src/native.js");
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    var BIDDER_CODE = 'appnexus';
    var URL = 'https://ib.adnxs.com/ut/v3/prebid';
    var URL_SIMPLE = 'https://ib.adnxs-simple.com/ut/v3/prebid';
    var VIDEO_TARGETING = ['id', 'minduration', 'maxduration', 'skippable', 'playback_method', 'frameworks', 'context', 'skipoffset'];
    var VIDEO_RTB_TARGETING = ['minduration', 'maxduration', 'skip', 'skipafter', 'playbackmethod', 'api', 'startdelay'];
    var USER_PARAMS = ['age', 'externalUid', 'external_uid', 'segments', 'gender', 'dnt', 'language'];
    var APP_DEVICE_PARAMS = ['geo', 'device_id']; // appid is collected separately
    var DEBUG_PARAMS = ['enabled', 'dongle', 'member_id', 'debug_timeout'];
    var DEBUG_QUERY_PARAM_MAP = {
      'apn_debug_dongle': 'dongle',
      'apn_debug_member_id': 'member_id',
      'apn_debug_timeout': 'debug_timeout'
    };
    var VIDEO_MAPPING = {
      playback_method: {
        'unknown': 0,
        'auto_play_sound_on': 1,
        'auto_play_sound_off': 2,
        'click_to_play': 3,
        'mouse_over': 4,
        'auto_play_sound_unknown': 5
      },
      context: {
        'unknown': 0,
        'pre_roll': 1,
        'mid_roll': 2,
        'post_roll': 3,
        'outstream': 4,
        'in-banner': 5
      }
    };
    var NATIVE_MAPPING = {
      body: 'description',
      body2: 'desc2',
      cta: 'ctatext',
      image: {
        serverName: 'main_image',
        requiredParams: {
          required: true
        }
      },
      icon: {
        serverName: 'icon',
        requiredParams: {
          required: true
        }
      },
      sponsoredBy: 'sponsored_by',
      privacyLink: 'privacy_link',
      salePrice: 'saleprice',
      displayUrl: 'displayurl'
    };
    var SOURCE = 'pbjs';
    var MAX_IMPS_PER_REQUEST = 15;
    var mappingFileUrl = 'https://acdn.adnxs-simple.com/prebid/appnexus-mapping/mappings.json';
    var SCRIPT_TAG_START = '<script';
    var VIEWABILITY_URL_START = /\/\/cdn\.adnxs\.com\/v|\/\/cdn\.adnxs\-simple\.com\/v/;
    var VIEWABILITY_FILE_NAME = 'trk.js';
    var GVLID = 32;
    var storage = (0,_src_storageManager_js__WEBPACK_IMPORTED_MODULE_0__.getStorageManager)({
      gvlid: GVLID,
      bidderCode: BIDDER_CODE
    });
    var spec = {
      code: BIDDER_CODE,
      gvlid: GVLID,
      aliases: [{
        code: 'appnexusAst',
        gvlid: 32
      }, {
        code: 'emxdigital',
        gvlid: 183
      }, {
        code: 'pagescience'
      }, {
        code: 'defymedia'
      }, {
        code: 'gourmetads'
      }, {
        code: 'matomy'
      }, {
        code: 'featureforward'
      }, {
        code: 'oftmedia'
      }, {
        code: 'adasta'
      }, {
        code: 'beintoo',
        gvlid: 618
      }, {
        code: 'dg'
      }, {
        code: 'gps'
      }, {
        code: 'appnexus2'
      }],
      supportedMediaTypes: [_src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.BANNER, _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.VIDEO, _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.NATIVE],
      /**
       * Determines whether or not the given bid request is valid.
       *
       * @param {object} bid The bid to validate.
       * @return boolean True if this is a valid bid, and false otherwise.
       */
      isBidRequestValid: function isBidRequestValid(bid) {
        return !!(bid.params.placementId || bid.params.placement_id || bid.params.member && (bid.params.invCode || bid.params.inv_code));
      },
      /**
       * Make a server request from the list of BidRequests.
       *
       * @param {BidRequest[]} bidRequests A non-empty list of bid requests which should be sent to the Server.
       * @return ServerRequest Info describing the request to the server.
       */
      buildRequests: function buildRequests(bidRequests, bidderRequest) {
        var _bidderRequest$ortb, _bidderRequest$ortb$r;
        // convert Native ORTB definition to old-style prebid native definition
        bidRequests = (0,_src_native_js__WEBPACK_IMPORTED_MODULE_2__.convertOrtbRequestToProprietaryNative)(bidRequests);
        var tags = bidRequests.map(bidToTag);
        var userObjBid = (0,_src_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.find)(bidRequests, hasUserInfo);
        var userObj = {};
        if (_src_config_js__WEBPACK_IMPORTED_MODULE_4__.config.getConfig('coppa') === true) {
          userObj = {
            'coppa': true
          };
        }
        if (userObjBid) {
          Object.keys(userObjBid.params.user).filter(function (param) {
            return (0,_src_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.includes)(USER_PARAMS, param);
          }).forEach(function (param) {
            var uparam = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.convertCamelToUnderscore)(param);
            if (param === 'segments' && (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(userObjBid.params.user[param])) {
              var segs = [];
              userObjBid.params.user[param].forEach(function (val) {
                if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isNumber)(val)) {
                  segs.push({
                    'id': val
                  });
                } else if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isPlainObject)(val)) {
                  segs.push(val);
                }
              });
              userObj[uparam] = segs;
            } else if (param !== 'segments') {
              userObj[uparam] = userObjBid.params.user[param];
            }
          });
        }
        var appDeviceObjBid = (0,_src_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.find)(bidRequests, hasAppDeviceInfo);
        var appDeviceObj;
        if (appDeviceObjBid && appDeviceObjBid.params && appDeviceObjBid.params.app) {
          appDeviceObj = {};
          Object.keys(appDeviceObjBid.params.app).filter(function (param) {
            return (0,_src_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.includes)(APP_DEVICE_PARAMS, param);
          }).forEach(function (param) {
            return appDeviceObj[param] = appDeviceObjBid.params.app[param];
          });
        }
        var appIdObjBid = (0,_src_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.find)(bidRequests, hasAppId);
        var appIdObj;
        if (appIdObjBid && appIdObjBid.params && appDeviceObjBid.params.app && appDeviceObjBid.params.app.id) {
          appIdObj = {
            appid: appIdObjBid.params.app.id
          };
        }
        var debugObj = {};
        var debugObjParams = {};
        var debugCookieName = 'apn_prebid_debug';
        var debugCookie = storage.getCookie(debugCookieName) || null;
        if (debugCookie) {
          try {
            debugObj = JSON.parse(debugCookie);
          } catch (e) {
            (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.logError)('AppNexus Debug Auction Cookie Error:\n\n' + e);
          }
        } else {
          Object.keys(DEBUG_QUERY_PARAM_MAP).forEach(function (qparam) {
            var qval = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.getParameterByName)(qparam);
            if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isStr)(qval) && qval !== '') {
              debugObj[DEBUG_QUERY_PARAM_MAP[qparam]] = qval;
              debugObj.enabled = true;
            }
          });
          debugObj = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.convertTypes)({
            'member_id': 'number',
            'debug_timeout': 'number'
          }, debugObj);
          var debugBidRequest = (0,_src_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.find)(bidRequests, hasDebug);
          if (debugBidRequest && debugBidRequest.debug) {
            debugObj = debugBidRequest.debug;
          }
        }
        if (debugObj && debugObj.enabled) {
          Object.keys(debugObj).filter(function (param) {
            return (0,_src_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.includes)(DEBUG_PARAMS, param);
          }).forEach(function (param) {
            debugObjParams[param] = debugObj[param];
          });
        }
        var memberIdBid = (0,_src_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.find)(bidRequests, hasMemberId);
        var member = memberIdBid ? parseInt(memberIdBid.params.member, 10) : 0;
        var schain = bidRequests[0].schain;
        var omidSupport = (0,_src_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.find)(bidRequests, hasOmidSupport);
        var payload = {
          tags: (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_6__["default"])(tags),
          user: userObj,
          sdk: {
            source: SOURCE,
            version: "7.39.0"
          },
          schain: schain
        };
        if (omidSupport) {
          payload['iab_support'] = {
            omidpn: 'Appnexus',
            omidpv: "7.39.0"
          };
        }
        if (member > 0) {
          payload.member_id = member;
        }
        if (appDeviceObjBid) {
          payload.device = appDeviceObj;
        }
        if (appIdObjBid) {
          payload.app = appIdObj;
        }
        function grabOrtb2Keywords(ortb2Obj) {
          var fields = ['site.keywords', 'site.content.keywords', 'user.keywords', 'app.keywords', 'app.content.keywords'];
          var result = [];
          fields.forEach(function (path) {
            var keyStr = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_7__["default"])(ortb2Obj, path);
            if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isStr)(keyStr)) result.push(keyStr);
          });
          return result;
        }
    
        // grab the ortb2 keyword data (if it exists) and convert from the comma list string format to object format
        var ortb2 = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.deepClone)(bidderRequest && bidderRequest.ortb2);
        var ortb2KeywordsObjList = grabOrtb2Keywords(ortb2).map(function (keyStr) {
          return convertStringToKeywordsObj(keyStr);
        });
        var anAuctionKeywords = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.deepClone)(_src_config_js__WEBPACK_IMPORTED_MODULE_4__.config.getConfig('appnexusAuctionKeywords')) || {};
        // need to convert the string values into array of strings, to properly merge values with other existing keys later
        Object.keys(anAuctionKeywords).forEach(function (k) {
          if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isStr)(anAuctionKeywords[k]) || (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isNumber)(anAuctionKeywords[k])) anAuctionKeywords[k] = [anAuctionKeywords[k]];
        });
        // combine all sources of keywords (converted from string comma list to object format) into one object (that combines the values for shared keys)
        var mergedAuctionKeywords = _src_utils_js__WEBPACK_IMPORTED_MODULE_5__.mergeDeep.apply(void 0, [{}, anAuctionKeywords].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_6__["default"])(ortb2KeywordsObjList)));
    
        // convert to final format used by adserver
        var auctionKeywords = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.transformBidderParamKeywords)(mergedAuctionKeywords);
        if (auctionKeywords.length > 0) {
          auctionKeywords.forEach(deleteValues);
          payload.keywords = auctionKeywords;
        }
        if (_src_config_js__WEBPACK_IMPORTED_MODULE_4__.config.getConfig('adpod.brandCategoryExclusion')) {
          payload.brand_category_uniqueness = true;
        }
        if (debugObjParams.enabled) {
          payload.debug = debugObjParams;
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.logInfo)('AppNexus Debug Auction Settings:\n\n' + JSON.stringify(debugObjParams, null, 4));
        }
        if (bidderRequest && bidderRequest.gdprConsent) {
          // note - objects for impbus use underscore instead of camelCase
          payload.gdpr_consent = {
            consent_string: bidderRequest.gdprConsent.consentString,
            consent_required: bidderRequest.gdprConsent.gdprApplies
          };
          if (bidderRequest.gdprConsent.addtlConsent && bidderRequest.gdprConsent.addtlConsent.indexOf('~') !== -1) {
            var ac = bidderRequest.gdprConsent.addtlConsent;
            // pull only the ids from the string (after the ~) and convert them to an array of ints
            var acStr = ac.substring(ac.indexOf('~') + 1);
            payload.gdpr_consent.addtl_consent = acStr.split('.').map(function (id) {
              return parseInt(id, 10);
            });
          }
        }
        if (bidderRequest && bidderRequest.uspConsent) {
          payload.us_privacy = bidderRequest.uspConsent;
        }
        if (bidderRequest !== null && bidderRequest !== void 0 && bidderRequest.gppConsent) {
          payload.privacy = {
            gpp: bidderRequest.gppConsent.gppString,
            gpp_sid: bidderRequest.gppConsent.applicableSections
          };
        } else if (bidderRequest !== null && bidderRequest !== void 0 && (_bidderRequest$ortb = bidderRequest.ortb2) !== null && _bidderRequest$ortb !== void 0 && (_bidderRequest$ortb$r = _bidderRequest$ortb.regs) !== null && _bidderRequest$ortb$r !== void 0 && _bidderRequest$ortb$r.gpp) {
          payload.privacy = {
            gpp: bidderRequest.ortb2.regs.gpp,
            gpp_sid: bidderRequest.ortb2.regs.gpp_sid
          };
        }
        if (bidderRequest && bidderRequest.refererInfo) {
          var refererinfo = {
            // TODO: are these the correct referer values?
            rd_ref: encodeURIComponent(bidderRequest.refererInfo.topmostLocation),
            rd_top: bidderRequest.refererInfo.reachedTop,
            rd_ifs: bidderRequest.refererInfo.numIframes,
            rd_stk: bidderRequest.refererInfo.stack.map(function (url) {
              return encodeURIComponent(url);
            }).join(',')
          };
          var pubPageUrl = bidderRequest.refererInfo.canonicalUrl;
          if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isStr)(pubPageUrl) && pubPageUrl !== '') {
            refererinfo.rd_can = pubPageUrl;
          }
          payload.referrer_detection = refererinfo;
        }
        var hasAdPodBid = (0,_src_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.find)(bidRequests, hasAdPod);
        if (hasAdPodBid) {
          bidRequests.filter(hasAdPod).forEach(function (adPodBid) {
            var adPodTags = createAdPodRequest(tags, adPodBid);
            // don't need the original adpod placement because it's in adPodTags
            var nonPodTags = payload.tags.filter(function (tag) {
              return tag.uuid !== adPodBid.bidId;
            });
            payload.tags = [].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_6__["default"])(nonPodTags), (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_6__["default"])(adPodTags));
          });
        }
        if (bidRequests[0].userId) {
          var eids = [];
          bidRequests[0].userIdAsEids.forEach(function (eid) {
            if (!eid || !eid.uids || eid.uids.length < 1) {
              return;
            }
            eid.uids.forEach(function (uid) {
              var tmp = {
                'source': eid.source,
                'id': uid.id
              };
              if (eid.source == 'adserver.org') {
                tmp.rti_partner = 'TDID';
              } else if (eid.source == 'uidapi.com') {
                tmp.rti_partner = 'UID2';
              }
              eids.push(tmp);
            });
          });
          if (eids.length) {
            payload.eids = eids;
          }
        }
        if (tags[0].publisher_id) {
          payload.publisher_id = tags[0].publisher_id;
        }
        var request = formatRequest(payload, bidderRequest);
        return request;
      },
      /**
       * Unpack the response from the server into a list of bids.
       *
       * @param {*} serverResponse A successful response from the server.
       * @return {Bid[]} An array of bids which were nested inside the server.
       */
      interpretResponse: function interpretResponse(serverResponse, _ref) {
        var _this = this;
        var bidderRequest = _ref.bidderRequest;
        serverResponse = serverResponse.body;
        var bids = [];
        if (!serverResponse || serverResponse.error) {
          var errorMessage = "in response for ".concat(bidderRequest.bidderCode, " adapter");
          if (serverResponse && serverResponse.error) {
            errorMessage += ": ".concat(serverResponse.error);
          }
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.logError)(errorMessage);
          return bids;
        }
        if (serverResponse.tags) {
          serverResponse.tags.forEach(function (serverBid) {
            var rtbBid = getRtbBid(serverBid);
            if (rtbBid) {
              var cpmCheck = _src_bidderSettings_js__WEBPACK_IMPORTED_MODULE_8__.bidderSettings.get(bidderRequest.bidderCode, 'allowZeroCpmBids') === true ? rtbBid.cpm >= 0 : rtbBid.cpm > 0;
              if (cpmCheck && (0,_src_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.includes)(_this.supportedMediaTypes, rtbBid.ad_type)) {
                var bid = newBid(serverBid, rtbBid, bidderRequest);
                bid.mediaType = parseMediaType(rtbBid);
                bids.push(bid);
              }
            }
          });
        }
        if (serverResponse.debug && serverResponse.debug.debug_info) {
          var debugHeader = 'AppNexus Debug Auction for Prebid\n\n';
          var debugText = debugHeader + serverResponse.debug.debug_info;
          debugText = debugText.replace(/(<td>|<th>)/gm, '\t') // Tables
          .replace(/(<\/td>|<\/th>)/gm, '\n') // Tables
          .replace(/^<br>/gm, '') // Remove leading <br>
          .replace(/(<br>\n|<br>)/gm, '\n') // <br>
          .replace(/<h1>(.*)<\/h1>/gm, '\n\n===== $1 =====\n\n') // Header H1
          .replace(/<h[2-6]>(.*)<\/h[2-6]>/gm, '\n\n*** $1 ***\n\n') // Headers
          .replace(/(<([^>]+)>)/igm, ''); // Remove any other tags
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.logMessage)('https://console.appnexus.com/docs/understanding-the-debug-auction');
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.logMessage)(debugText);
        }
        return bids;
      },
      /**
       * @typedef {Object} mappingFileInfo
       * @property {string} url  mapping file json url
       * @property {number} refreshInDays prebid stores mapping data in localstorage so you can return in how many days you want to update value stored in localstorage.
       * @property {string} localStorageKey unique key to store your mapping json in localstorage
       */
    
      /**
       * Returns mapping file info. This info will be used by bidderFactory to preload mapping file and store data in local storage
       * @returns {mappingFileInfo}
       */
      getMappingFileInfo: function getMappingFileInfo() {
        return {
          url: mappingFileUrl,
          refreshInDays: 2
        };
      },
      getUserSyncs: function getUserSyncs(syncOptions, responses, gdprConsent, uspConsent, gppConsent) {
        function checkGppStatus(gppConsent) {
          // this is a temporary measure to supress usersync in US-based GPP regions
          // this logic will be revised when proper signals (akin to purpose1 from TCF2) can be determined for US GPP
          if (gppConsent && Array.isArray(gppConsent.applicableSections)) {
            return gppConsent.applicableSections.every(function (sec) {
              return typeof sec === 'number' && sec <= 5;
            });
          }
          return true;
        }
        if (syncOptions.iframeEnabled && (0,_src_utils_gpdr_js__WEBPACK_IMPORTED_MODULE_9__.hasPurpose1Consent)(gdprConsent) && checkGppStatus(gppConsent)) {
          return [{
            type: 'iframe',
            url: 'https://acdn.adnxs.com/dmp/async_usersync.html'
          }];
        }
      },
      transformBidParams: function transformBidParams(params, isOpenRtb, adUnit, bidRequests) {
        var conversionFn = _src_utils_js__WEBPACK_IMPORTED_MODULE_5__.transformBidderParamKeywords;
        if (isOpenRtb === true) {
          var s2sEndpointUrl = null;
          var s2sConfig = _src_config_js__WEBPACK_IMPORTED_MODULE_4__.config.getConfig('s2sConfig');
          if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isPlainObject)(s2sConfig)) {
            s2sEndpointUrl = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_7__["default"])(s2sConfig, 'endpoint.p1Consent');
          } else if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(s2sConfig)) {
            s2sConfig.forEach(function (s2sCfg) {
              if ((0,_src_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.includes)(s2sCfg.bidders, adUnit.bids[0].bidder)) {
                s2sEndpointUrl = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_7__["default"])(s2sCfg, 'endpoint.p1Consent');
              }
            });
          }
          if (s2sEndpointUrl && s2sEndpointUrl.match('/openrtb2/prebid')) {
            conversionFn = convertKeywordsToString;
          }
        }
        params = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.convertTypes)({
          'member': 'string',
          'invCode': 'string',
          'placementId': 'number',
          'keywords': conversionFn,
          'publisherId': 'number'
        }, params);
        if (isOpenRtb) {
          if (isPopulatedArray(params.keywords)) {
            params.keywords.forEach(deleteValues);
          }
          Object.keys(params).forEach(function (paramKey) {
            var convertedKey = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.convertCamelToUnderscore)(paramKey);
            if (convertedKey !== paramKey) {
              params[convertedKey] = params[paramKey];
              delete params[paramKey];
            }
          });
          params.use_pmt_rule = typeof params.use_payment_rule === 'boolean' ? params.use_payment_rule : false;
          if (params.use_payment_rule) {
            delete params.use_payment_rule;
          }
        }
        return params;
      }
    };
    function isPopulatedArray(arr) {
      return !!((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(arr) && arr.length > 0);
    }
    function deleteValues(keyPairObj) {
      if (isPopulatedArray(keyPairObj.value) && keyPairObj.value[0] === '') {
        delete keyPairObj.value;
      }
    }
    function strIsAppnexusViewabilityScript(str) {
      if (!str || str === '') return false;
      var regexMatchUrlStart = str.match(VIEWABILITY_URL_START);
      var viewUrlStartInStr = regexMatchUrlStart != null && regexMatchUrlStart.length >= 1;
      var regexMatchFileName = str.match(VIEWABILITY_FILE_NAME);
      var fileNameInStr = regexMatchFileName != null && regexMatchFileName.length >= 1;
      return str.startsWith(SCRIPT_TAG_START) && fileNameInStr && viewUrlStartInStr;
    }
    function formatRequest(payload, bidderRequest) {
      var request = [];
      var options = {
        withCredentials: true
      };
      var endpointUrl = URL;
      if (!(0,_src_utils_gpdr_js__WEBPACK_IMPORTED_MODULE_9__.hasPurpose1Consent)(bidderRequest === null || bidderRequest === void 0 ? void 0 : bidderRequest.gdprConsent)) {
        endpointUrl = URL_SIMPLE;
      }
      if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.getParameterByName)('apn_test').toUpperCase() === 'TRUE' || _src_config_js__WEBPACK_IMPORTED_MODULE_4__.config.getConfig('apn_test') === true) {
        options.customHeaders = {
          'X-Is-Test': 1
        };
      }
      if (payload.tags.length > MAX_IMPS_PER_REQUEST) {
        var clonedPayload = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.deepClone)(payload);
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.chunk)(payload.tags, MAX_IMPS_PER_REQUEST).forEach(function (tags) {
          clonedPayload.tags = tags;
          var payloadString = JSON.stringify(clonedPayload);
          request.push({
            method: 'POST',
            url: endpointUrl,
            data: payloadString,
            bidderRequest: bidderRequest,
            options: options
          });
        });
      } else {
        var payloadString = JSON.stringify(payload);
        request = {
          method: 'POST',
          url: endpointUrl,
          data: payloadString,
          bidderRequest: bidderRequest,
          options: options
        };
      }
      return request;
    }
    function newRenderer(adUnitCode, rtbBid) {
      var rendererOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var renderer = _src_Renderer_js__WEBPACK_IMPORTED_MODULE_10__.Renderer.install({
        id: rtbBid.renderer_id,
        url: rtbBid.renderer_url,
        config: rendererOptions,
        loaded: false,
        adUnitCode: adUnitCode
      });
      try {
        renderer.setRender(outstreamRender);
      } catch (err) {
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.logWarn)('Prebid Error calling setRender on renderer', err);
      }
      renderer.setEventHandlers({
        impression: function impression() {
          return (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.logMessage)('AppNexus outstream video impression event');
        },
        loaded: function loaded() {
          return (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.logMessage)('AppNexus outstream video loaded event');
        },
        ended: function ended() {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.logMessage)('AppNexus outstream renderer video event');
          document.querySelector("#".concat(adUnitCode)).style.display = 'none';
        }
      });
      return renderer;
    }
    
    /**
     * Unpack the Server's Bid into a Prebid-compatible one.
     * @param serverBid
     * @param rtbBid
     * @param bidderRequest
     * @return Bid
     */
    function newBid(serverBid, rtbBid, bidderRequest) {
      var bidRequest = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.getBidRequest)(serverBid.uuid, [bidderRequest]);
      var adId = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.getUniqueIdentifierStr)();
      var bid = {
        adId: adId,
        requestId: serverBid.uuid,
        cpm: rtbBid.cpm,
        creativeId: rtbBid.creative_id,
        dealId: rtbBid.deal_id,
        currency: 'USD',
        netRevenue: true,
        ttl: 300,
        adUnitCode: bidRequest.adUnitCode,
        appnexus: {
          buyerMemberId: rtbBid.buyer_member_id,
          dealPriority: rtbBid.deal_priority,
          dealCode: rtbBid.deal_code
        }
      };
      if (rtbBid.adomain) {
        bid.meta = Object.assign({}, bid.meta, {
          advertiserDomains: [rtbBid.adomain]
        });
      }
      if (rtbBid.advertiser_id) {
        bid.meta = Object.assign({}, bid.meta, {
          advertiserId: rtbBid.advertiser_id
        });
      }
    
      // temporary function; may remove at later date if/when adserver fully supports dchain
      function setupDChain(rtbBid) {
        var dchain = {
          ver: '1.0',
          complete: 0,
          nodes: [{
            bsid: rtbBid.buyer_member_id.toString()
          }]
        };
        return dchain;
      }
      if (rtbBid.buyer_member_id) {
        bid.meta = Object.assign({}, bid.meta, {
          dchain: setupDChain(rtbBid)
        });
      }
      if (rtbBid.brand_id) {
        bid.meta = Object.assign({}, bid.meta, {
          brandId: rtbBid.brand_id
        });
      }
      if (rtbBid.rtb.video) {
        // shared video properties used for all 3 contexts
        Object.assign(bid, {
          width: rtbBid.rtb.video.player_width,
          height: rtbBid.rtb.video.player_height,
          vastImpUrl: rtbBid.notify_url,
          ttl: 3600
        });
        var videoContext = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_7__["default"])(bidRequest, 'mediaTypes.video.context');
        switch (videoContext) {
          case _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.ADPOD:
            var primaryCatId = (0,_src_adapters_bidderFactory_js__WEBPACK_IMPORTED_MODULE_11__.getIabSubCategory)(bidRequest.bidder, rtbBid.brand_category_id);
            bid.meta = Object.assign({}, bid.meta, {
              primaryCatId: primaryCatId
            });
            var dealTier = rtbBid.deal_priority;
            bid.video = {
              context: _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.ADPOD,
              durationSeconds: Math.floor(rtbBid.rtb.video.duration_ms / 1000),
              dealTier: dealTier
            };
            bid.vastUrl = rtbBid.rtb.video.asset_url;
            break;
          case _src_video_js__WEBPACK_IMPORTED_MODULE_12__.OUTSTREAM:
            bid.adResponse = serverBid;
            bid.adResponse.ad = bid.adResponse.ads[0];
            bid.adResponse.ad.video = bid.adResponse.ad.rtb.video;
            bid.vastXml = rtbBid.rtb.video.content;
            if (rtbBid.renderer_url) {
              var videoBid = (0,_src_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.find)(bidderRequest.bids, function (bid) {
                return bid.bidId === serverBid.uuid;
              });
              var rendererOptions = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_7__["default"])(videoBid, 'mediaTypes.video.renderer.options'); // mediaType definition has preference (shouldn't options be .config?)
              if (!rendererOptions) {
                rendererOptions = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_7__["default"])(videoBid, 'renderer.options'); // second the adUnit definition has preference (shouldn't options be .config?)
              }
    
              bid.renderer = newRenderer(bid.adUnitCode, rtbBid, rendererOptions);
            }
            break;
          case _src_video_js__WEBPACK_IMPORTED_MODULE_12__.INSTREAM:
            bid.vastUrl = rtbBid.notify_url + '&redir=' + encodeURIComponent(rtbBid.rtb.video.asset_url);
            break;
        }
      } else if ( true && rtbBid.rtb[_src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.NATIVE]) {
        var nativeAd = rtbBid.rtb[_src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.NATIVE];
        var viewScript;
        if (strIsAppnexusViewabilityScript(rtbBid.viewability.config)) {
          var prebidParams = 'pbjs_adid=' + adId + ';pbjs_auc=' + bidRequest.adUnitCode;
          viewScript = rtbBid.viewability.config.replace('dom_id=%native_dom_id%', prebidParams);
        }
        var jsTrackers = nativeAd.javascript_trackers;
        if (jsTrackers == undefined) {
          jsTrackers = viewScript;
        } else if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isStr)(jsTrackers)) {
          jsTrackers = [jsTrackers, viewScript];
        } else {
          jsTrackers.push(viewScript);
        }
        bid[_src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.NATIVE] = {
          title: nativeAd.title,
          body: nativeAd.desc,
          body2: nativeAd.desc2,
          cta: nativeAd.ctatext,
          rating: nativeAd.rating,
          sponsoredBy: nativeAd.sponsored,
          privacyLink: nativeAd.privacy_link,
          address: nativeAd.address,
          downloads: nativeAd.downloads,
          likes: nativeAd.likes,
          phone: nativeAd.phone,
          price: nativeAd.price,
          salePrice: nativeAd.saleprice,
          clickUrl: nativeAd.link.url,
          displayUrl: nativeAd.displayurl,
          clickTrackers: nativeAd.link.click_trackers,
          impressionTrackers: nativeAd.impression_trackers,
          video: nativeAd.video,
          javascriptTrackers: jsTrackers
        };
        if (nativeAd.main_img) {
          bid['native'].image = {
            url: nativeAd.main_img.url,
            height: nativeAd.main_img.height,
            width: nativeAd.main_img.width
          };
        }
        if (nativeAd.icon) {
          bid['native'].icon = {
            url: nativeAd.icon.url,
            height: nativeAd.icon.height,
            width: nativeAd.icon.width
          };
        }
      } else {
        Object.assign(bid, {
          width: rtbBid.rtb.banner.width,
          height: rtbBid.rtb.banner.height,
          ad: rtbBid.rtb.banner.content
        });
        try {
          if (rtbBid.rtb.trackers) {
            for (var i = 0; i < rtbBid.rtb.trackers[0].impression_urls.length; i++) {
              var url = rtbBid.rtb.trackers[0].impression_urls[i];
              var tracker = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.createTrackPixelHtml)(url);
              bid.ad += tracker;
            }
          }
        } catch (error) {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.logError)('Error appending tracking pixel', error);
        }
      }
      return bid;
    }
    function bidToTag(bid) {
      var tag = {};
      Object.keys(bid.params).forEach(function (paramKey) {
        var convertedKey = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.convertCamelToUnderscore)(paramKey);
        if (convertedKey !== paramKey) {
          bid.params[convertedKey] = bid.params[paramKey];
          delete bid.params[paramKey];
        }
      });
      tag.sizes = transformSizes(bid.sizes);
      tag.primary_size = tag.sizes[0];
      tag.ad_types = [];
      tag.uuid = bid.bidId;
      if (bid.params.placement_id) {
        tag.id = parseInt(bid.params.placement_id, 10);
      } else {
        tag.code = bid.params.inv_code;
      }
      tag.allow_smaller_sizes = bid.params.allow_smaller_sizes || false;
      tag.use_pmt_rule = typeof bid.params.use_payment_rule === 'boolean' ? bid.params.use_payment_rule : typeof bid.params.use_pmt_rule === 'boolean' ? bid.params.use_pmt_rule : false;
      tag.prebid = true;
      tag.disable_psa = true;
      var bidFloor = getBidFloor(bid);
      if (bidFloor) {
        tag.reserve = bidFloor;
      }
      if (bid.params.position) {
        tag.position = {
          'above': 1,
          'below': 2
        }[bid.params.position] || 0;
      } else {
        var mediaTypePos = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_7__["default"])(bid, "mediaTypes.banner.pos") || (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_7__["default"])(bid, "mediaTypes.video.pos");
        // only support unknown, atf, and btf values for position at this time
        if (mediaTypePos === 0 || mediaTypePos === 1 || mediaTypePos === 3) {
          // ortb spec treats btf === 3, but our system interprets btf === 2; so converting the ortb value here for consistency
          tag.position = mediaTypePos === 3 ? 2 : mediaTypePos;
        }
      }
      if (bid.params.traffic_source_code) {
        tag.traffic_source_code = bid.params.traffic_source_code;
      }
      if (bid.params.private_sizes) {
        tag.private_sizes = transformSizes(bid.params.private_sizes);
      }
      if (bid.params.supply_type) {
        tag.supply_type = bid.params.supply_type;
      }
      if (bid.params.pub_click) {
        tag.pubclick = bid.params.pub_click;
      }
      if (bid.params.ext_inv_code) {
        tag.ext_inv_code = bid.params.ext_inv_code;
      }
      if (bid.params.publisher_id) {
        tag.publisher_id = parseInt(bid.params.publisher_id, 10);
      }
      if (bid.params.external_imp_id) {
        tag.external_imp_id = bid.params.external_imp_id;
      }
      var ortb2ImpKwStr = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_7__["default"])(bid, 'ortb2Imp.ext.data.keywords');
      if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isStr)(ortb2ImpKwStr) && ortb2ImpKwStr !== '' || !(0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isEmpty)(bid.params.keywords)) {
        // convert ortb2 from comma list string format to bid param object format
        var ortb2ImpKwObj = convertStringToKeywordsObj(ortb2ImpKwStr);
        var bidParamsKwObj = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isPlainObject)(bid.params.keywords) ? (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.deepClone)(bid.params.keywords) : {};
        // need to convert the string values into an array of strings, to properly merge values with other existing keys later
        Object.keys(bidParamsKwObj).forEach(function (k) {
          if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isStr)(bidParamsKwObj[k]) || (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isNumber)(bidParamsKwObj[k])) bidParamsKwObj[k] = [bidParamsKwObj[k]];
        });
    
        // combine both sources of keywords into one merged object (that combines the values for shared keys)
        var keywordsObj = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.mergeDeep)({}, bidParamsKwObj, ortb2ImpKwObj);
    
        // convert to final format used by adserver
        var keywordsUt = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.transformBidderParamKeywords)(keywordsObj);
        if (keywordsUt.length > 0) {
          keywordsUt.forEach(deleteValues);
          tag.keywords = keywordsUt;
        }
      }
      var gpid = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_7__["default"])(bid, 'ortb2Imp.ext.data.pbadslot');
      if (gpid) {
        tag.gpid = gpid;
      }
      if ( true && (bid.mediaType === _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.NATIVE || (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_7__["default"])(bid, "mediaTypes.".concat(_src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.NATIVE)))) {
        tag.ad_types.push(_src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.NATIVE);
        if (tag.sizes.length === 0) {
          tag.sizes = transformSizes([1, 1]);
        }
        if (bid.nativeParams) {
          var nativeRequest = buildNativeRequest(bid.nativeParams);
          tag[_src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.NATIVE] = {
            layouts: [nativeRequest]
          };
        }
      }
      var videoMediaType = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_7__["default"])(bid, "mediaTypes.".concat(_src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.VIDEO));
      var context = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_7__["default"])(bid, 'mediaTypes.video.context');
      if (videoMediaType && context === 'adpod') {
        tag.hb_source = 7;
      } else {
        tag.hb_source = 1;
      }
      if (bid.mediaType === _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.VIDEO || videoMediaType) {
        tag.ad_types.push(_src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.VIDEO);
      }
    
      // instream gets vastUrl, outstream gets vastXml
      if (bid.mediaType === _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.VIDEO || videoMediaType && context !== 'outstream') {
        tag.require_asset_url = true;
      }
      if (bid.params.video) {
        tag.video = {};
        // place any valid video params on the tag
        Object.keys(bid.params.video).filter(function (param) {
          return (0,_src_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.includes)(VIDEO_TARGETING, param);
        }).forEach(function (param) {
          switch (param) {
            case 'context':
            case 'playback_method':
              var type = bid.params.video[param];
              type = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(type) ? type[0] : type;
              tag.video[param] = VIDEO_MAPPING[param][type];
              break;
            // Deprecating tags[].video.frameworks in favor of tags[].video_frameworks
            case 'frameworks':
              break;
            default:
              tag.video[param] = bid.params.video[param];
          }
        });
        if (bid.params.video.frameworks && (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(bid.params.video.frameworks)) {
          tag['video_frameworks'] = bid.params.video.frameworks;
        }
      }
    
      // use IAB ORTB values if the corresponding values weren't already set by bid.params.video
      if (videoMediaType) {
        tag.video = tag.video || {};
        Object.keys(videoMediaType).filter(function (param) {
          return (0,_src_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.includes)(VIDEO_RTB_TARGETING, param);
        }).forEach(function (param) {
          switch (param) {
            case 'minduration':
            case 'maxduration':
              if (typeof tag.video[param] !== 'number') tag.video[param] = videoMediaType[param];
              break;
            case 'skip':
              if (typeof tag.video['skippable'] !== 'boolean') tag.video['skippable'] = videoMediaType[param] === 1;
              break;
            case 'skipafter':
              if (typeof tag.video['skipoffset'] !== 'number') tag.video['skippoffset'] = videoMediaType[param];
              break;
            case 'playbackmethod':
              if (typeof tag.video['playback_method'] !== 'number') {
                var type = videoMediaType[param];
                type = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(type) ? type[0] : type;
    
                // we only support iab's options 1-4 at this time.
                if (type >= 1 && type <= 4) {
                  tag.video['playback_method'] = type;
                }
              }
              break;
            case 'api':
              if (!tag['video_frameworks'] && (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(videoMediaType[param])) {
                // need to read thru array; remove 6 (we don't support it), swap 4 <> 5 if found (to match our adserver mapping for these specific values)
                var apiTmp = videoMediaType[param].map(function (val) {
                  var v = val === 4 ? 5 : val === 5 ? 4 : val;
                  if (v >= 1 && v <= 5) {
                    return v;
                  }
                }).filter(function (v) {
                  return v;
                });
                tag['video_frameworks'] = apiTmp;
              }
              break;
            case 'startdelay':
            case 'placement':
              var contextKey = 'context';
              if (typeof tag.video[contextKey] !== 'number') {
                var placement = videoMediaType['placement'];
                var startdelay = videoMediaType['startdelay'];
                var _context = getContextFromPlacement(placement) || getContextFromStartDelay(startdelay);
                tag.video[contextKey] = VIDEO_MAPPING[contextKey][_context];
              }
              break;
          }
        });
      }
      if (bid.renderer) {
        tag.video = Object.assign({}, tag.video, {
          custom_renderer_present: true
        });
      }
      if (bid.params.frameworks && (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(bid.params.frameworks)) {
        tag['banner_frameworks'] = bid.params.frameworks;
      }
      var adUnit = (0,_src_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.find)(_src_auctionManager_js__WEBPACK_IMPORTED_MODULE_13__.auctionManager.getAdUnits(), function (au) {
        return bid.transactionId === au.transactionId;
      });
      if (adUnit && adUnit.mediaTypes && adUnit.mediaTypes.banner) {
        tag.ad_types.push(_src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.BANNER);
      }
      if (tag.ad_types.length === 0) {
        delete tag.ad_types;
      }
      return tag;
    }
    
    /* Turn bid request sizes into ut-compatible format */
    function transformSizes(requestSizes) {
      var sizes = [];
      var sizeObj = {};
      if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(requestSizes) && requestSizes.length === 2 && !(0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(requestSizes[0])) {
        sizeObj.width = parseInt(requestSizes[0], 10);
        sizeObj.height = parseInt(requestSizes[1], 10);
        sizes.push(sizeObj);
      } else if ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_14__["default"])(requestSizes) === 'object') {
        for (var i = 0; i < requestSizes.length; i++) {
          var size = requestSizes[i];
          sizeObj = {};
          sizeObj.width = parseInt(size[0], 10);
          sizeObj.height = parseInt(size[1], 10);
          sizes.push(sizeObj);
        }
      }
      return sizes;
    }
    function getContextFromPlacement(ortbPlacement) {
      if (!ortbPlacement) {
        return;
      }
      if (ortbPlacement === 2) {
        return 'in-banner';
      } else if (ortbPlacement > 2) {
        return 'outstream';
      }
    }
    function getContextFromStartDelay(ortbStartDelay) {
      if (!ortbStartDelay) {
        return;
      }
      if (ortbStartDelay === 0) {
        return 'pre_roll';
      } else if (ortbStartDelay === -1) {
        return 'mid_roll';
      } else if (ortbStartDelay === -2) {
        return 'post_roll';
      }
    }
    function hasUserInfo(bid) {
      return !!bid.params.user;
    }
    function hasMemberId(bid) {
      return !!parseInt(bid.params.member, 10);
    }
    function hasAppDeviceInfo(bid) {
      if (bid.params) {
        return !!bid.params.app;
      }
    }
    function hasAppId(bid) {
      if (bid.params && bid.params.app) {
        return !!bid.params.app.id;
      }
      return !!bid.params.app;
    }
    function hasDebug(bid) {
      return !!bid.debug;
    }
    function hasAdPod(bid) {
      return bid.mediaTypes && bid.mediaTypes.video && bid.mediaTypes.video.context === _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.ADPOD;
    }
    function hasOmidSupport(bid) {
      var hasOmid = false;
      var bidderParams = bid.params;
      var videoParams = bid.params.video;
      if (bidderParams.frameworks && (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(bidderParams.frameworks)) {
        hasOmid = (0,_src_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.includes)(bid.params.frameworks, 6);
      }
      if (!hasOmid && videoParams && videoParams.frameworks && (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(videoParams.frameworks)) {
        hasOmid = (0,_src_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.includes)(bid.params.video.frameworks, 6);
      }
      return hasOmid;
    }
    
    /**
     * Expand an adpod placement into a set of request objects according to the
     * total adpod duration and the range of duration seconds. Sets minduration/
     * maxduration video property according to requireExactDuration configuration
     */
    function createAdPodRequest(tags, adPodBid) {
      var _adPodBid$mediaTypes$ = adPodBid.mediaTypes.video,
        durationRangeSec = _adPodBid$mediaTypes$.durationRangeSec,
        requireExactDuration = _adPodBid$mediaTypes$.requireExactDuration;
      var numberOfPlacements = getAdPodPlacementNumber(adPodBid.mediaTypes.video);
      var maxDuration = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.getMaxValueFromArray)(durationRangeSec);
      var tagToDuplicate = tags.filter(function (tag) {
        return tag.uuid === adPodBid.bidId;
      });
      var request = _src_utils_js__WEBPACK_IMPORTED_MODULE_5__.fill.apply(void 0, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_6__["default"])(tagToDuplicate).concat([numberOfPlacements]));
      if (requireExactDuration) {
        var divider = Math.ceil(numberOfPlacements / durationRangeSec.length);
        var chunked = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.chunk)(request, divider);
    
        // each configured duration is set as min/maxduration for a subset of requests
        durationRangeSec.forEach(function (duration, index) {
          chunked[index].map(function (tag) {
            setVideoProperty(tag, 'minduration', duration);
            setVideoProperty(tag, 'maxduration', duration);
          });
        });
      } else {
        // all maxdurations should be the same
        request.map(function (tag) {
          return setVideoProperty(tag, 'maxduration', maxDuration);
        });
      }
      return request;
    }
    function getAdPodPlacementNumber(videoParams) {
      var adPodDurationSec = videoParams.adPodDurationSec,
        durationRangeSec = videoParams.durationRangeSec,
        requireExactDuration = videoParams.requireExactDuration;
      var minAllowedDuration = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.getMinValueFromArray)(durationRangeSec);
      var numberOfPlacements = Math.floor(adPodDurationSec / minAllowedDuration);
      return requireExactDuration ? Math.max(numberOfPlacements, durationRangeSec.length) : numberOfPlacements;
    }
    function setVideoProperty(tag, key, value) {
      if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isEmpty)(tag.video)) {
        tag.video = {};
      }
      tag.video[key] = value;
    }
    function getRtbBid(tag) {
      return tag && tag.ads && tag.ads.length && (0,_src_polyfill_js__WEBPACK_IMPORTED_MODULE_3__.find)(tag.ads, function (ad) {
        return ad.rtb;
      });
    }
    function buildNativeRequest(params) {
      var request = {};
    
      // map standard prebid native asset identifier to /ut parameters
      // e.g., tag specifies `body` but /ut only knows `description`.
      // mapping may be in form {tag: '<server name>'} or
      // {tag: {serverName: '<server name>', requiredParams: {...}}}
      Object.keys(params).forEach(function (key) {
        // check if one of the <server name> forms is used, otherwise
        // a mapping wasn't specified so pass the key straight through
        var requestKey = NATIVE_MAPPING[key] && NATIVE_MAPPING[key].serverName || NATIVE_MAPPING[key] || key;
    
        // required params are always passed on request
        var requiredParams = NATIVE_MAPPING[key] && NATIVE_MAPPING[key].requiredParams;
        request[requestKey] = Object.assign({}, requiredParams, params[key]);
    
        // convert the sizes of image/icon assets to proper format (if needed)
        var isImageAsset = !!(requestKey === NATIVE_MAPPING.image.serverName || requestKey === NATIVE_MAPPING.icon.serverName);
        if (isImageAsset && request[requestKey].sizes) {
          var sizes = request[requestKey].sizes;
          if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isArrayOfNums)(sizes) || (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(sizes) && sizes.length > 0 && sizes.every(function (sz) {
            return (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isArrayOfNums)(sz);
          })) {
            request[requestKey].sizes = transformSizes(request[requestKey].sizes);
          }
        }
        if (requestKey === NATIVE_MAPPING.privacyLink) {
          request.privacy_supported = true;
        }
      });
      return request;
    }
    
    /**
     * This function hides google div container for outstream bids to remove unwanted space on page. Appnexus renderer creates a new iframe outside of google iframe to render the outstream creative.
     * @param {string} elementId element id
     */
    function hidedfpContainer(elementId) {
      try {
        var el = document.getElementById(elementId).querySelectorAll("div[id^='google_ads']");
        if (el[0]) {
          el[0].style.setProperty('display', 'none');
        }
      } catch (e) {
        // element not found!
      }
    }
    function hideSASIframe(elementId) {
      try {
        // find script tag with id 'sas_script'. This ensures it only works if you're using Smart Ad Server.
        var el = document.getElementById(elementId).querySelectorAll("script[id^='sas_script']");
        if (el[0].nextSibling && el[0].nextSibling.localName === 'iframe') {
          el[0].nextSibling.style.setProperty('display', 'none');
        }
      } catch (e) {
        // element not found!
      }
    }
    function outstreamRender(bid, doc) {
      hidedfpContainer(bid.adUnitCode);
      hideSASIframe(bid.adUnitCode);
      // push to render queue because ANOutstreamVideo may not be loaded yet
      bid.renderer.push(function () {
        var win = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.getWindowFromDocument)(doc) || window;
        win.ANOutstreamVideo.renderAd({
          tagId: bid.adResponse.tag_id,
          sizes: [bid.getSize().split('x')],
          targetId: bid.adUnitCode,
          // target div id to render video
          uuid: bid.adResponse.uuid,
          adResponse: bid.adResponse,
          rendererOptions: bid.renderer.getConfig()
        }, handleOutstreamRendererEvents.bind(null, bid));
      });
    }
    function handleOutstreamRendererEvents(bid, id, eventName) {
      bid.renderer.handleVideoEvent({
        id: id,
        eventName: eventName
      });
    }
    function parseMediaType(rtbBid) {
      var adType = rtbBid.ad_type;
      if (adType === _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.VIDEO) {
        return _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.VIDEO;
      } else if (adType === _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.NATIVE) {
        return _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.NATIVE;
      } else {
        return _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.BANNER;
      }
    }
    function getBidFloor(bid) {
      if (!(0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isFn)(bid.getFloor)) {
        return bid.params.reserve ? bid.params.reserve : null;
      }
      var floor = bid.getFloor({
        currency: 'USD',
        mediaType: '*',
        size: '*'
      });
      if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isPlainObject)(floor) && !isNaN(floor.floor) && floor.currency === 'USD') {
        return floor.floor;
      }
      return null;
    }
    
    // keywords: { 'genre': ['rock', 'pop'], 'pets': ['dog'] } goes to 'genre=rock,genre=pop,pets=dog'
    function convertKeywordsToString(keywords) {
      var result = '';
      Object.keys(keywords).forEach(function (key) {
        // if 'text' or ''
        if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isStr)(keywords[key])) {
          if (keywords[key] !== '') {
            result += "".concat(key, "=").concat(keywords[key], ",");
          } else {
            result += "".concat(key, ",");
          }
        } else if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(keywords[key])) {
          if (keywords[key][0] === '') {
            result += "".concat(key, ",");
          } else {
            keywords[key].forEach(function (val) {
              result += "".concat(key, "=").concat(val, ",");
            });
          }
        }
      });
    
      // remove last trailing comma
      result = result.substring(0, result.length - 1);
      return result;
    }
    
    // converts a comma separated list of keywords into the standard keyword object format used in appnexus bid params
    // 'genre=rock,genre=pop,pets=dog,music' goes to { 'genre': ['rock', 'pop'], 'pets': ['dog'], 'music': [''] }
    function convertStringToKeywordsObj(keyStr) {
      var result = {};
      if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__.isStr)(keyStr) && keyStr !== '') {
        // will split based on commas and will eat white space before/after the comma
        var keywordList = keyStr.split(/\s*(?:,)\s*/);
        keywordList.forEach(function (kw) {
          // if = exists, then split
          if (kw.indexOf('=') !== -1) {
            var kwPair = kw.split('=');
            var key = kwPair[0];
            var val = kwPair[1];
    
            // then check for existing key in result > if so add value to the array > if not, add new key and create value array
            if (result.hasOwnProperty(key)) {
              result[key].push(val);
            } else {
              result[key] = [val];
            }
          } else {
            // make a key with '' value; if key already exists > don't add
            if (!result.hasOwnProperty(kw)) {
              result[kw] = [''];
            }
          }
        });
      }
      return result;
    }
    (0,_src_adapters_bidderFactory_js__WEBPACK_IMPORTED_MODULE_11__.registerBidder)(spec);
    window.owpbjs.installedModules.push('appnexusBidAdapter');
    
    /***/ }),
    
    /***/ "./src/utils/gpdr.js":
    /*!***************************!*\
      !*** ./src/utils/gpdr.js ***!
      \***************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "hasPurpose1Consent": function() { return /* binding */ hasPurpose1Consent; }
    /* harmony export */ });
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./src/utils.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.js */ "./node_modules/dlv/index.js");
    
    
    /**
     * Check if GDPR purpose 1 consent was given.
     *
     * @param gdprConsent GDPR consent data
     * @returns {boolean} true if the gdprConsent is null-y; or GDPR does not apply; or if purpose 1 consent was given.
     */
    function hasPurpose1Consent(gdprConsent) {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.logWarn)("Privacy - checking purpose1Consent - ".concat(gdprConsent));
      if (gdprConsent === null) {
        // logWarn(`Privacy - gdprConsent is null, checking value of defaultGdprScope = ${owpbjs?.getConfig().consentManagement?.gdpr?.defaultGdprScope}`);
        return true; //! (owpbjs?.getConfig().consentManagement?.gdpr?.defaultGdprScope === true)
      }
    
      if (gdprConsent !== null && gdprConsent !== void 0 && gdprConsent.gdprApplies) {
        // logWarn(`Privacy - gdprConsent?.gdprApplies = ${gdprConsent?.gdprApplies} and purpose consent = ${gdprConsent.vendorData.purpose.consents}`);
        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"])(gdprConsent, 'vendorData.purpose.consents.1') === true;
      }
      return true;
    }
    
    /***/ })
    
    },
    /******/ function(__webpack_require__) { // webpackRuntimeModules
    /******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
    /******/ __webpack_require__.O(0, ["fpd"], function() { return __webpack_exec__("./modules/appnexusBidAdapter.js"); });
    /******/ var __webpack_exports__ = __webpack_require__.O();
    /******/ }
    ]);
    
    "use strict";
    (self["owpbjsChunk"] = self["owpbjsChunk"] || []).push([["auctionUserDetails"],{
    
    /***/ "./modules/auctionUserDetails/index.js":
    /*!*********************************************!*\
      !*** ./modules/auctionUserDetails/index.js ***!
      \*********************************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    /* unused harmony exports clearStorage, getBrowser, getUserAgentDetails, auctionBidWonHandler, auctionBidResponseHandler, auctionEndHandler, impressionViewableHandler, auctionInitHandler, init */
    /* harmony import */ var _src_events_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/events.js */ "./src/events.js");
    /* harmony import */ var _src_constants_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../src/constants.json */ "./src/constants.json");
    
    
    var HOSTNAME = window.location.host;
    var PREFIX = 'PROFILE_AUCTION_INFO_';
    var GPT_IMPRESSION_VIEWABLE_EVENT = 'impressionViewable';
    var storedObject = {};
    var storedDate;
    var frequencyDepth = {
      pageView: 0,
      slotCnt: 0,
      bidServed: 0,
      impressionServed: 0,
      slotLevelFrquencyDepth: {},
      viewedSlot: {},
      timestamp: {
        date: new Date().getDate()
      },
      userAgentDetails: getUserAgentDetails(),
      lip: []
    };
    var codeAdUnitMap = {};
    function clearStorage(storedDate) {
      var currentDate = new Date().getDate();
      if (storedDate !== currentDate) {
        localStorage.removeItem(PREFIX + HOSTNAME);
        return true;
      }
      return false;
    }
    function getBrowser(ua) {
      var browserName = '';
      if (ua.match(/chrome|chromium|crios/i)) browserName = 'chrome';else if (ua.match(/firefox|fxios/i)) browserName = 'firefox';else if (ua.match(/safari/i)) browserName = 'safari';else if (ua.match(/opr\//i)) browserName = 'opera';else if (ua.match(/edg/i)) browserName = 'edge';
      return browserName;
    }
    function getUserAgentDetails() {
      if (navigator.userAgentData) {
        var _navigator$userAgentD = navigator.userAgentData,
          brands = _navigator$userAgentD.brands,
          mobile = _navigator$userAgentD.mobile,
          platform = _navigator$userAgentD.platform;
        return {
          browser: brands && brands[0] && brands[0].brand,
          isMobile: mobile,
          platform: platform
        };
      } else {
        var ua = navigator.userAgent;
        return {
          isMobile: !!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(ua),
          platform: ua.platform,
          browser: getBrowser(ua)
        };
      }
    }
    function auctionBidWonHandler(bid) {
      if (frequencyDepth) {
        frequencyDepth = JSON.parse(localStorage.getItem(PREFIX + HOSTNAME));
        frequencyDepth.impressionServed = frequencyDepth.impressionServed + 1;
        frequencyDepth.slotLevelFrquencyDepth[codeAdUnitMap[bid.adUnitCode]].impressionServed = frequencyDepth.slotLevelFrquencyDepth[codeAdUnitMap[bid.adUnitCode]].impressionServed + 1;
        localStorage.setItem(PREFIX + HOSTNAME, JSON.stringify(frequencyDepth));
      }
      return frequencyDepth;
    }
    function auctionBidResponseHandler(bid) {
      if (frequencyDepth) {
        if (bid.cpm > 0) {
          frequencyDepth.slotLevelFrquencyDepth[codeAdUnitMap[bid.adUnitCode]].bidServed = frequencyDepth.slotLevelFrquencyDepth[codeAdUnitMap[bid.adUnitCode]].bidServed + 1;
          frequencyDepth.bidServed = frequencyDepth.bidServed + 1;
        }
      }
      return frequencyDepth;
    }
    function auctionEndHandler() {
      if (frequencyDepth) {
        var _window$owpbjs$adUnit, _window$owpbjs$adUnit2;
        frequencyDepth.lip = ((_window$owpbjs$adUnit = window.owpbjs.adUnits[0]) === null || _window$owpbjs$adUnit === void 0 ? void 0 : (_window$owpbjs$adUnit2 = _window$owpbjs$adUnit.bids[0]) === null || _window$owpbjs$adUnit2 === void 0 ? void 0 : _window$owpbjs$adUnit2.userId) && Object.keys(window.owpbjs.adUnits[0].bids[0].userId);
        localStorage.setItem(PREFIX + HOSTNAME, JSON.stringify(frequencyDepth));
      }
      return frequencyDepth;
    }
    function checkViewabilityExpiry() {
      var viewablityStartDate = new Date(JSON.parse(storedObject).viewedSlot.timestamp);
      var currentDate = new Date(new Date().toJSON().slice(0, 10));
      var days = Math.ceil(Math.abs(currentDate - viewablityStartDate) / (1000 * 60 * 60 * 24));
      if (days <= 10) {
        return false;
      }
      return true;
    }
    function impressionViewableHandler(slot) {
      frequencyDepth = JSON.parse(localStorage.getItem(PREFIX + HOSTNAME));
      frequencyDepth.viewedSlot.timestamp = frequencyDepth.viewedSlot.timestamp ? frequencyDepth.viewedSlot.timestamp : new Date().toJSON().slice(0, 10);
      frequencyDepth.viewedSlot[frequencyDepth.codeAdUnitMap[slot.getSlotId().getDomId()]] = (frequencyDepth.viewedSlot[frequencyDepth.codeAdUnitMap[slot.getSlotId().getDomId()]] || 0) + 1;
      localStorage.setItem(PREFIX + HOSTNAME, JSON.stringify(frequencyDepth));
    }
    ;
    function auctionInitHandler() {
      if (frequencyDepth) {
        storedObject = localStorage.getItem(PREFIX + HOSTNAME);
        var slotCount = window.owpbjs.adUnits.length + (storedObject == null ? frequencyDepth.slotCnt : 0);
        if (storedObject !== null) {
          storedDate = JSON.parse(storedObject).timestamp.date;
          var isStorageCleared = clearStorage(storedDate);
          if (isStorageCleared) {
            frequencyDepth.viewedSlot = checkViewabilityExpiry() ? {} : JSON.parse(storedObject).viewedSlot;
          }
          frequencyDepth = isStorageCleared ? frequencyDepth : JSON.parse(storedObject);
          frequencyDepth.pageView = frequencyDepth.pageView + 1;
          frequencyDepth.slotCnt = frequencyDepth.slotCnt + slotCount;
        } else {
          frequencyDepth.pageView = 1;
          frequencyDepth.slotCnt = slotCount;
        }
        window.owpbjs.adUnits.forEach(function (adUnit) {
          var _frequencyDepth$slotL, _frequencyDepth$slotL2, _frequencyDepth$slotL3;
          frequencyDepth.slotLevelFrquencyDepth[adUnit.adUnitId] = {
            slotCnt: (((_frequencyDepth$slotL = frequencyDepth.slotLevelFrquencyDepth[adUnit.adUnitId]) === null || _frequencyDepth$slotL === void 0 ? void 0 : _frequencyDepth$slotL.slotCnt) || 0) + 1,
            bidServed: (((_frequencyDepth$slotL2 = frequencyDepth.slotLevelFrquencyDepth[adUnit.adUnitId]) === null || _frequencyDepth$slotL2 === void 0 ? void 0 : _frequencyDepth$slotL2.bidServed) || 0) + 0,
            impressionServed: (((_frequencyDepth$slotL3 = frequencyDepth.slotLevelFrquencyDepth[adUnit.adUnitId]) === null || _frequencyDepth$slotL3 === void 0 ? void 0 : _frequencyDepth$slotL3.impressionServed) || 0) + 0
          };
          codeAdUnitMap[adUnit.code] = adUnit.adUnitId;
        });
        frequencyDepth.codeAdUnitMap = codeAdUnitMap;
      }
      return frequencyDepth;
    }
    var init = function init() {
      window.googletag = window.googletag || {};
      window.googletag.cmd = window.googletag.cmd || [];
      window.googletag.cmd.push(function () {
        window.googletag.pubads().addEventListener(GPT_IMPRESSION_VIEWABLE_EVENT, function (event) {
          impressionViewableHandler(event.slot);
        });
      });
      _src_events_js__WEBPACK_IMPORTED_MODULE_0__.on(_src_constants_json__WEBPACK_IMPORTED_MODULE_1__.EVENTS.AUCTION_INIT, function () {
        frequencyDepth = auctionInitHandler();
      });
      _src_events_js__WEBPACK_IMPORTED_MODULE_0__.on(_src_constants_json__WEBPACK_IMPORTED_MODULE_1__.EVENTS.AUCTION_END, function () {
        frequencyDepth = auctionEndHandler();
      });
      _src_events_js__WEBPACK_IMPORTED_MODULE_0__.on(_src_constants_json__WEBPACK_IMPORTED_MODULE_1__.EVENTS.BID_RESPONSE, function (bid) {
        frequencyDepth = auctionBidResponseHandler(bid);
      });
      _src_events_js__WEBPACK_IMPORTED_MODULE_0__.on(_src_constants_json__WEBPACK_IMPORTED_MODULE_1__.EVENTS.BID_WON, function (bid) {
        frequencyDepth = auctionBidWonHandler(bid);
      });
    };
    init();
    window.owpbjs.installedModules.push('auctionUserDetails');
    
    /***/ })
    
    },
    /******/ function(__webpack_require__) { // webpackRuntimeModules
    /******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
    /******/ __webpack_require__.O(0, ["fpd"], function() { return __webpack_exec__("./modules/auctionUserDetails/index.js"); });
    /******/ var __webpack_exports__ = __webpack_require__.O();
    /******/ }
    ]);
    
    "use strict";
    (self["owpbjsChunk"] = self["owpbjsChunk"] || []).push([["dfpAdServerVideo"],{
    
    /***/ "./modules/dfpAdServerVideo.js":
    /*!*************************************!*\
      !*** ./modules/dfpAdServerVideo.js ***!
      \*************************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    /* unused harmony exports adpodUtils, buildDfpVideoUrl, notifyTranslationModule, buildAdpodVideoUrl */
    /* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
    /* harmony import */ var _src_adServerManager_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../src/adServerManager.js */ "./src/adServerManager.js");
    /* harmony import */ var _src_targeting_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../src/targeting.js */ "./src/targeting.js");
    /* harmony import */ var _src_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../src/utils.js */ "./src/utils.js");
    /* harmony import */ var _src_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../src/utils.js */ "./node_modules/dlv/index.js");
    /* harmony import */ var _src_config_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../src/config.js */ "./src/config.js");
    /* harmony import */ var _src_hook_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../src/hook.js */ "./src/hook.js");
    /* harmony import */ var _src_auctionManager_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../src/auctionManager.js */ "./src/auctionManager.js");
    /* harmony import */ var _src_adapterManager_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../src/adapterManager.js */ "./src/adapterManager.js");
    /* harmony import */ var _src_events_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../src/events.js */ "./src/events.js");
    /* harmony import */ var _src_constants_json__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../src/constants.json */ "./src/constants.json");
    /* harmony import */ var _src_adserver_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../src/adserver.js */ "./src/adserver.js");
    
    /**
     * This module adds [DFP support]{@link https://www.doubleclickbygoogle.com/} for Video to Prebid.
     */
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     * @typedef {Object} DfpVideoParams
     *
     * This object contains the params needed to form a URL which hits the
     * [DFP API]{@link https://support.google.com/dfp_premium/answer/1068325?hl=en}.
     *
     * All params (except iu, mentioned below) should be considered optional. This module will choose reasonable
     * defaults for all of the other required params.
     *
     * The cust_params property, if present, must be an object. It will be merged with the rest of the
     * standard Prebid targeting params (hb_adid, hb_bidder, etc).
     *
     * @param {string} iu This param *must* be included, in order for us to create a valid request.
     * @param [string] description_url This field is required if you want Ad Exchange to bid on our ad unit...
     *   but otherwise optional
     */
    
    /**
     * @typedef {Object} DfpVideoOptions
     *
     * @param {Object} adUnit The adUnit which this bid is supposed to help fill.
     * @param [Object] bid The bid which should be considered alongside the rest of the adserver's demand.
     *   If this isn't defined, then we'll use the winning bid for the adUnit.
     *
     * @param {DfpVideoParams} [params] Query params which should be set on the DFP request.
     *   These will override this module's defaults whenever they conflict.
     * @param {string} [url] video adserver url
     */
    
    /** Safe defaults which work on pretty much all video calls. */
    var defaultParamConstants = {
      env: 'vp',
      gdfp_req: 1,
      output: 'vast',
      unviewed_position_start: 1
    };
    var adpodUtils = {};
    
    /**
     * Merge all the bid data and publisher-supplied options into a single URL, and then return it.
     *
     * @see [The DFP API]{@link https://support.google.com/dfp_premium/answer/1068325?hl=en#env} for details.
     *
     * @param {DfpVideoOptions} options Options which should be used to construct the URL.
     *
     * @return {string} A URL which calls DFP, letting options.bid
     *   (or the auction's winning bid for this adUnit, if undefined) compete alongside the rest of the
     *   demand in DFP.
     */
    function buildDfpVideoUrl(options) {
      if (!options.params && !options.url) {
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_0__.logError)("A params object or a url is required to use owpbjs.adServers.dfp.buildVideoUrl");
        return;
      }
      var adUnit = options.adUnit;
      var bid = options.bid || _src_targeting_js__WEBPACK_IMPORTED_MODULE_1__.targeting.getWinningBids(adUnit.code)[0];
      var urlComponents = {};
      if (options.url) {
        // when both `url` and `params` are given, parsed url will be overwriten
        // with any matching param components
        urlComponents = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_0__.parseUrl)(options.url, {
          noDecodeWholeURL: true
        });
        if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_0__.isEmpty)(options.params)) {
          return buildUrlFromAdserverUrlComponents(urlComponents, bid, options);
        }
      }
      var derivedParams = {
        correlator: Date.now(),
        sz: (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_0__.parseSizesInput)((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"])(adUnit, 'mediaTypes.video.playerSize')).join('|'),
        url: encodeURIComponent(location.href)
      };
      var urlSearchComponent = urlComponents.search;
      var urlSzParam = urlSearchComponent && urlSearchComponent.sz;
      if (urlSzParam) {
        derivedParams.sz = urlSzParam + '|' + derivedParams.sz;
      }
      var encodedCustomParams = getCustParams(bid, options, urlSearchComponent && urlSearchComponent.cust_params);
      var queryParams = Object.assign({}, defaultParamConstants, urlComponents.search, derivedParams, options.params, {
        cust_params: encodedCustomParams
      });
      var descriptionUrl = getDescriptionUrl(bid, options, 'params');
      if (descriptionUrl) {
        queryParams.description_url = descriptionUrl;
      }
      var gdprConsent = _src_adapterManager_js__WEBPACK_IMPORTED_MODULE_3__.gdprDataHandler.getConsentData();
      if (gdprConsent) {
        if (typeof gdprConsent.gdprApplies === 'boolean') {
          queryParams.gdpr = Number(gdprConsent.gdprApplies);
        }
        if (gdprConsent.consentString) {
          queryParams.gdpr_consent = gdprConsent.consentString;
        }
        if (gdprConsent.addtlConsent) {
          queryParams.addtl_consent = gdprConsent.addtlConsent;
        }
      }
      var uspConsent = _src_adapterManager_js__WEBPACK_IMPORTED_MODULE_3__.uspDataHandler.getConsentData();
      if (uspConsent) {
        queryParams.us_privacy = uspConsent;
      }
      var gppConsent = _src_adapterManager_js__WEBPACK_IMPORTED_MODULE_3__.gppDataHandler.getConsentData();
      if (gppConsent) {
        // TODO - need to know what to set here for queryParams...
      }
      if (!queryParams.ppid) {
        var ppid = (0,_src_adserver_js__WEBPACK_IMPORTED_MODULE_4__.getPPID)();
        if (ppid != null) {
          queryParams.ppid = ppid;
        }
      }
      return (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_0__.buildUrl)(Object.assign({
        protocol: 'https',
        host: 'securepubads.g.doubleclick.net',
        pathname: '/gampad/ads'
      }, urlComponents, {
        search: queryParams
      }));
    }
    function notifyTranslationModule(fn) {
      fn.call(this, 'dfp');
    }
    if (_src_config_js__WEBPACK_IMPORTED_MODULE_5__.config.getConfig('brandCategoryTranslation.translationFile')) {
      (0,_src_hook_js__WEBPACK_IMPORTED_MODULE_6__.getHook)('registerAdserver').before(notifyTranslationModule);
    }
    
    /**
     * @typedef {Object} DfpAdpodOptions
     *
     * @param {string} code Ad Unit code
     * @param {Object} params Query params which should be set on the DFP request.
     * These will override this module's defaults whenever they conflict.
     * @param {function} callback Callback function to execute when master tag is ready
     */
    
    /**
     * Creates master tag url for long-form
     * @param {DfpAdpodOptions} options
     * @returns {string} A URL which calls DFP with custom adpod targeting key values to compete with rest of the demand in DFP
     */
    function buildAdpodVideoUrl() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        code = _ref.code,
        params = _ref.params,
        callback = _ref.callback;
      if (!params || !callback) {
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_0__.logError)("A params object and a callback is required to use pbjs.adServers.dfp.buildAdpodVideoUrl");
        return;
      }
      var derivedParams = {
        correlator: Date.now(),
        sz: getSizeForAdUnit(code),
        url: encodeURIComponent(location.href)
      };
      function getSizeForAdUnit(code) {
        var adUnit = _src_auctionManager_js__WEBPACK_IMPORTED_MODULE_7__.auctionManager.getAdUnits().filter(function (adUnit) {
          return adUnit.code === code;
        });
        var sizes = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"])(adUnit[0], 'mediaTypes.video.playerSize');
        return (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_0__.parseSizesInput)(sizes).join('|');
      }
      adpodUtils.getTargeting({
        'codes': [code],
        'callback': createMasterTag
      });
      function createMasterTag(err, targeting) {
        var _initialValue;
        if (err) {
          callback(err, null);
          return;
        }
        var initialValue = (_initialValue = {}, (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8__["default"])(_initialValue, adpodUtils.TARGETING_KEY_PB_CAT_DUR, undefined), (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8__["default"])(_initialValue, adpodUtils.TARGETING_KEY_CACHE_ID, undefined), _initialValue);
        var customParams = {};
        if (targeting[code]) {
          customParams = targeting[code].reduce(function (acc, curValue) {
            if (Object.keys(curValue)[0] === adpodUtils.TARGETING_KEY_PB_CAT_DUR) {
              acc[adpodUtils.TARGETING_KEY_PB_CAT_DUR] = typeof acc[adpodUtils.TARGETING_KEY_PB_CAT_DUR] !== 'undefined' ? acc[adpodUtils.TARGETING_KEY_PB_CAT_DUR] + ',' + curValue[adpodUtils.TARGETING_KEY_PB_CAT_DUR] : curValue[adpodUtils.TARGETING_KEY_PB_CAT_DUR];
            } else if (Object.keys(curValue)[0] === adpodUtils.TARGETING_KEY_CACHE_ID) {
              acc[adpodUtils.TARGETING_KEY_CACHE_ID] = curValue[adpodUtils.TARGETING_KEY_CACHE_ID];
            }
            return acc;
          }, initialValue);
        }
        var encodedCustomParams = encodeURIComponent((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_0__.formatQS)(customParams));
        var queryParams = Object.assign({}, defaultParamConstants, derivedParams, params, {
          cust_params: encodedCustomParams
        });
        var gdprConsent = _src_adapterManager_js__WEBPACK_IMPORTED_MODULE_3__.gdprDataHandler.getConsentData();
        if (gdprConsent) {
          if (typeof gdprConsent.gdprApplies === 'boolean') {
            queryParams.gdpr = Number(gdprConsent.gdprApplies);
          }
          if (gdprConsent.consentString) {
            queryParams.gdpr_consent = gdprConsent.consentString;
          }
          if (gdprConsent.addtlConsent) {
            queryParams.addtl_consent = gdprConsent.addtlConsent;
          }
        }
        var uspConsent = _src_adapterManager_js__WEBPACK_IMPORTED_MODULE_3__.uspDataHandler.getConsentData();
        if (uspConsent) {
          queryParams.us_privacy = uspConsent;
        }
        var masterTag = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_0__.buildUrl)({
          protocol: 'https',
          host: 'securepubads.g.doubleclick.net',
          pathname: '/gampad/ads',
          search: queryParams
        });
        callback(null, masterTag);
      }
    }
    
    /**
     * Builds a video url from a base dfp video url and a winning bid, appending
     * Prebid-specific key-values.
     * @param {Object} components base video adserver url parsed into components object
     * @param {AdapterBidResponse} bid winning bid object to append parameters from
     * @param {Object} options Options which should be used to construct the URL (used for custom params).
     * @return {string} video url
     */
    function buildUrlFromAdserverUrlComponents(components, bid, options) {
      var descriptionUrl = getDescriptionUrl(bid, components, 'search');
      if (descriptionUrl) {
        components.search.description_url = descriptionUrl;
      }
      components.search.cust_params = getCustParams(bid, options, components.search.cust_params);
      return (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_0__.buildUrl)(components);
    }
    
    /**
     * Returns the encoded vast url if it exists on a bid object, only if prebid-cache
     * is disabled, and description_url is not already set on a given input
     * @param {AdapterBidResponse} bid object to check for vast url
     * @param {Object} components the object to check that description_url is NOT set on
     * @param {string} prop the property of components that would contain description_url
     * @return {string | undefined} The encoded vast url if it exists, or undefined
     */
    function getDescriptionUrl(bid, components, prop) {
      if (_src_config_js__WEBPACK_IMPORTED_MODULE_5__.config.getConfig('cache.url')) {
        return;
      }
      if (!(0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"])(components, "".concat(prop, ".description_url"))) {
        var vastUrl = bid && bid.vastUrl;
        if (vastUrl) {
          return encodeURIComponent(vastUrl);
        }
      } else {
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_0__.logError)("input cannnot contain description_url");
      }
    }
    
    /**
     * Returns the encoded `cust_params` from the bid.adserverTargeting and adds the `hb_uuid`, and `hb_cache_id`. Optionally the options.params.cust_params
     * @param {AdapterBidResponse} bid
     * @param {Object} options this is the options passed in from the `buildDfpVideoUrl` function
     * @return {Object} Encoded key value pairs for cust_params
     */
    function getCustParams(bid, options, urlCustParams) {
      var adserverTargeting = bid && bid.adserverTargeting || {};
      var allTargetingData = {};
      var adUnit = options && options.adUnit;
      if (adUnit) {
        var allTargeting = _src_targeting_js__WEBPACK_IMPORTED_MODULE_1__.targeting.getAllTargeting(adUnit.code);
        allTargetingData = allTargeting ? allTargeting[adUnit.code] : {};
      }
      var prebidTargetingSet = Object.assign({},
      // Why are we adding standard keys here ? Refer https://github.com/prebid/Prebid.js/issues/3664
      {
        hb_uuid: bid && bid.videoCacheKey
      },
      // hb_cache_id became optional in prebid 5.0 after 4.x enabled the concept of optional keys. Discussion led to reversing the prior expectation of deprecating hb_uuid
      {
        hb_cache_id: bid && bid.videoCacheKey
      }, allTargetingData, adserverTargeting);
      _src_events_js__WEBPACK_IMPORTED_MODULE_9__.emit(_src_constants_json__WEBPACK_IMPORTED_MODULE_10__.EVENTS.SET_TARGETING, (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8__["default"])({}, adUnit.code, prebidTargetingSet));
    
      // merge the prebid + publisher targeting sets
      var publisherTargetingSet = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"])(options, 'params.cust_params');
      // TODO : Remove below function and change the constant value in file to update the key names for video
      // Changing few key name might have impact on banner as well as we ignore few key names , hence using below function
      // to get the cust_params that should be attached to dfp.
      // It will also handle the send allBids cases
      var customParams = {};
      if (window.PWT && window.PWT.getCustomParamsForDFPVideo) {
        customParams = window.PWT.getCustomParamsForDFPVideo(publisherTargetingSet, bid);
      }
      // Changing PrebidTargetingSet to adServerTargeitn as for OpenWrap we don't want to set Prebid Keys and instead Set the adServerKeys sent from OpenWrap.
      var targetingSet = Object.assign({}, adserverTargeting, publisherTargetingSet, customParams);
      return encodeURIComponent((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_0__.formatQS)(targetingSet));
    }
    (0,_src_adServerManager_js__WEBPACK_IMPORTED_MODULE_11__.registerVideoSupport)('dfp', {
      buildVideoUrl: buildDfpVideoUrl,
      buildAdpodVideoUrl: buildAdpodVideoUrl,
      getAdpodTargeting: function getAdpodTargeting(args) {
        return adpodUtils.getTargeting(args);
      }
    });
    (0,_src_hook_js__WEBPACK_IMPORTED_MODULE_6__.submodule)('adpod', adpodUtils);
    window.owpbjs.installedModules.push('dfpAdServerVideo');
    
    /***/ }),
    
    /***/ "./src/adServerManager.js":
    /*!********************************!*\
      !*** ./src/adServerManager.js ***!
      \********************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "registerVideoSupport": function() { return /* binding */ registerVideoSupport; }
    /* harmony export */ });
    /* harmony import */ var _prebidGlobal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./prebidGlobal.js */ "./src/prebidGlobal.js");
    /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
    
    
    var prebid = (0,_prebidGlobal_js__WEBPACK_IMPORTED_MODULE_0__.getGlobal)();
    
    /**
     * This file defines the plugin points in prebid-core for AdServer-specific functionality.
     *
     * Its main job is to expose functions for AdServer modules to append functionality to the Prebid public API.
     * For a given Ad Server with name "adServerName", these functions will only change the API in the
     * $$PREBID_GLOBAL$$.adServers[adServerName] namespace.
     */
    
    /**
     * @typedef {Object} CachedVideoBid
     *
     * @property {string} videoCacheId The ID which can be used to retrieve this video from prebid-server.
     *   This is the same ID given to the callback in the videoCache's store function.
     */
    
    /**
     * @function VideoAdUrlBuilder
     *
     * @param {CachedVideoBid} bid The winning Bid which the ad server should show, assuming it beats out
     *   the competition.
     *
     * @param {Object} options Options required by the Ad Server to make a valid AdServer URL.
     *   This object will have different properties depending on the specific ad server supported.
     *   For more information, see the docs inside the ad server module you're supporting.
     *
     * @return {string} A URL which can be passed into the Video player to play an ad.
     */
    
    /**
     * @typedef {Object} VideoSupport
     *
     * @function {VideoAdUrlBuilder} buildVideoAdUrl
     */
    
    /**
     * Enable video support for the Ad Server.
     *
     * @property {string} name The identifying name for this adserver.
     * @property {VideoSupport} videoSupport An object with the functions needed to support video in Prebid.
     */
    function registerVideoSupport(name, videoSupport) {
      prebid.adServers = prebid.adServers || {};
      prebid.adServers[name] = prebid.adServers[name] || {};
      Object.keys(videoSupport).forEach(function (key) {
        if (prebid.adServers[name][key]) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)("Attempting to add an already registered function property ".concat(key, " for AdServer ").concat(name, "."));
          return;
        }
        prebid.adServers[name][key] = videoSupport[key];
      });
    }
    
    /***/ }),
    
    /***/ "./src/adserver.js":
    /*!*************************!*\
      !*** ./src/adserver.js ***!
      \*************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "getPPID": function() { return /* binding */ getPPID; }
    /* harmony export */ });
    /* harmony import */ var _hook_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hook.js */ "./src/hook.js");
    
    
    /**
     * return the GAM PPID, if available (eid for the userID configured with `userSync.ppidSource`)
     */
    var getPPID = (0,_hook_js__WEBPACK_IMPORTED_MODULE_0__.hook)('sync', function () {
      return undefined;
    });
    
    /***/ })
    
    },
    /******/ function(__webpack_require__) { // webpackRuntimeModules
    /******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
    /******/ __webpack_require__.O(0, ["fpd"], function() { return __webpack_exec__("./modules/dfpAdServerVideo.js"); });
    /******/ var __webpack_exports__ = __webpack_require__.O();
    /******/ }
    ]);
    
    (self["owpbjsChunk"] = self["owpbjsChunk"] || []).push([["enrichmentFpdModule"],{
    
    /***/ "./modules/enrichmentFpdModule.js":
    /*!****************************************!*\
      !*** ./modules/enrichmentFpdModule.js ***!
      \****************************************/
    /***/ (function() {
    
    // Logic from this module was moved into core since approx. 7.27
    // TODO: remove this in v8
    window.owpbjs.installedModules.push('enrichmentFpdModule');
    
    /***/ })
    
    },
    /******/ function(__webpack_require__) { // webpackRuntimeModules
    /******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
    /******/ __webpack_require__.O(0, ["fpd"], function() { return __webpack_exec__("./modules/enrichmentFpdModule.js"); });
    /******/ var __webpack_exports__ = __webpack_require__.O();
    /******/ }
    ]);
    
    "use strict";
    (self["owpbjsChunk"] = self["owpbjsChunk"] || []).push([["gptPreAuction"],{
    
    /***/ "./modules/gptPreAuction.js":
    /*!**********************************!*\
      !*** ./modules/gptPreAuction.js ***!
      \**********************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    /* unused harmony exports _currentConfig, appendGptSlots, appendPbAdSlot, makeBidRequestsHook */
    /* harmony import */ var _src_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../src/utils.js */ "./src/utils.js");
    /* harmony import */ var _src_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../src/utils.js */ "./node_modules/dlv/index.js");
    /* harmony import */ var _src_config_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../src/config.js */ "./src/config.js");
    /* harmony import */ var _src_hook_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../src/hook.js */ "./src/hook.js");
    /* harmony import */ var _src_polyfill_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../src/polyfill.js */ "./src/polyfill.js");
    var _this = undefined;
    
    
    
    
    var MODULE_NAME = 'GPT Pre-Auction';
    var _currentConfig = {};
    var hooksAdded = false;
    var appendGptSlots = function appendGptSlots(adUnits) {
      var _currentConfig2 = _currentConfig,
        customGptSlotMatching = _currentConfig2.customGptSlotMatching;
      if (!(0,_src_utils_js__WEBPACK_IMPORTED_MODULE_0__.isGptPubadsDefined)()) {
        return;
      }
      var adUnitMap = adUnits.reduce(function (acc, adUnit) {
        acc[adUnit.code] = adUnit;
        return acc;
      }, {});
      window.googletag.pubads().getSlots().forEach(function (slot) {
        var matchingAdUnitCode = (0,_src_polyfill_js__WEBPACK_IMPORTED_MODULE_1__.find)(Object.keys(adUnitMap), customGptSlotMatching ? customGptSlotMatching(slot) : (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_0__.isAdUnitCodeMatchingSlot)(slot));
        if (matchingAdUnitCode) {
          var adUnit = adUnitMap[matchingAdUnitCode];
          adUnit.ortb2Imp = adUnit.ortb2Imp || {};
          adUnit.ortb2Imp.ext = adUnit.ortb2Imp.ext || {};
          adUnit.ortb2Imp.ext.data = adUnit.ortb2Imp.ext.data || {};
          var context = adUnit.ortb2Imp.ext.data;
          context.adserver = context.adserver || {};
          context.adserver.name = 'gam';
          context.adserver.adslot = sanitizeSlotPath(slot.getAdUnitPath());
        }
      });
    };
    var sanitizeSlotPath = function sanitizeSlotPath(path) {
      var gptConfig = _src_config_js__WEBPACK_IMPORTED_MODULE_2__.config.getConfig('gptPreAuction') || {};
      if (gptConfig.mcmEnabled) {
        return path.replace(/(^\/\d*),\d*\//, '$1/');
      }
      return path;
    };
    var defaultPreAuction = function defaultPreAuction(adUnit, adServerAdSlot) {
      var context = adUnit.ortb2Imp.ext.data;
    
      // use pbadslot if supplied
      if (context.pbadslot) {
        return context.pbadslot;
      }
    
      // confirm that GPT is set up
      if (!(0,_src_utils_js__WEBPACK_IMPORTED_MODULE_0__.isGptPubadsDefined)()) {
        return;
      }
    
      // find all GPT slots with this name
      var gptSlots = window.googletag.pubads().getSlots().filter(function (slot) {
        return slot.getAdUnitPath() === adServerAdSlot;
      });
      if (gptSlots.length === 0) {
        return; // should never happen
      }
    
      if (gptSlots.length === 1) {
        return adServerAdSlot;
      }
    
      // else the adunit code must be div id. append it.
      return "".concat(adServerAdSlot, "#").concat(adUnit.code);
    };
    var appendPbAdSlot = function appendPbAdSlot(adUnit) {
      var context = adUnit.ortb2Imp.ext.data;
      var _currentConfig3 = _currentConfig,
        customPbAdSlot = _currentConfig3.customPbAdSlot;
    
      // use context.pbAdSlot if set (if someone set it already, it will take precedence over others)
      if (context.pbadslot) {
        return;
      }
      if (customPbAdSlot) {
        context.pbadslot = customPbAdSlot(adUnit.code, (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"])(context, 'adserver.adslot'));
        return;
      }
    
      // use data attribute 'data-adslotid' if set
      try {
        var adUnitCodeDiv = document.getElementById(adUnit.code);
        if (adUnitCodeDiv.dataset.adslotid) {
          context.pbadslot = adUnitCodeDiv.dataset.adslotid;
          return;
        }
      } catch (e) {}
      // banner adUnit, use GPT adunit if defined
      if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"])(context, 'adserver.adslot')) {
        context.pbadslot = context.adserver.adslot;
        return;
      }
      context.pbadslot = adUnit.code;
      return true;
    };
    var makeBidRequestsHook = function makeBidRequestsHook(fn, adUnits) {
      appendGptSlots(adUnits);
      var _currentConfig4 = _currentConfig,
        useDefaultPreAuction = _currentConfig4.useDefaultPreAuction,
        customPreAuction = _currentConfig4.customPreAuction;
      adUnits.forEach(function (adUnit) {
        // init the ortb2Imp if not done yet
        adUnit.ortb2Imp = adUnit.ortb2Imp || {};
        adUnit.ortb2Imp.ext = adUnit.ortb2Imp.ext || {};
        adUnit.ortb2Imp.ext.data = adUnit.ortb2Imp.ext.data || {};
        var context = adUnit.ortb2Imp.ext;
    
        // if neither new confs set do old stuff
        if (!customPreAuction && !useDefaultPreAuction) {
          var usedAdUnitCode = appendPbAdSlot(adUnit);
          // gpid should be set to itself if already set, or to what pbadslot was (as long as it was not adUnit code)
          if (!context.gpid && !usedAdUnitCode) {
            context.gpid = context.data.pbadslot;
          }
        } else {
          var adserverSlot = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"])(context, 'data.adserver.adslot');
          var result;
          if (customPreAuction) {
            result = customPreAuction(adUnit, adserverSlot);
          } else if (useDefaultPreAuction) {
            result = defaultPreAuction(adUnit, adserverSlot);
          }
          if (result) {
            context.gpid = context.data.pbadslot = result;
          }
        }
      });
      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }
      return fn.call.apply(fn, [_this, adUnits].concat(args));
    };
    var handleSetGptConfig = function handleSetGptConfig(moduleConfig) {
      _currentConfig = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_0__.pick)(moduleConfig, ['enabled', function (enabled) {
        return enabled !== false;
      }, 'customGptSlotMatching', function (customGptSlotMatching) {
        return typeof customGptSlotMatching === 'function' && customGptSlotMatching;
      }, 'customPbAdSlot', function (customPbAdSlot) {
        return typeof customPbAdSlot === 'function' && customPbAdSlot;
      }, 'customPreAuction', function (customPreAuction) {
        return typeof customPreAuction === 'function' && customPreAuction;
      }, 'useDefaultPreAuction', function (useDefaultPreAuction) {
        return useDefaultPreAuction === true;
      }]);
      if (_currentConfig.enabled) {
        if (!hooksAdded) {
          (0,_src_hook_js__WEBPACK_IMPORTED_MODULE_4__.getHook)('makeBidRequests').before(makeBidRequestsHook);
          hooksAdded = true;
        }
      } else {
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_0__.logInfo)("".concat(MODULE_NAME, ": Turning off module"));
        _currentConfig = {};
        (0,_src_hook_js__WEBPACK_IMPORTED_MODULE_4__.getHook)('makeBidRequests').getHooks({
          hook: makeBidRequestsHook
        }).remove();
        hooksAdded = false;
      }
    };
    _src_config_js__WEBPACK_IMPORTED_MODULE_2__.config.getConfig('gptPreAuction', function (config) {
      return handleSetGptConfig(config.gptPreAuction);
    });
    handleSetGptConfig({});
    window.owpbjs.installedModules.push('gptPreAuction');
    
    /***/ })
    
    },
    /******/ function(__webpack_require__) { // webpackRuntimeModules
    /******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
    /******/ __webpack_require__.O(0, ["fpd"], function() { return __webpack_exec__("./modules/gptPreAuction.js"); });
    /******/ var __webpack_exports__ = __webpack_require__.O();
    /******/ }
    ]);
    
    "use strict";
    (self["owpbjsChunk"] = self["owpbjsChunk"] || []).push([["instreamTracking"],{
    
    /***/ "./modules/instreamTracking.js":
    /*!*************************************!*\
      !*** ./modules/instreamTracking.js ***!
      \*************************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    /* unused harmony export trackInstreamDeliveredImpressions */
    /* harmony import */ var _src_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../src/utils.js */ "./src/utils.js");
    /* harmony import */ var _src_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../src/utils.js */ "./node_modules/dlv/index.js");
    /* harmony import */ var _src_config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../src/config.js */ "./src/config.js");
    /* harmony import */ var _src_auctionManager_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../src/auctionManager.js */ "./src/auctionManager.js");
    /* harmony import */ var _src_video_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../src/video.js */ "./src/video.js");
    /* harmony import */ var _src_events_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../src/events.js */ "./src/events.js");
    /* harmony import */ var _src_constants_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../src/constants.json */ "./src/constants.json");
    function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
    function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
    function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
    
    
    
    
    
    
    var _CONSTANTS$TARGETING_ = _src_constants_json__WEBPACK_IMPORTED_MODULE_0__.TARGETING_KEYS,
      CACHE_ID = _CONSTANTS$TARGETING_.CACHE_ID,
      UUID = _CONSTANTS$TARGETING_.UUID;
    var _CONSTANTS$EVENTS = _src_constants_json__WEBPACK_IMPORTED_MODULE_0__.EVENTS,
      BID_WON = _CONSTANTS$EVENTS.BID_WON,
      AUCTION_END = _CONSTANTS$EVENTS.AUCTION_END;
    var RENDERED = _src_constants_json__WEBPACK_IMPORTED_MODULE_0__.BID_STATUS.RENDERED;
    var INSTREAM_TRACKING_DEFAULT_CONFIG = {
      enabled: false,
      maxWindow: 1000 * 60,
      // the time in ms after which polling for instream delivery stops
      pollingFreq: 500 // the frequency of polling
    };
    
    // Set instreamTracking default values
    _src_config_js__WEBPACK_IMPORTED_MODULE_1__.config.setDefaults({
      'instreamTracking': (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.deepClone)(INSTREAM_TRACKING_DEFAULT_CONFIG)
    });
    var whitelistedResources = /video|fetch|xmlhttprequest|other/;
    
    /**
     * Here the idea is
     * find all network entries via performance.getEntriesByType()
     * filter it by video cache key in the url
     * and exclude the ad server urls so that we dont match twice
     * eg:
     * dfp ads call: https://securepubads.g.doubleclick.net/gampad/ads?...hb_cache_id%3D55e85cd3-6ea4-4469-b890-84241816b131%26...
     * prebid cache url: https://prebid.adnxs.com/pbc/v1/cache?uuid=55e85cd3-6ea4-4469-b890-84241816b131
     *
     * if the entry exists, emit the BID_WON
     *
     * Note: this is a workaround till a better approach is engineered.
     *
     * @param {Array<AdUnit>} adUnits
     * @param {Array<Bid>} bidsReceived
     * @param {Array<BidRequest>} bidderRequests
     *
     * @return {boolean} returns TRUE if tracking started
     */
    function trackInstreamDeliveredImpressions(_ref) {
      var adUnits = _ref.adUnits,
        bidsReceived = _ref.bidsReceived,
        bidderRequests = _ref.bidderRequests;
      var instreamTrackingConfig = _src_config_js__WEBPACK_IMPORTED_MODULE_1__.config.getConfig('instreamTracking') || {};
      // check if instreamTracking is enabled and performance api is available
      if (!instreamTrackingConfig.enabled || !window.performance || !window.performance.getEntriesByType) {
        return false;
      }
    
      // filter for video bids
      var instreamBids = bidsReceived.filter(function (bid) {
        var bidderRequest = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.getBidRequest)(bid.requestId, bidderRequests);
        return bidderRequest && (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"])(bidderRequest, 'mediaTypes.video.context') === _src_video_js__WEBPACK_IMPORTED_MODULE_4__.INSTREAM && bid.videoCacheKey;
      });
      if (!instreamBids.length) {
        return false;
      }
    
      // find unique instream ad units
      var instreamAdUnitMap = {};
      adUnits.forEach(function (adUnit) {
        if (!instreamAdUnitMap[adUnit.code] && (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"])(adUnit, 'mediaTypes.video.context') === _src_video_js__WEBPACK_IMPORTED_MODULE_4__.INSTREAM) {
          instreamAdUnitMap[adUnit.code] = true;
        }
      });
      var instreamAdUnitsCount = Object.keys(instreamAdUnitMap).length;
      var start = Date.now();
      var maxWindow = instreamTrackingConfig.maxWindow,
        pollingFreq = instreamTrackingConfig.pollingFreq,
        urlPattern = instreamTrackingConfig.urlPattern;
      var instreamWinningBidsCount = 0;
      var lastRead = 0; // offset for performance.getEntriesByType
    
      function poll() {
        // get network entries using the last read offset
        var entries = window.performance.getEntriesByType('resource').splice(lastRead);
        var _iterator = _createForOfIteratorHelper(entries),
          _step;
        try {
          var _loop = function _loop() {
            var resource = _step.value;
            var url = resource.name;
            // check if the resource is of whitelisted resource to avoid checking img or css or script urls
            if (!whitelistedResources.test(resource.initiatorType)) {
              return "continue";
            }
            instreamBids.forEach(function (bid) {
              // match the video cache key excluding ad server call
              var matches = !(url.indexOf(CACHE_ID) !== -1 || url.indexOf(UUID) !== -1) && url.indexOf(bid.videoCacheKey) !== -1;
              if (urlPattern && urlPattern instanceof RegExp && !urlPattern.test(url)) {
                return;
              }
              if (matches && bid.status !== RENDERED) {
                // video found
                instreamWinningBidsCount++;
                _src_auctionManager_js__WEBPACK_IMPORTED_MODULE_5__.auctionManager.addWinningBid(bid);
                _src_events_js__WEBPACK_IMPORTED_MODULE_6__.emit(BID_WON, bid);
              }
            });
          };
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _ret = _loop();
            if (_ret === "continue") continue;
          }
          // update offset
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        lastRead += entries.length;
        var timeElapsed = Date.now() - start;
        if (timeElapsed < maxWindow && instreamWinningBidsCount < instreamAdUnitsCount) {
          setTimeout(poll, pollingFreq);
        }
      }
    
      // start polling for network entries
      setTimeout(poll, pollingFreq);
      return true;
    }
    _src_events_js__WEBPACK_IMPORTED_MODULE_6__.on(AUCTION_END, trackInstreamDeliveredImpressions);
    window.owpbjs.installedModules.push('instreamTracking');
    
    /***/ })
    
    },
    /******/ function(__webpack_require__) { // webpackRuntimeModules
    /******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
    /******/ __webpack_require__.O(0, ["fpd"], function() { return __webpack_exec__("./modules/instreamTracking.js"); });
    /******/ var __webpack_exports__ = __webpack_require__.O();
    /******/ }
    ]);
    
    "use strict";
    (self["owpbjsChunk"] = self["owpbjsChunk"] || []).push([["prebidJSDebugUI"],{
    
    /***/ "./modules/prebidJSDebugUI.js":
    /*!************************************!*\
      !*** ./modules/prebidJSDebugUI.js ***!
      \************************************/
    /***/ (function(__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
    
    /* harmony import */ var _src_config_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../src/config.js */ "./src/config.js");
    /* harmony import */ var _src_events_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../src/events.js */ "./src/events.js");
    /* harmony import */ var _src_constants_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../src/constants.json */ "./src/constants.json");
    /* harmony import */ var _src_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../src/utils.js */ "./src/utils.js");
    /* harmony import */ var _src_adloader_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../src/adloader.js */ "./src/adloader.js");
    
    
    
    
    
    
    // const MODULE_NAME = 'Prebid JS Debug UI';
    var UI_LIBRARY_END_POINT = 'https://pm-harshad-mane.github.io/pbjs-debug-ui/bundle.js';
    var UI_LIBRARY_LOAD_DELAY = 3000;
    // UI library depends on these keys, so do not make changes to keys
    var DEBUG_OBJECT_KEY_NAME = '_pbjsDebugUI';
    var AUCTIONS_KEY = '_auctions';
    var AUCTION_INIT_KEY = '_init';
    var AUCTION_END_KEY = '_end';
    var AUCTIONS_BIDS_WON_KEY = '_bidsWon';
    var DEBUG_KEY = '_debug';
    var AUCTION_TAEGETING_KEY = '_targeting';
    var TCF2_KEY = '_tcf2Enforcement';
    var isListenerAdded = false;
    
    // Do not load the lib if already loaded
    var uiLibraryLoaded = false;
    
    /*
    ToDo:
    */
    
    function loadUILibIfNotAlreadyLoaded() {
      if (uiLibraryLoaded === false) {
        uiLibraryLoaded = true;
        (0,_src_adloader_js__WEBPACK_IMPORTED_MODULE_0__.loadExternalScript)(UI_LIBRARY_END_POINT, 'pbjs-debug-ui');
      }
    }
    function loadUILibrary() {
      // the js library needs this variable to be defined to know which is the primary prebid-js code on page in case tehre are multiple instances of prebid-js on page
      window.PBJS_NAMESPACE = "owpbjs";
      createDebugObjectIfNotPresent();
      createDebugObjectAuctionIfNotPresent();
    
      // Load the UI library after page-load / some delay
      // Load lib on DOMContentLoaded
      window.document.addEventListener('DOMContentLoaded', function () {
        loadUILibIfNotAlreadyLoaded();
      });
      // Load lib after some timeout
      setTimeout(function () {
        loadUILibIfNotAlreadyLoaded();
      }, UI_LIBRARY_LOAD_DELAY);
    }
    function createDebugObjectIfNotPresent() {
      if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(owpbjs[DEBUG_OBJECT_KEY_NAME]) === false) {
        owpbjs[DEBUG_OBJECT_KEY_NAME] = {};
      }
    }
    function createDebugObjectAuctionIfNotPresent() {
      if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(owpbjs[DEBUG_OBJECT_KEY_NAME][AUCTIONS_KEY]) === false) {
        owpbjs[DEBUG_OBJECT_KEY_NAME][AUCTIONS_KEY] = [];
      }
    }
    function getAuctionIdEntry(auctionId) {
      // create one if not present
      var auctionEntry = owpbjs[DEBUG_OBJECT_KEY_NAME][AUCTIONS_KEY].find(function (auctionEntry) {
        return auctionEntry.auctionId === auctionId;
      });
      if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(auctionEntry) === false) {
        auctionEntry = {
          auctionId: auctionId
        };
        owpbjs[DEBUG_OBJECT_KEY_NAME][AUCTIONS_KEY].push(auctionEntry);
      }
      return auctionEntry;
    }
    
    // TODO: improve the latest auction logic;
    //       current logic fails when multiple auctions are initiated simultaneously
    //       better if pbjs passes respective auctionId with each event
    function getLatestAuctionEntry() {
      return owpbjs[DEBUG_OBJECT_KEY_NAME][AUCTIONS_KEY][owpbjs[DEBUG_OBJECT_KEY_NAME][AUCTIONS_KEY].length - 1];
    }
    function auctionInitHandler(auctionInitData) {
      createDebugObjectIfNotPresent();
      createDebugObjectAuctionIfNotPresent();
      var auctionEntry = getAuctionIdEntry(auctionInitData.auctionId);
      auctionEntry[AUCTION_INIT_KEY] = auctionInitData;
    }
    function auctionEndHandler(auctionEndData) {
      createDebugObjectIfNotPresent();
      createDebugObjectAuctionIfNotPresent();
      // auctionEndData.timestamp is auctionStart
      auctionEndData.auctionStart = auctionEndData.timestamp;
      var auctionEntry = getAuctionIdEntry(auctionEndData.auctionId);
      auctionEntry[AUCTION_END_KEY] = auctionEndData;
    }
    function createDebugObjectAuctionDebugIfNotPresent() {
      if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(owpbjs[DEBUG_OBJECT_KEY_NAME][DEBUG_KEY]) === false) {
        owpbjs[DEBUG_OBJECT_KEY_NAME][DEBUG_KEY] = [];
      }
    }
    function saveAuctionDebugData(auctionDebugData) {
      owpbjs[DEBUG_OBJECT_KEY_NAME][DEBUG_KEY].push(auctionDebugData);
    }
    function auctionDebugHandler(auctionDebugData) {
      createDebugObjectIfNotPresent();
      createDebugObjectAuctionDebugIfNotPresent();
      saveAuctionDebugData(auctionDebugData);
      // this data can't be put inside auction as error might be thrown before init of the auction
    }
    
    function createDebugObjectTcf2IfNotPresent() {
      if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(owpbjs[DEBUG_OBJECT_KEY_NAME][TCF2_KEY]) === false) {
        owpbjs[DEBUG_OBJECT_KEY_NAME][TCF2_KEY] = {};
      }
    }
    function saveTcf2EnforcementData(tcf2EnforcementData) {
      owpbjs[DEBUG_OBJECT_KEY_NAME][TCF2_KEY] = tcf2EnforcementData;
    }
    function tcf2EnforcementHandler(tcf2EnforcementData) {
      createDebugObjectIfNotPresent();
      createDebugObjectTcf2IfNotPresent();
      saveTcf2EnforcementData(tcf2EnforcementData);
    }
    
    // putting this data in last auction to keep it safe
    //    otherwise the old data will be lost after a new auction takes place
    function setTargetingHandler(targetingData) {
      createDebugObjectIfNotPresent();
      createDebugObjectAuctionIfNotPresent();
      var auctionEntry = getLatestAuctionEntry();
      auctionEntry[AUCTION_TAEGETING_KEY] = targetingData;
    }
    function bidWonHandler(bidWonData) {
      createDebugObjectIfNotPresent();
      createDebugObjectAuctionIfNotPresent();
      var auctionEntry = getAuctionIdEntry(bidWonData.auctionId);
      if (!(0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(auctionEntry[AUCTIONS_BIDS_WON_KEY])) {
        auctionEntry[AUCTIONS_BIDS_WON_KEY] = {};
      }
      auctionEntry[AUCTIONS_BIDS_WON_KEY][bidWonData.adId] = bidWonData;
    }
    function handleSetDebugConfig(debugFlag) {
      // this module should work only if pbjs_debug is set to true in page-URL or debug mode is on thru config
      // handlers should be registered only once
      if (debugFlag !== true || isListenerAdded) {
        return;
      }
      _src_events_js__WEBPACK_IMPORTED_MODULE_2__.on(_src_constants_json__WEBPACK_IMPORTED_MODULE_3__.EVENTS.AUCTION_INIT, auctionInitHandler);
      _src_events_js__WEBPACK_IMPORTED_MODULE_2__.on(_src_constants_json__WEBPACK_IMPORTED_MODULE_3__.EVENTS.AUCTION_END, auctionEndHandler);
      _src_events_js__WEBPACK_IMPORTED_MODULE_2__.on(_src_constants_json__WEBPACK_IMPORTED_MODULE_3__.EVENTS.AUCTION_DEBUG, auctionDebugHandler);
      _src_events_js__WEBPACK_IMPORTED_MODULE_2__.on(_src_constants_json__WEBPACK_IMPORTED_MODULE_3__.EVENTS.SET_TARGETING, setTargetingHandler);
      _src_events_js__WEBPACK_IMPORTED_MODULE_2__.on(_src_constants_json__WEBPACK_IMPORTED_MODULE_3__.EVENTS.TCF2_ENFORCEMENT, tcf2EnforcementHandler);
      _src_events_js__WEBPACK_IMPORTED_MODULE_2__.on(_src_constants_json__WEBPACK_IMPORTED_MODULE_3__.EVENTS.BID_WON, bidWonHandler);
      isListenerAdded = true;
      loadUILibrary();
    }
    
    // handleSetDebugConfig will be called whenever setConfig is called with debug property
    _src_config_js__WEBPACK_IMPORTED_MODULE_4__.config.getConfig('debug', function (config) {
      return handleSetDebugConfig(config.debug);
    });
    window.owpbjs.installedModules.push('prebidJSDebugUI');
    
    /***/ })
    
    },
    /******/ function(__webpack_require__) { // webpackRuntimeModules
    /******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
    /******/ __webpack_require__.O(0, ["fpd"], function() { return __webpack_exec__("./modules/prebidJSDebugUI.js"); });
    /******/ var __webpack_exports__ = __webpack_require__.O();
    /******/ }
    ]);
    
    "use strict";
    (self["owpbjsChunk"] = self["owpbjsChunk"] || []).push([["priceFloors"],{
    
    /***/ "./modules/priceFloors.js":
    /*!********************************!*\
      !*** ./modules/priceFloors.js ***!
      \********************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    /* unused harmony exports allowedFields, _floorDataForAuction, fieldMatchingFunctions, getFirstMatchingFloor, getBiddersCpmAdjustment, calculateAdjustedFloor, getFloor, getFloorsDataForAuction, getFloorDataFromAdUnits, updateAdUnitsForAuction, pickRandomModel, createFloorsDataForAuction, continueAuction, isFloorsDataValid, parseFloorData, requestBidsHook, handleFetchResponse, generateAndHandleFetch, handleSetFloorsConfig, addBidResponseHook, setOrtbImpBidFloor, setImpExtPrebidFloors, setOrtbExtPrebidFloors */
    /* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");
    /* harmony import */ var _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js");
    /* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
    /* harmony import */ var _src_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../src/utils.js */ "./src/utils.js");
    /* harmony import */ var _src_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../src/utils.js */ "./node_modules/dlv/index.js");
    /* harmony import */ var _src_utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../src/utils.js */ "./node_modules/dset/dist/index.mjs");
    /* harmony import */ var _src_prebidGlobal_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../src/prebidGlobal.js */ "./src/prebidGlobal.js");
    /* harmony import */ var _src_config_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../src/config.js */ "./src/config.js");
    /* harmony import */ var _src_ajax_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../src/ajax.js */ "./src/ajax.js");
    /* harmony import */ var _src_events_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../src/events.js */ "./src/events.js");
    /* harmony import */ var _src_constants_json__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../src/constants.json */ "./src/constants.json");
    /* harmony import */ var _src_hook_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../src/hook.js */ "./src/hook.js");
    /* harmony import */ var _src_polyfill_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../src/polyfill.js */ "./src/polyfill.js");
    /* harmony import */ var _src_refererDetection_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../src/refererDetection.js */ "./src/refererDetection.js");
    /* harmony import */ var _src_bidderSettings_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../src/bidderSettings.js */ "./src/bidderSettings.js");
    /* harmony import */ var _src_auctionManager_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../src/auctionManager.js */ "./src/auctionManager.js");
    /* harmony import */ var _src_pbjsORTB_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../src/pbjsORTB.js */ "./src/pbjsORTB.js");
    /* harmony import */ var _src_utils_perfMetrics_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../src/utils/perfMetrics.js */ "./src/utils/perfMetrics.js");
    /* harmony import */ var _src_utils_currency_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../src/utils/currency.js */ "./src/utils/currency.js");
    /* harmony import */ var _src_utils_cpm_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../src/utils/cpm.js */ "./src/utils/cpm.js");
    
    
    
    var _excluded = ["modelGroups"];
    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     * @summary This Module is intended to provide users with the ability to dynamically set and enforce price floors on a per auction basis.
     */
    var MODULE_NAME = 'Price Floors';
    
    /**
     * @summary Instantiate Ajax so we control the timeout
     */
    var ajax = (0,_src_ajax_js__WEBPACK_IMPORTED_MODULE_1__.ajaxBuilder)(10000);
    
    /**
     * @summary Allowed fields for rules to have
     */
    var allowedFields = ['gptSlot', 'adUnitCode', 'size', 'domain', 'mediaType'];
    
    /**
     * @summary This is a flag to indicate if a AJAX call is processing for a floors request
    */
    var fetching = false;
    
    /**
     * @summary so we only register for our hooks once
    */
    var addedFloorsHook = false;
    
    /**
     * @summary The config to be used. Can be updated via: setConfig or a real time fetch
     */
    var _floorsConfig = {};
    
    /**
     * @summary If a auction is to be delayed by an ongoing fetch we hold it here until it can be resumed
     */
    var _delayedAuctions = [];
    
    /**
     * @summary Each auction can have differing floors data depending on execution time or per adunit setup
     * So we will be saving each auction offset by it's auctionId in order to make sure data is not changed
     * Once the auction commences
     */
    var _floorDataForAuction = {};
    
    /**
     * @summary Simple function to round up to a certain decimal degree
     */
    function roundUp(number, precision) {
      return Math.ceil((parseFloat(number) * Math.pow(10, precision)).toFixed(1)) / Math.pow(10, precision);
    }
    var getHostname = function () {
      var domain;
      return function () {
        if (domain == null) {
          domain = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.parseUrl)((0,_src_refererDetection_js__WEBPACK_IMPORTED_MODULE_3__.getRefererInfo)().topmostLocation, {
            noDecodeWholeURL: true
          }).hostname;
        }
        return domain;
      };
    }();
    
    // First look into bidRequest!
    function getGptSlotFromAdUnit(transactionId) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$index = _ref.index,
        index = _ref$index === void 0 ? _src_auctionManager_js__WEBPACK_IMPORTED_MODULE_4__.auctionManager.index : _ref$index;
      var adUnit = index.getAdUnit({
        transactionId: transactionId
      });
      var isGam = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(adUnit, 'ortb2Imp.ext.data.adserver.name') === 'gam';
      return isGam && adUnit.ortb2Imp.ext.data.adserver.adslot;
    }
    function getAdUnitCode(request, response) {
      var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref2$index = _ref2.index,
        index = _ref2$index === void 0 ? _src_auctionManager_js__WEBPACK_IMPORTED_MODULE_4__.auctionManager.index : _ref2$index;
      return (request === null || request === void 0 ? void 0 : request.adUnitCode) || index.getAdUnit(response).code;
    }
    
    /**
     * @summary floor field types with their matching functions to resolve the actual matched value
     */
    var fieldMatchingFunctions = {
      'size': function size(bidRequest, bidResponse) {
        return (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.parseGPTSingleSizeArray)(bidResponse.size) || '*';
      },
      'mediaType': function mediaType(bidRequest, bidResponse) {
        return bidResponse.mediaType || 'banner';
      },
      'gptSlot': function gptSlot(bidRequest, bidResponse) {
        return getGptSlotFromAdUnit((bidRequest || bidResponse).transactionId) || (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.getGptSlotInfoForAdUnitCode)(getAdUnitCode(bidRequest, bidResponse)).gptSlot;
      },
      'domain': getHostname,
      'adUnitCode': function adUnitCode(bidRequest, bidResponse) {
        return getAdUnitCode(bidRequest, bidResponse);
      }
    };
    
    /**
     * @summary Based on the fields array in floors data, it enumerates all possible matches based on exact match coupled with
     * a "*" catch-all match
     * Returns array of Tuple [exact match, catch all] for each field in rules file
     */
    function enumeratePossibleFieldValues(floorFields, bidObject, responseObject) {
      // generate combination of all exact matches and catch all for each field type
      return floorFields.reduce(function (accum, field) {
        var exactMatch = fieldMatchingFunctions[field](bidObject, responseObject) || '*';
        // storing exact matches as lowerCase since we want to compare case insensitively
        accum.push(exactMatch === '*' ? ['*'] : [exactMatch.toLowerCase(), '*']);
        return accum;
      }, []);
    }
    
    /**
     * @summary get's the first matching floor based on context provided.
     * Generates all possible rule matches and picks the first matching one.
     */
    function getFirstMatchingFloor(floorData, bidObject) {
      var responseObject = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var fieldValues = enumeratePossibleFieldValues((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(floorData, 'schema.fields') || [], bidObject, responseObject);
      if (!fieldValues.length) return {
        matchingFloor: floorData.default
      };
    
      // look to see if a request for this context was made already
      var matchingInput = fieldValues.map(function (field) {
        return field[0];
      }).join('-');
      // if we already have gotten the matching rule from this matching input then use it! No need to look again
      var previousMatch = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(floorData, "matchingInputs.".concat(matchingInput));
      if (previousMatch) {
        return _objectSpread({}, previousMatch);
      }
      var allPossibleMatches = generatePossibleEnumerations(fieldValues, (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(floorData, 'schema.delimiter') || '|');
      var matchingRule = (0,_src_polyfill_js__WEBPACK_IMPORTED_MODULE_6__.find)(allPossibleMatches, function (hashValue) {
        return floorData.values.hasOwnProperty(hashValue);
      });
      var matchingData = {
        floorMin: floorData.floorMin || 0,
        floorRuleValue: isNaN(floorData.values[matchingRule]) ? floorData.default : floorData.values[matchingRule],
        matchingData: allPossibleMatches[0],
        // the first possible match is an "exact" so contains all data relevant for anlaytics adapters
        matchingRule: matchingRule
      };
      // use adUnit floorMin as priority!
      if (typeof (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(bidObject, 'ortb2Imp.ext.prebid.floorMin') === 'number') {
        matchingData.floorMin = bidObject.ortb2Imp.ext.prebid.floorMin;
      }
      matchingData.matchingFloor = Math.max(matchingData.floorMin, matchingData.floorRuleValue);
      // save for later lookup if needed
      (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_7__.dset)(floorData, "matchingInputs.".concat(matchingInput), _objectSpread({}, matchingData));
      return matchingData;
    }
    
    /**
     * @summary Generates all possible rule hash's based on input array of array's
     * The generated list is of all possible key matches based on fields input
     * The list is sorted by least amount of * in rule to most with left most fields taking precedence
     */
    function generatePossibleEnumerations(arrayOfFields, delimiter) {
      return arrayOfFields.reduce(function (accum, currentVal) {
        var ret = [];
        accum.map(function (obj) {
          currentVal.map(function (obj1) {
            ret.push(obj + delimiter + obj1);
          });
        });
        return ret;
      }).sort(function (left, right) {
        return left.split('*').length - right.split('*').length;
      });
    }
    
    /**
     * @summary If a the input bidder has a registered cpmadjustment it returns the input CPM after being adjusted
     */
    function getBiddersCpmAdjustment(inputCpm, bid, bidRequest) {
      return parseFloat((0,_src_utils_cpm_js__WEBPACK_IMPORTED_MODULE_8__.adjustCpm)(inputCpm, _objectSpread(_objectSpread({}, bid), {}, {
        cpm: inputCpm
      }), bidRequest));
    }
    
    /**
     * @summary This function takes the original floor and the adjusted floor in order to determine the bidders actual floor
     * With js rounding errors with decimal division we utilize similar method as shown in cpmBucketManager.js
     */
    function calculateAdjustedFloor(oldFloor, newFloor) {
      var pow = Math.pow(10, 10);
      return oldFloor * pow / (newFloor * pow) * (oldFloor * pow) / pow;
    }
    
    /**
     * @summary gets the prebid set sizes depending on the input mediaType
     */
    var getMediaTypesSizes = {
      banner: function banner(bid) {
        return (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(bid, 'mediaTypes.banner.sizes') || [];
      },
      video: function video(bid) {
        return (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(bid, 'mediaTypes.video.playerSize') || [];
      },
      native: function native(bid) {
        return (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(bid, 'mediaTypes.native.image.sizes') ? [(0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(bid, 'mediaTypes.native.image.sizes')] : [];
      }
    };
    
    /**
     * @summary for getFloor only, before selecting a rule, if a bidAdapter asks for * in their getFloor params
     * Then we may be able to get a better rule than the * ones depending on context of the adUnit
     */
    function updateRequestParamsFromContext(bidRequest, requestParams) {
      // if adapter asks for *'s then we can do some logic to infer if we can get a more specific rule based on context of bid
      var mediaTypesOnBid = Object.keys(bidRequest.mediaTypes || {});
      // if there is only one mediaType then we can just use it
      if (requestParams.mediaType === '*' && mediaTypesOnBid.length === 1) {
        requestParams.mediaType = mediaTypesOnBid[0];
      }
      // if they asked for * size, but for the given mediaType there is only one size, we can just use it
      if (requestParams.size === '*' && mediaTypesOnBid.indexOf(requestParams.mediaType) !== -1 && getMediaTypesSizes[requestParams.mediaType] && getMediaTypesSizes[requestParams.mediaType](bidRequest).length === 1) {
        requestParams.size = getMediaTypesSizes[requestParams.mediaType](bidRequest)[0];
      }
      return requestParams;
    }
    
    /**
     * @summary This is the function which will return a single floor based on the input requests
     * and matching it to a rule for the current auction
     */
    function getFloor() {
      var requestParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        currency: 'USD',
        mediaType: '*',
        size: '*'
      };
      var bidRequest = this;
      var floorData = _floorDataForAuction[bidRequest.auctionId];
      if (!floorData || floorData.skipped) return {};
      requestParams = updateRequestParamsFromContext(bidRequest, requestParams);
      var floorInfo = getFirstMatchingFloor(floorData.data, _objectSpread({}, bidRequest), {
        mediaType: requestParams.mediaType,
        size: requestParams.size
      });
      var currency = requestParams.currency || floorData.data.currency;
    
      // if bidder asked for a currency which is not what floors are set in convert
      if (floorInfo.matchingFloor && currency !== floorData.data.currency) {
        try {
          floorInfo.matchingFloor = (0,_src_prebidGlobal_js__WEBPACK_IMPORTED_MODULE_9__.getGlobal)().convertCurrency(floorInfo.matchingFloor, floorData.data.currency, currency);
        } catch (err) {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)("".concat(MODULE_NAME, ": Unable to get currency conversion for getFloor for bidder ").concat(bidRequest.bidder, ". You must have currency module enabled with defaultRates in your currency config"));
          // since we were unable to convert to the bidders requested currency, we send back just the actual floors currency to them
          currency = floorData.data.currency;
        }
      }
    
      // if cpmAdjustment flag is true and we have a valid floor then run the adjustment on it
      if (floorData.enforcement.bidAdjustment && floorInfo.matchingFloor) {
        // pub provided inverse function takes precedence, otherwise do old adjustment stuff
        var inverseFunction = _src_bidderSettings_js__WEBPACK_IMPORTED_MODULE_10__.bidderSettings.get(bidRequest.bidder, 'inverseBidAdjustment');
        if (inverseFunction) {
          floorInfo.matchingFloor = inverseFunction(floorInfo.matchingFloor, bidRequest);
        } else {
          var cpmAdjustment = getBiddersCpmAdjustment(floorInfo.matchingFloor, null, bidRequest);
          floorInfo.matchingFloor = cpmAdjustment ? calculateAdjustedFloor(floorInfo.matchingFloor, cpmAdjustment) : floorInfo.matchingFloor;
        }
      }
      if (floorInfo.matchingFloor) {
        return {
          floor: roundUp(floorInfo.matchingFloor, 4),
          currency: currency
        };
      }
      return {};
    }
    
    /**
     * @summary Takes a floorsData object and converts it into a hash map with appropriate keys
     */
    function getFloorsDataForAuction(floorData, adUnitCode) {
      var auctionFloorData = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.deepClone)(floorData);
      auctionFloorData.schema.delimiter = floorData.schema.delimiter || '|';
      auctionFloorData.values = normalizeRulesForAuction(auctionFloorData, adUnitCode);
      // default the currency to USD if not passed in
      auctionFloorData.currency = auctionFloorData.currency || 'USD';
      return auctionFloorData;
    }
    
    /**
     * @summary if adUnitCode needs to be added to the offset then it will add it else just return the values
     */
    function normalizeRulesForAuction(floorData, adUnitCode) {
      var fields = floorData.schema.fields;
      var delimiter = floorData.schema.delimiter;
    
      // if we are building the floor data form an ad unit, we need to append adUnit code as to not cause collisions
      var prependAdUnitCode = adUnitCode && fields.indexOf('adUnitCode') === -1 && fields.unshift('adUnitCode');
      return Object.keys(floorData.values).reduce(function (rulesHash, oldKey) {
        var newKey = prependAdUnitCode ? "".concat(adUnitCode).concat(delimiter).concat(oldKey) : oldKey;
        // we store the rule keys as lower case for case insensitive compare
        rulesHash[newKey.toLowerCase()] = floorData.values[oldKey];
        return rulesHash;
      }, {});
    }
    
    /**
     * @summary This function will take the adUnits and generate a floor data object to be used during the auction
     * Only called if no set config or fetch level data has returned
     */
    function getFloorDataFromAdUnits(adUnits) {
      return adUnits.reduce(function (accum, adUnit) {
        if (isFloorsDataValid(adUnit.floors)) {
          // if values already exist we want to not overwrite them
          if (!accum.values) {
            accum = getFloorsDataForAuction(adUnit.floors, adUnit.code);
            accum.location = 'adUnit';
          } else {
            var newRules = getFloorsDataForAuction(adUnit.floors, adUnit.code).values;
            // copy over the new rules into our values object
            Object.assign(accum.values, newRules);
          }
        } else if (adUnit.floors != null) {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)("adUnit '".concat(adUnit.code, "' provides an invalid `floor` definition, it will be ignored for floor calculations"), adUnit);
        }
        return accum;
      }, {});
    }
    
    /**
     * @summary This function takes the adUnits for the auction and update them accordingly as well as returns the rules hashmap for the auction
     */
    function updateAdUnitsForAuction(adUnits, floorData, auctionId) {
      adUnits.forEach(function (adUnit) {
        adUnit.bids.forEach(function (bid) {
          if (floorData.skipped) {
            delete bid.getFloor;
          } else {
            bid.getFloor = getFloor;
          }
          // information for bid and analytics adapters
          bid.auctionId = auctionId;
          bid.floorData = {
            skipped: floorData.skipped,
            skipRate: floorData.skipRate,
            floorMin: floorData.floorMin,
            modelVersion: (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(floorData, 'data.modelVersion'),
            modelWeight: (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(floorData, 'data.modelWeight'),
            modelTimestamp: (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(floorData, 'data.modelTimestamp'),
            location: (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(floorData, 'data.location', 'noData'),
            floorProvider: floorData.floorProvider,
            fetchStatus: _floorsConfig.fetchStatus
          };
        });
      });
    }
    function pickRandomModel(modelGroups, weightSum) {
      // we loop through the models subtracting the current model weight from our random number
      // once we are at or below zero, we return the associated model
      var random = Math.floor(Math.random() * weightSum + 1);
      for (var i = 0; i < modelGroups.length; i++) {
        random -= modelGroups[i].modelWeight;
        if (random <= 0) {
          return modelGroups[i];
        }
      }
    }
    ;
    
    /**
     * @summary Updates the adUnits accordingly and returns the necessary floorsData for the current auction
     */
    function createFloorsDataForAuction(adUnits, auctionId) {
      var resolvedFloorsData = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.deepClone)(_floorsConfig);
      // if using schema 2 pick a model here:
      if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(resolvedFloorsData, 'data.floorsSchemaVersion') === 2) {
        // merge the models specific stuff into the top level data settings (now it looks like floorsSchemaVersion 1!)
        var _resolvedFloorsData$d = resolvedFloorsData.data,
          modelGroups = _resolvedFloorsData$d.modelGroups,
          rest = (0,_babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_11__["default"])(_resolvedFloorsData$d, _excluded);
        resolvedFloorsData.data = Object.assign(rest, pickRandomModel(modelGroups, rest.modelWeightSum));
      }
    
      // if we do not have a floors data set, we will try to use data set on adUnits
      var useAdUnitData = Object.keys((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(resolvedFloorsData, 'data.values') || {}).length === 0;
      if (useAdUnitData) {
        resolvedFloorsData.data = getFloorDataFromAdUnits(adUnits);
      } else {
        resolvedFloorsData.data = getFloorsDataForAuction(resolvedFloorsData.data);
      }
      // if we still do not have a valid floor data then floors is not on for this auction, so skip
      if (Object.keys((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(resolvedFloorsData, 'data.values') || {}).length === 0) {
        resolvedFloorsData.skipped = true;
      } else {
        // determine the skip rate now
        var auctionSkipRate = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.getParameterByName)('pbjs_skipRate') || resolvedFloorsData.skipRate;
        var isSkipped = Math.random() * 100 < parseFloat(auctionSkipRate);
        resolvedFloorsData.skipped = isSkipped;
      }
      // copy FloorMin to floorData.data
      if (resolvedFloorsData.hasOwnProperty('floorMin')) resolvedFloorsData.data.floorMin = resolvedFloorsData.floorMin;
      // add floorData to bids
      updateAdUnitsForAuction(adUnits, resolvedFloorsData, auctionId);
      return resolvedFloorsData;
    }
    
    /**
     * @summary This is the function which will be called to exit our module and continue the auction.
     */
    function continueAuction(hookConfig) {
      // only run if hasExited
      if (!hookConfig.hasExited) {
        // if this current auction is still fetching, remove it from the _delayedAuctions
        _delayedAuctions = _delayedAuctions.filter(function (auctionConfig) {
          return auctionConfig.timer !== hookConfig.timer;
        });
    
        // We need to know the auctionId at this time. So we will use the passed in one or generate and set it ourselves
        hookConfig.reqBidsConfigObj.auctionId = hookConfig.reqBidsConfigObj.auctionId || (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.generateUUID)();
    
        // now we do what we need to with adUnits and save the data object to be used for getFloor and enforcement calls
        _floorDataForAuction[hookConfig.reqBidsConfigObj.auctionId] = createFloorsDataForAuction(hookConfig.reqBidsConfigObj.adUnits || (0,_src_prebidGlobal_js__WEBPACK_IMPORTED_MODULE_9__.getGlobal)().adUnits, hookConfig.reqBidsConfigObj.auctionId);
        hookConfig.nextFn.apply(hookConfig.context, [hookConfig.reqBidsConfigObj]);
        hookConfig.hasExited = true;
      }
    }
    function validateSchemaFields(fields) {
      if (Array.isArray(fields) && fields.length > 0 && fields.every(function (field) {
        return allowedFields.indexOf(field) !== -1;
      })) {
        return true;
      }
      (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)("".concat(MODULE_NAME, ": Fields recieved do not match allowed fields"));
      return false;
    }
    function isValidRule(key, floor, numFields, delimiter) {
      if (typeof key !== 'string' || key.split(delimiter).length !== numFields) {
        return false;
      }
      return typeof floor === 'number';
    }
    function validateRules(floorsData, numFields, delimiter) {
      if ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_12__["default"])(floorsData.values) !== 'object') {
        return false;
      }
      // if an invalid rule exists we remove it
      floorsData.values = Object.keys(floorsData.values).reduce(function (filteredRules, key) {
        if (isValidRule(key, floorsData.values[key], numFields, delimiter)) {
          filteredRules[key] = floorsData.values[key];
        }
        return filteredRules;
      }, {});
      // rules is only valid if at least one rule remains
      return Object.keys(floorsData.values).length > 0;
    }
    function modelIsValid(model) {
      // schema.fields has only allowed attributes
      if (!validateSchemaFields((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(model, 'schema.fields'))) {
        return false;
      }
      return validateRules(model, model.schema.fields.length, model.schema.delimiter || '|');
    }
    
    /**
     * @summary Mapping of floor schema version to it's corresponding validation
     */
    var floorsSchemaValidation = {
      1: function _(data) {
        return modelIsValid(data);
      },
      2: function _(data) {
        // model groups should be an array with at least one element
        if (!Array.isArray(data.modelGroups) || data.modelGroups.length === 0) {
          return false;
        }
        // every model should have valid schema, as well as an accompanying modelWeight
        data.modelWeightSum = 0;
        return data.modelGroups.every(function (model) {
          if (typeof model.modelWeight === 'number' && modelIsValid(model)) {
            data.modelWeightSum += model.modelWeight;
            return true;
          }
          return false;
        });
      }
    };
    
    /**
     * @summary Fields array should have at least one entry and all should match allowed fields
     * Each rule in the values array should have a 'key' and 'floor' param
     * And each 'key' should have the correct number of 'fields' after splitting
     * on the delim. If rule does not match remove it. return if still at least 1 rule
     */
    function isFloorsDataValid(floorsData) {
      if ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_12__["default"])(floorsData) !== 'object') {
        return false;
      }
      floorsData.floorsSchemaVersion = floorsData.floorsSchemaVersion || 1;
      if (typeof floorsSchemaValidation[floorsData.floorsSchemaVersion] !== 'function') {
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)("".concat(MODULE_NAME, ": Unknown floorsSchemaVersion: "), floorsData.floorsSchemaVersion);
        return false;
      }
      return floorsSchemaValidation[floorsData.floorsSchemaVersion](floorsData);
    }
    
    /**
     * @summary This function updates the global Floors Data field based on the new one passed in if it is valid
     */
    function parseFloorData(floorsData, location) {
      if (floorsData && (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_12__["default"])(floorsData) === 'object' && isFloorsDataValid(floorsData)) {
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logInfo)("".concat(MODULE_NAME, ": A ").concat(location, " set the auction floor data set to "), floorsData);
        return _objectSpread(_objectSpread({}, floorsData), {}, {
          location: location
        });
      }
      (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)("".concat(MODULE_NAME, ": The floors data did not contain correct values"), floorsData);
    }
    
    /**
     *
     * @param {Object} reqBidsConfigObj required; This is the same param that's used in pbjs.requestBids.
     * @param {function} fn required; The next function in the chain, used by hook.js
     */
    var requestBidsHook = (0,_src_utils_perfMetrics_js__WEBPACK_IMPORTED_MODULE_13__.timedAuctionHook)('priceFloors', function requestBidsHook(fn, reqBidsConfigObj) {
      // preserves all module related variables for the current auction instance (used primiarily for concurrent auctions)
      var hookConfig = {
        reqBidsConfigObj: reqBidsConfigObj,
        context: this,
        nextFn: fn,
        haveExited: false,
        timer: null
      };
    
      // If auction delay > 0 AND we are fetching -> Then wait until it finishes
      if (_floorsConfig.auctionDelay > 0 && fetching) {
        hookConfig.timer = setTimeout(function () {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)("".concat(MODULE_NAME, ": Fetch attempt did not return in time for auction"));
          _floorsConfig.fetchStatus = 'timeout';
          continueAuction(hookConfig);
        }, _floorsConfig.auctionDelay);
        _delayedAuctions.push(hookConfig);
      } else {
        continueAuction(hookConfig);
      }
    });
    
    /**
     * @summary If an auction was queued to be delayed (waiting for a fetch) then this function will resume
     * those delayed auctions when delay is hit or success return or fail return
     */
    function resumeDelayedAuctions() {
      _delayedAuctions.forEach(function (auctionConfig) {
        // clear the timeout
        clearTimeout(auctionConfig.timer);
        continueAuction(auctionConfig);
      });
      _delayedAuctions = [];
    }
    
    /**
     * This function handles the ajax response which comes from the user set URL to fetch floors data from
     * @param {object} fetchResponse The floors data response which came back from the url configured in config.floors
     */
    function handleFetchResponse(fetchResponse) {
      fetching = false;
      _floorsConfig.fetchStatus = 'success';
      var floorResponse;
      try {
        floorResponse = JSON.parse(fetchResponse);
      } catch (ex) {
        floorResponse = fetchResponse;
      }
      // Update the global floors object according to the fetched data
      var fetchData = parseFloorData(floorResponse, 'fetch');
      if (fetchData) {
        // set .data to it
        _floorsConfig.data = fetchData;
        // set skipRate override if necessary
        _floorsConfig.skipRate = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isNumber)(fetchData.skipRate) ? fetchData.skipRate : _floorsConfig.skipRate;
        _floorsConfig.floorProvider = fetchData.floorProvider || _floorsConfig.floorProvider;
      }
    
      // if any auctions are waiting for fetch to finish, we need to continue them!
      resumeDelayedAuctions();
    }
    function handleFetchError(status) {
      fetching = false;
      _floorsConfig.fetchStatus = 'error';
      (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)("".concat(MODULE_NAME, ": Fetch errored with: "), status);
    
      // if any auctions are waiting for fetch to finish, we need to continue them!
      resumeDelayedAuctions();
    }
    
    /**
     * This function handles sending and recieving the AJAX call for a floors fetch
     * @param {object} floorsConfig the floors config coming from setConfig
     */
    function generateAndHandleFetch(floorEndpoint) {
      // if a fetch url is defined and one is not already occuring, fire it!
      if (floorEndpoint.url && !fetching) {
        // default to GET and we only support GET for now
        var requestMethod = floorEndpoint.method || 'GET';
        if (requestMethod !== 'GET') {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)("".concat(MODULE_NAME, ": 'GET' is the only request method supported at this time!"));
        } else {
          ajax(floorEndpoint.url, {
            success: handleFetchResponse,
            error: handleFetchError
          }, null, {
            method: 'GET'
          });
          fetching = true;
        }
      } else if (fetching) {
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)("".concat(MODULE_NAME, ": A fetch is already occuring. Skipping."));
      }
    }
    
    /**
     * @summary Updates our allowedFields and fieldMatchingFunctions with the publisher defined new ones
     */
    function addFieldOverrides(overrides) {
      Object.keys(overrides).forEach(function (override) {
        // we only add it if it is not already in the allowed fields and if the passed in value is a function
        if (allowedFields.indexOf(override) === -1 && typeof overrides[override] === 'function') {
          allowedFields.push(override);
          fieldMatchingFunctions[override] = overrides[override];
        }
      });
    }
    
    /**
     * @summary This is the function which controls what happens during a pbjs.setConfig({...floors: {}}) is called
     */
    function handleSetFloorsConfig(config) {
      _floorsConfig = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.pick)(config, ['floorMin', 'enabled', function (enabled) {
        return enabled !== false;
      },
      // defaults to true
      'auctionDelay', function (auctionDelay) {
        return auctionDelay || 0;
      }, 'floorProvider', function (floorProvider) {
        return (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(config, 'data.floorProvider', floorProvider);
      }, 'endpoint', function (endpoint) {
        return endpoint || {};
      }, 'skipRate', function () {
        return !isNaN((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(config, 'data.skipRate')) ? config.data.skipRate : config.skipRate || 0;
      }, 'enforcement', function (enforcement) {
        return (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.pick)(enforcement || {}, ['enforceJS', function (enforceJS) {
          return enforceJS !== false;
        },
        // defaults to true
        'enforcePBS', function (enforcePBS) {
          return enforcePBS === true;
        },
        // defaults to false
        'floorDeals', function (floorDeals) {
          return floorDeals === true;
        },
        // defaults to false
        'bidAdjustment', function (bidAdjustment) {
          return bidAdjustment !== false;
        } // defaults to true
        ]);
      }, 'additionalSchemaFields', function (additionalSchemaFields) {
        return (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_12__["default"])(additionalSchemaFields) === 'object' && Object.keys(additionalSchemaFields).length > 0 ? addFieldOverrides(additionalSchemaFields) : undefined;
      }, 'data', function (data) {
        return data && parseFloorData(data, 'setConfig') || _floorsConfig.data;
      } // do not overwrite if passed in data not valid
      ]);
    
      // if enabled then do some stuff
      if (_floorsConfig.enabled) {
        // handle the floors fetch
        generateAndHandleFetch(_floorsConfig.endpoint);
        if (!addedFloorsHook) {
          // register hooks / listening events
          // when auction finishes remove it's associated floor data after 3 seconds so we stil have it for latent responses
          _src_events_js__WEBPACK_IMPORTED_MODULE_14__.on(_src_constants_json__WEBPACK_IMPORTED_MODULE_15__.EVENTS.AUCTION_END, function (args) {
            setTimeout(function () {
              return delete _floorDataForAuction[args.auctionId];
            }, 3000);
          });
    
          // we want our hooks to run after the currency hooks
          (0,_src_prebidGlobal_js__WEBPACK_IMPORTED_MODULE_9__.getGlobal)().requestBids.before(requestBidsHook, 50);
          // if user has debug on then we want to allow the debugging module to run before this, assuming they are testing priceFloors
          // debugging is currently set at 5 priority
          (0,_src_hook_js__WEBPACK_IMPORTED_MODULE_16__.getHook)('addBidResponse').before(addBidResponseHook, (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.debugTurnedOn)() ? 4 : 50);
          addedFloorsHook = true;
        }
      } else {
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logInfo)("".concat(MODULE_NAME, ": Turning off module"));
        _floorsConfig = {};
        _floorDataForAuction = {};
        (0,_src_hook_js__WEBPACK_IMPORTED_MODULE_16__.getHook)('addBidResponse').getHooks({
          hook: addBidResponseHook
        }).remove();
        (0,_src_prebidGlobal_js__WEBPACK_IMPORTED_MODULE_9__.getGlobal)().requestBids.getHooks({
          hook: requestBidsHook
        }).remove();
        addedFloorsHook = false;
      }
    }
    
    /**
     * @summary Analytics adapters especially need context of what the floors module is doing in order
     * to best create informed models. This function attaches necessary information to the bidResponse object for processing
     */
    function addFloorDataToBid(floorData, floorInfo, bid, adjustedCpm) {
      bid.floorData = {
        floorValue: floorInfo.matchingFloor,
        floorRule: floorInfo.matchingRule,
        floorRuleValue: floorInfo.floorRuleValue,
        floorCurrency: floorData.data.currency,
        cpmAfterAdjustments: adjustedCpm,
        enforcements: _objectSpread({}, floorData.enforcement),
        matchedFields: {}
      };
      floorData.data.schema.fields.forEach(function (field, index) {
        var matchedValue = floorInfo.matchingData.split(floorData.data.schema.delimiter)[index];
        bid.floorData.matchedFields[field] = matchedValue;
      });
    }
    
    /**
     * @summary takes the enforcement flags and the bid itself and determines if it should be floored
     */
    function shouldFloorBid(floorData, floorInfo, bid) {
      var enforceJS = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(floorData, 'enforcement.enforceJS') !== false;
      var shouldFloorDeal = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(floorData, 'enforcement.floorDeals') === true || !bid.dealId;
      var bidBelowFloor = bid.floorData.cpmAfterAdjustments < floorInfo.matchingFloor;
      return enforceJS && bidBelowFloor && shouldFloorDeal;
    }
    
    /**
     * @summary The main driving force of floors. On bidResponse we hook in and intercept bidResponses.
     * And if the rule we find determines a bid should be floored we will do so.
     */
    var addBidResponseHook = (0,_src_utils_perfMetrics_js__WEBPACK_IMPORTED_MODULE_13__.timedBidResponseHook)('priceFloors', function addBidResponseHook(fn, adUnitCode, bid, reject) {
      var floorData = _floorDataForAuction[bid.auctionId];
      // if no floor data then bail
      if (!floorData || !bid || floorData.skipped) {
        return fn.call(this, adUnitCode, bid, reject);
      }
      var matchingBidRequest = _src_auctionManager_js__WEBPACK_IMPORTED_MODULE_4__.auctionManager.index.getBidRequest(bid);
    
      // get the matching rule
      var floorInfo = getFirstMatchingFloor(floorData.data, matchingBidRequest, _objectSpread(_objectSpread({}, bid), {}, {
        size: [bid.width, bid.height]
      }));
      if (!floorInfo.matchingFloor) {
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)("".concat(MODULE_NAME, ": unable to determine a matching price floor for bidResponse"), bid);
        return fn.call(this, adUnitCode, bid, reject);
      }
    
      // determine the base cpm to use based on if the currency matches the floor currency
      var adjustedCpm;
      var floorCurrency = floorData.data.currency.toUpperCase();
      var bidResponseCurrency = bid.currency || 'USD'; // if an adapter does not set a bid currency and currency module not on it may come in as undefined
      if (floorCurrency === bidResponseCurrency.toUpperCase()) {
        adjustedCpm = bid.cpm;
      } else if (bid.originalCurrency && floorCurrency === bid.originalCurrency.toUpperCase()) {
        adjustedCpm = bid.originalCpm;
      } else {
        try {
          adjustedCpm = (0,_src_prebidGlobal_js__WEBPACK_IMPORTED_MODULE_9__.getGlobal)().convertCurrency(bid.cpm, bidResponseCurrency.toUpperCase(), floorCurrency);
        } catch (err) {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)("".concat(MODULE_NAME, ": Unable do get currency conversion for bidResponse to Floor Currency. Do you have Currency module enabled? ").concat(bid));
          return fn.call(this, adUnitCode, bid, reject);
        }
      }
    
      // ok we got the bid response cpm in our desired currency. Now we need to run the bidders CPMAdjustment function if it exists
      adjustedCpm = getBiddersCpmAdjustment(adjustedCpm, bid, matchingBidRequest);
    
      // The below condition is added to avoid floor on s2s calls
      // Added bid.source == "s2s" condition as when we use prebidServerBidAdapter for server side partners we get source value as "s2s"
      // and we do not have support on s2s side.
      if (bid.bidderCode == 'pubmaticServer' || bid.source == 's2s') {
        return fn.call(this, adUnitCode, bid);
      }
    
      // add necessary data information for analytics adapters / floor providers would possibly need
      addFloorDataToBid(floorData, floorInfo, bid, adjustedCpm);
    
      // now do the compare!
      if (shouldFloorBid(floorData, floorInfo, bid)) {
        var _bid$floorData;
        // bid fails floor -> throw it out
        // continue with a "NO_BID" bid, TODO: remove this in v8
        var flooredBid = reject(_src_constants_json__WEBPACK_IMPORTED_MODULE_15__.REJECTION_REASON.FLOOR_NOT_MET);
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)("".concat(MODULE_NAME, ": ").concat(flooredBid.bidderCode, "'s Bid Response for ").concat(adUnitCode, " was rejected due to floor not met (adjusted cpm: ").concat(bid === null || bid === void 0 ? void 0 : (_bid$floorData = bid.floorData) === null || _bid$floorData === void 0 ? void 0 : _bid$floorData.cpmAfterAdjustments, ", floor: ").concat(floorInfo === null || floorInfo === void 0 ? void 0 : floorInfo.matchingFloor, ")"), bid);
        return fn.call(this, adUnitCode, flooredBid, reject);
      }
      return fn.call(this, adUnitCode, bid, reject);
    });
    _src_config_js__WEBPACK_IMPORTED_MODULE_17__.config.getConfig('floors', function (config) {
      return handleSetFloorsConfig(config.floors);
    });
    
    /**
     * Sets bidfloor and bidfloorcur for ORTB imp objects
     */
    function setOrtbImpBidFloor(imp, bidRequest, context) {
      if (typeof bidRequest.getFloor === 'function') {
        var currency, floor;
        try {
          var _bidRequest$getFloor = bidRequest.getFloor({
            currency: context.currency || _src_config_js__WEBPACK_IMPORTED_MODULE_17__.config.getConfig('currency.adServerCurrency') || 'USD',
            mediaType: context.mediaType || '*',
            size: '*'
          });
          currency = _bidRequest$getFloor.currency;
          floor = _bidRequest$getFloor.floor;
        } catch (e) {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)('Cannot compute floor for bid', bidRequest);
          return;
        }
        floor = parseFloat(floor);
        if (currency != null && floor != null && !isNaN(floor)) {
          Object.assign(imp, {
            bidfloor: floor,
            bidfloorcur: currency
          });
        }
      }
    }
    function setImpExtPrebidFloors(imp, bidRequest, context) {
      // logic below relates to https://github.com/prebid/Prebid.js/issues/8749 and does the following:
      // 1. check client-side floors (ref bidfloor/bidfloorcur & ortb2Imp floorMin/floorMinCur (if present))
      // 2. set pbs req wide floorMinCur to the first floor currency found when iterating over imp's
      //    (if currency conversion logic present, convert all imp floor values to this currency)
      // 3. compare/store ref to lowest floorMin value as each imp is iterated over
      // 4. set req wide floorMin and floorMinCur values for pbs after iterations are done
    
      if (imp.bidfloor != null) {
        var _imp$ext, _imp$ext$prebid, _imp$ext$prebid$floor, _imp$ext2, _imp$ext2$prebid, _imp$ext3, _imp$ext3$prebid, _imp$ext3$prebid$floo, _imp$ext4, _imp$ext4$prebid;
        var _ref3 = context.reqContext.floorMin || {},
          floorMinCur = _ref3.floorMinCur,
          floorMin = _ref3.floorMin;
        if (floorMinCur == null) {
          floorMinCur = imp.bidfloorcur;
        }
        var ortb2ImpFloorCur = ((_imp$ext = imp.ext) === null || _imp$ext === void 0 ? void 0 : (_imp$ext$prebid = _imp$ext.prebid) === null || _imp$ext$prebid === void 0 ? void 0 : (_imp$ext$prebid$floor = _imp$ext$prebid.floors) === null || _imp$ext$prebid$floor === void 0 ? void 0 : _imp$ext$prebid$floor.floorMinCur) || ((_imp$ext2 = imp.ext) === null || _imp$ext2 === void 0 ? void 0 : (_imp$ext2$prebid = _imp$ext2.prebid) === null || _imp$ext2$prebid === void 0 ? void 0 : _imp$ext2$prebid.floorMinCur) || floorMinCur;
        var ortb2ImpFloorMin = ((_imp$ext3 = imp.ext) === null || _imp$ext3 === void 0 ? void 0 : (_imp$ext3$prebid = _imp$ext3.prebid) === null || _imp$ext3$prebid === void 0 ? void 0 : (_imp$ext3$prebid$floo = _imp$ext3$prebid.floors) === null || _imp$ext3$prebid$floo === void 0 ? void 0 : _imp$ext3$prebid$floo.floorMin) || ((_imp$ext4 = imp.ext) === null || _imp$ext4 === void 0 ? void 0 : (_imp$ext4$prebid = _imp$ext4.prebid) === null || _imp$ext4$prebid === void 0 ? void 0 : _imp$ext4$prebid.floorMin);
        var convertedFloorMinValue = (0,_src_utils_currency_js__WEBPACK_IMPORTED_MODULE_18__.beConvertCurrency)(imp.bidfloor, imp.bidfloorcur, floorMinCur);
        var convertedOrtb2ImpFloorMinValue = ortb2ImpFloorMin && ortb2ImpFloorCur ? (0,_src_utils_currency_js__WEBPACK_IMPORTED_MODULE_18__.beConvertCurrency)(ortb2ImpFloorMin, ortb2ImpFloorCur, floorMinCur) : false;
        var lowestImpFloorMin = convertedOrtb2ImpFloorMinValue && convertedOrtb2ImpFloorMinValue < convertedFloorMinValue ? convertedOrtb2ImpFloorMinValue : convertedFloorMinValue;
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_7__.dset)(imp, 'ext.prebid.floors.floorMin', lowestImpFloorMin);
        if (floorMin == null || floorMin > lowestImpFloorMin) {
          floorMin = lowestImpFloorMin;
        }
        context.reqContext.floorMin = {
          floorMin: floorMin,
          floorMinCur: floorMinCur
        };
      }
    }
    
    /**
     * PBS specific extension: set ext.prebid.floors.enabled = false if floors are processed client-side
     */
    function setOrtbExtPrebidFloors(ortbRequest, bidderRequest, context) {
      if (addedFloorsHook) {
        var _ortbRequest$ext, _ortbRequest$ext$preb, _ortbRequest$ext$preb2;
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_7__.dset)(ortbRequest, 'ext.prebid.floors.enabled', ((_ortbRequest$ext = ortbRequest.ext) === null || _ortbRequest$ext === void 0 ? void 0 : (_ortbRequest$ext$preb = _ortbRequest$ext.prebid) === null || _ortbRequest$ext$preb === void 0 ? void 0 : (_ortbRequest$ext$preb2 = _ortbRequest$ext$preb.floors) === null || _ortbRequest$ext$preb2 === void 0 ? void 0 : _ortbRequest$ext$preb2.enabled) || false);
      }
      if (context !== null && context !== void 0 && context.floorMin) {
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.mergeDeep)(ortbRequest, {
          ext: {
            prebid: {
              floors: context.floorMin
            }
          }
        });
      }
    }
    (0,_src_pbjsORTB_js__WEBPACK_IMPORTED_MODULE_19__.registerOrtbProcessor)({
      type: _src_pbjsORTB_js__WEBPACK_IMPORTED_MODULE_19__.IMP,
      name: 'bidfloor',
      fn: setOrtbImpBidFloor
    });
    (0,_src_pbjsORTB_js__WEBPACK_IMPORTED_MODULE_19__.registerOrtbProcessor)({
      type: _src_pbjsORTB_js__WEBPACK_IMPORTED_MODULE_19__.IMP,
      name: 'extPrebidFloors',
      fn: setImpExtPrebidFloors,
      dialects: [_src_pbjsORTB_js__WEBPACK_IMPORTED_MODULE_19__.PBS],
      priority: -1
    });
    (0,_src_pbjsORTB_js__WEBPACK_IMPORTED_MODULE_19__.registerOrtbProcessor)({
      type: _src_pbjsORTB_js__WEBPACK_IMPORTED_MODULE_19__.REQUEST,
      name: 'extPrebidFloors',
      fn: setOrtbExtPrebidFloors,
      dialects: [_src_pbjsORTB_js__WEBPACK_IMPORTED_MODULE_19__.PBS]
    });
    window.owpbjs.installedModules.push('priceFloors');
    
    /***/ }),
    
    /***/ "./src/pbjsORTB.js":
    /*!*************************!*\
      !*** ./src/pbjsORTB.js ***!
      \*************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "IMP": function() { return /* binding */ IMP; },
    /* harmony export */   "PBS": function() { return /* binding */ PBS; },
    /* harmony export */   "REQUEST": function() { return /* binding */ REQUEST; },
    /* harmony export */   "registerOrtbProcessor": function() { return /* binding */ registerOrtbProcessor; }
    /* harmony export */ });
    /* unused harmony exports PROCESSOR_TYPES, PROCESSOR_DIALECTS, BID_RESPONSE, RESPONSE, DEFAULT, processorRegistry, getProcessors */
    var PROCESSOR_TYPES = ['request', 'imp', 'bidResponse', 'response'];
    var PROCESSOR_DIALECTS = ['default', 'pbs'];
    var REQUEST = PROCESSOR_TYPES[0],
      IMP = PROCESSOR_TYPES[1],
      BID_RESPONSE = PROCESSOR_TYPES[2],
      RESPONSE = PROCESSOR_TYPES[3];
    
    var DEFAULT = PROCESSOR_DIALECTS[0],
      PBS = PROCESSOR_DIALECTS[1];
    
    var types = new Set(PROCESSOR_TYPES);
    function processorRegistry() {
      var processors = {};
      return {
        registerOrtbProcessor: function registerOrtbProcessor(_ref) {
          var type = _ref.type,
            name = _ref.name,
            fn = _ref.fn,
            _ref$priority = _ref.priority,
            priority = _ref$priority === void 0 ? 0 : _ref$priority,
            _ref$dialects = _ref.dialects,
            dialects = _ref$dialects === void 0 ? [DEFAULT] : _ref$dialects;
          if (!types.has(type)) {
            throw new Error("ORTB processor type must be one of: ".concat(PROCESSOR_TYPES.join(', ')));
          }
          dialects.forEach(function (dialect) {
            if (!processors.hasOwnProperty(dialect)) {
              processors[dialect] = {};
            }
            if (!processors[dialect].hasOwnProperty(type)) {
              processors[dialect][type] = {};
            }
            processors[dialect][type][name] = {
              priority: priority,
              fn: fn
            };
          });
        },
        getProcessors: function getProcessors(dialect) {
          return processors[dialect] || {};
        }
      };
    }
    var _processorRegistry = processorRegistry(),
      registerOrtbProcessor = _processorRegistry.registerOrtbProcessor,
      getProcessors = _processorRegistry.getProcessors;
    
    
    /***/ }),
    
    /***/ "./src/utils/currency.js":
    /*!*******************************!*\
      !*** ./src/utils/currency.js ***!
      \*******************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "beConvertCurrency": function() { return /* binding */ beConvertCurrency; }
    /* harmony export */ });
    /* harmony import */ var _prebidGlobal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../prebidGlobal.js */ "./src/prebidGlobal.js");
    
    
    /**
     * "best effort" wrapper around currency conversion; always returns an amount that may or may not be correct.
     */
    function beConvertCurrency(amount, from, to) {
      if (from === to) return amount;
      var result = amount;
      if (typeof (0,_prebidGlobal_js__WEBPACK_IMPORTED_MODULE_0__.getGlobal)().convertCurrency === 'function') {
        try {
          result = (0,_prebidGlobal_js__WEBPACK_IMPORTED_MODULE_0__.getGlobal)().convertCurrency(amount, from, to);
        } catch (e) {}
      }
      return result;
    }
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js":
    /*!****************************************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js ***!
      \****************************************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _objectWithoutProperties; }
    /* harmony export */ });
    /* harmony import */ var _objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./objectWithoutPropertiesLoose.js */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
    
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = (0,_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_0__["default"])(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    
    /***/ }),
    
    /***/ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js":
    /*!*********************************************************************************!*\
      !*** ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js ***!
      \*********************************************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
    
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ _objectWithoutPropertiesLoose; }
    /* harmony export */ });
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    
    /***/ })
    
    },
    /******/ function(__webpack_require__) { // webpackRuntimeModules
    /******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
    /******/ __webpack_require__.O(0, ["fpd"], function() { return __webpack_exec__("./modules/priceFloors.js"); });
    /******/ var __webpack_exports__ = __webpack_require__.O();
    /******/ }
    ]);
    
    "use strict";
    (self["owpbjsChunk"] = self["owpbjsChunk"] || []).push([["pubmaticAnalyticsAdapter"],{
    
    /***/ "./modules/pubmaticAnalyticsAdapter.js":
    /*!*********************************************!*\
      !*** ./modules/pubmaticAnalyticsAdapter.js ***!
      \*********************************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    /* unused harmony exports getMetadata, default */
    /* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");
    /* harmony import */ var _src_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../src/utils.js */ "./src/utils.js");
    /* harmony import */ var _libraries_analyticsAdapter_AnalyticsAdapter_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../libraries/analyticsAdapter/AnalyticsAdapter.js */ "./libraries/analyticsAdapter/AnalyticsAdapter.js");
    /* harmony import */ var _src_adapterManager_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../src/adapterManager.js */ "./src/adapterManager.js");
    /* harmony import */ var _src_constants_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../src/constants.json */ "./src/constants.json");
    /* harmony import */ var _src_ajax_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../src/ajax.js */ "./src/ajax.js");
    /* harmony import */ var _src_config_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../src/config.js */ "./src/config.js");
    /* harmony import */ var _src_prebidGlobal_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../src/prebidGlobal.js */ "./src/prebidGlobal.js");
    
    
    
    
    
    
    
    
    
    /// /////////// CONSTANTS //////////////
    var ADAPTER_CODE = 'pubmatic';
    var SEND_TIMEOUT = 2000;
    var END_POINT_HOST = 'https://t.pubmatic.com/';
    var END_POINT_BID_LOGGER = END_POINT_HOST + 'wl?';
    var END_POINT_WIN_BID_LOGGER = END_POINT_HOST + 'wt?';
    var LOG_PRE_FIX = 'PubMatic-Analytics: ';
    var cache = {
      auctions: {}
    };
    var SUCCESS = 'success';
    var NO_BID = 'no-bid';
    var ERROR = 'error';
    var REQUEST_ERROR = 'request-error';
    var TIMEOUT_ERROR = 'timeout-error';
    var EMPTY_STRING = '';
    var MEDIA_TYPE_BANNER = 'banner';
    var CURRENCY_USD = 'USD';
    var BID_PRECISION = 2;
    // todo: input profileId and profileVersionId ; defaults to zero or one
    var DEFAULT_PUBLISHER_ID = 0;
    var DEFAULT_PROFILE_ID = 0;
    var DEFAULT_PROFILE_VERSION_ID = 0;
    var DEFAULT_ISIDENTITY_ONLY = 0;
    var enc = window.encodeURIComponent;
    var MEDIATYPE = {
      BANNER: 0,
      VIDEO: 1,
      NATIVE: 2
    };
    var PREFIX = 'PROFILE_AUCTION_INFO_';
    
    /// /////////// VARIABLES //////////////
    var publisherId = DEFAULT_PUBLISHER_ID; // int: mandatory
    var profileId = DEFAULT_PROFILE_ID; // int: optional
    var profileVersionId = DEFAULT_PROFILE_VERSION_ID; // int: optional
    var s2sBidders = [];
    var identityOnly = DEFAULT_ISIDENTITY_ONLY;
    
    /// /////////// HELPER FUNCTIONS //////////////
    
    function sizeToDimensions(size) {
      return {
        width: size.w || size[0],
        height: size.h || size[1]
      };
    }
    function validMediaType(type) {
      return {
        'banner': 1,
        'native': 1,
        'video': 1
      }.hasOwnProperty(type);
    }
    function formatSource(src) {
      if (typeof src === 'undefined') {
        src = 'client';
      } else if (src === 's2s') {
        src = 'server';
      }
      return src.toLowerCase();
    }
    function setMediaTypes(types, bid) {
      if (bid.mediaType && validMediaType(bid.mediaType)) {
        return [bid.mediaType];
      }
      if (Array.isArray(types)) {
        return types.filter(validMediaType);
      }
      if ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(types) === 'object') {
        if (!bid.sizes) {
          bid.dimensions = [];
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__._each)(types, function (type) {
            return bid.dimensions = bid.dimensions.concat(type.sizes.map(sizeToDimensions));
          });
        }
        return Object.keys(types).filter(validMediaType);
      }
      return [MEDIA_TYPE_BANNER];
    }
    function copyRequiredBidDetails(bid) {
      return (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.pick)(bid, ['bidder', 'bidderCode', 'adapterCode', 'bidId', 'status', function () {
        return NO_BID;
      },
      // default a bid to NO_BID until response is recieved or bid is timed out
      'finalSource as source', 'params', 'floorData', 'adUnit', function () {
        return (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.pick)(bid, ['adUnitCode', 'transactionId', 'sizes as dimensions', function (sizes) {
          return sizes && sizes.map(sizeToDimensions);
        }, 'mediaTypes', function (types) {
          return setMediaTypes(types, bid);
        }]);
      }]);
    }
    function setBidStatus(bid, args) {
      var _bid$error;
      if ((bid === null || bid === void 0 ? void 0 : bid.status) === ERROR && (bid === null || bid === void 0 ? void 0 : (_bid$error = bid.error) === null || _bid$error === void 0 ? void 0 : _bid$error.code) === TIMEOUT_ERROR) {
        return;
      }
      switch (args.getStatusCode()) {
        case _src_constants_json__WEBPACK_IMPORTED_MODULE_2__.STATUS.GOOD:
          bid.status = SUCCESS;
          delete bid.error; // it's possible for this to be set by a previous timeout
          break;
        case _src_constants_json__WEBPACK_IMPORTED_MODULE_2__.STATUS.NO_BID:
          bid.status = NO_BID;
          delete bid.error;
          break;
        default:
          bid.status = ERROR;
          bid.error = {
            code: REQUEST_ERROR
          };
      }
    }
    function parseBidResponse(bid) {
      return (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.pick)(bid, ['bidPriceUSD', function () {
        // todo: check whether currency cases are handled here
        if (typeof bid.currency === 'string' && bid.currency.toUpperCase() === CURRENCY_USD) {
          return window.parseFloat(Number(bid.cpm).toFixed(BID_PRECISION));
        }
        // use currency conversion function if present
        if (typeof bid.getCpmInNewCurrency === 'function') {
          return window.parseFloat(Number(bid.getCpmInNewCurrency(CURRENCY_USD)).toFixed(BID_PRECISION));
        }
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)(LOG_PRE_FIX + 'Could not determine the Net cpm in USD for the bid thus using bid.cpm', bid);
        return bid.cpm;
      }, 'bidGrossCpmUSD', function () {
        if (typeof bid.originalCurrency === 'string' && bid.originalCurrency.toUpperCase() === CURRENCY_USD) {
          return window.parseFloat(Number(bid.originalCpm).toFixed(BID_PRECISION));
        }
        // use currency conversion function if present
        if (typeof (0,_src_prebidGlobal_js__WEBPACK_IMPORTED_MODULE_3__.getGlobal)().convertCurrency === 'function') {
          return window.parseFloat(Number((0,_src_prebidGlobal_js__WEBPACK_IMPORTED_MODULE_3__.getGlobal)().convertCurrency(bid.originalCpm, bid.originalCurrency, CURRENCY_USD)).toFixed(BID_PRECISION));
        }
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)(LOG_PRE_FIX + 'Could not determine the Gross cpm in USD for the bid, thus using bid.originalCpm', bid);
        return bid.originalCpm;
      }, 'dealId', 'currency', 'cpm', function () {
        return window.parseFloat(Number(bid.cpm).toFixed(BID_PRECISION));
      }, 'originalCpm', function () {
        return window.parseFloat(Number(bid.originalCpm).toFixed(BID_PRECISION));
      }, 'originalCurrency', 'dealChannel', 'meta', 'status', 'error', 'bidId', 'mediaType', 'params', 'floorData', 'mi', 'regexPattern', function () {
        return bid.regexPattern || undefined;
      }, 'partnerImpId',
      // partner impression ID
      'prebidBidId', 'dimensions', function () {
        return (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.pick)(bid, ['width', 'height']);
      }]);
    }
    function getDomainFromUrl(url) {
      var a = window.document.createElement('a');
      a.href = url;
      return a.hostname;
    }
    function getDevicePlatform() {
      var deviceType = 3;
      try {
        var ua = navigator.userAgent;
        if (ua && (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.isStr)(ua) && ua.trim() != '') {
          ua = ua.toLowerCase().trim();
          var isMobileRegExp = new RegExp('(mobi|tablet|ios).*');
          if (ua.match(isMobileRegExp)) {
            deviceType = 2;
          } else {
            deviceType = 1;
          }
        }
      } catch (ex) {}
      return deviceType;
    }
    function getValueForKgpv(bid, adUnitId) {
      if (bid.params && (bid.params.regexPattern || bid.params.regex_pattern)) {
        return bid.params.regexPattern || bid.params.regex_pattern;
      } else if (bid.bidResponse && bid.bidResponse.regexPattern) {
        return bid.bidResponse.regexPattern;
      } else if (bid.params && bid.params.kgpv) {
        return getUpdatedKGPVForVideo(bid.params.kgpv, bid.bidResponse);
      } else {
        return adUnitId;
      }
    }
    function getUpdatedKGPVForVideo(kgpv, bidResponse) {
      if (bidResponse && bidResponse.mediaType && bidResponse.mediaType == 'video') {
        var videoKgpv = ['', '0x0'];
        var splitKgpv = kgpv.split('@');
        if (splitKgpv.length > 1) {
          if (splitKgpv.length == 2) {
            if (splitKgpv[1].indexOf(':') > -1) {
              var kgpvIndex = splitKgpv[1].split(':');
              videoKgpv[1] = videoKgpv[1] + ':' + kgpvIndex[1];
            }
            videoKgpv[0] = splitKgpv[0];
          }
          kgpv = videoKgpv.join('@');
        }
      }
      return kgpv;
    }
    function getAdapterNameForAlias(aliasName) {
      // This condition  is OpenWrap specific, not to contribute to Prebid
      if (window.PWT && (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFn)(window.PWT.getAdapterNameForAlias)) {
        return window.PWT.getAdapterNameForAlias(aliasName);
      }
      // Fallback mechanism which is conrtibuted to Prebid
      return _src_adapterManager_js__WEBPACK_IMPORTED_MODULE_4__["default"].aliasRegistry[aliasName] || aliasName;
    }
    function getAdDomain(bidResponse) {
      if (bidResponse.meta && bidResponse.meta.advertiserDomains && bidResponse.meta.advertiserDomains.length > 0) {
        var adomain = bidResponse.meta.advertiserDomains[0];
        if (adomain) {
          try {
            var hostname = new URL(adomain);
            return hostname.hostname.replace('www.', '');
          } catch (e) {
            (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)(LOG_PRE_FIX + 'Adomain URL (Not a proper URL):', adomain);
            return adomain.split('/')[0].replace('www.', '');
          }
        }
      }
    }
    function isObject(object) {
      return (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(object) === 'object' && object !== null;
    }
    ;
    function isEmptyObject(object) {
      return isObject(object) && Object.keys(object).length === 0;
    }
    ;
    
    /**
     * Prepare meta object to pass in logger call
     * @param {*} meta
     */
    function getMetadata(meta) {
      if (!meta || isEmptyObject(meta)) return;
      var metaObj = {};
      if (meta.networkId) metaObj.nwid = meta.networkId;
      if (meta.advertiserId) metaObj.adid = meta.advertiserId;
      if (meta.networkName) metaObj.nwnm = meta.networkName;
      if (meta.primaryCatId) metaObj.pcid = meta.primaryCatId;
      if (meta.advertiserName) metaObj.adnm = meta.advertiserName;
      if (meta.agencyId) metaObj.agid = meta.agencyId;
      if (meta.agencyName) metaObj.agnm = meta.agencyName;
      if (meta.brandId) metaObj.brid = meta.brandId;
      if (meta.brandName) metaObj.brnm = meta.brandName;
      if (meta.dchain) metaObj.dc = meta.dchain;
      if (meta.demandSource) metaObj.ds = meta.demandSource;
      if (meta.secondaryCatIds) metaObj.scids = meta.secondaryCatIds;
      if (isEmptyObject(metaObj)) return;
      return metaObj;
    }
    function gatherPartnerBidsForAdUnitForLogger(adUnit, adUnitId, highestBid) {
      highestBid = highestBid && highestBid.length > 0 ? highestBid[0] : null;
      return Object.keys(adUnit.bids).reduce(function (partnerBids, bidId) {
        adUnit.bids[bidId].forEach(function (bid) {
          var prebidBidId = bid.bidResponse && bid.bidResponse.prebidBidId;
          partnerBids.push({
            'pn': getAdapterNameForAlias(bid.adapterCode || bid.bidder),
            'bc': bid.bidderCode || bid.bidder,
            'bidid': prebidBidId || bid.bidId,
            'origbidid': bid.bidId,
            'db': bid.bidResponse ? 0 : 1,
            'kgpv': getValueForKgpv(bid, adUnitId),
            'kgpsv': bid.params && bid.params.kgpv ? getUpdatedKGPVForVideo(bid.params.kgpv, bid.bidResponse) : adUnitId,
            'psz': bid.bidResponse ? bid.bidResponse.dimensions.width + 'x' + bid.bidResponse.dimensions.height : '0x0',
            'eg': bid.bidResponse ? bid.bidResponse.bidGrossCpmUSD : 0,
            'en': bid.bidResponse ? bid.bidResponse.bidPriceUSD : 0,
            'di': bid.bidResponse ? bid.bidResponse.dealId || EMPTY_STRING : EMPTY_STRING,
            'dc': bid.bidResponse ? bid.bidResponse.dealChannel || EMPTY_STRING : EMPTY_STRING,
            'l1': bid.bidResponse ? bid.clientLatencyTimeMs : 0,
            'l2': 0,
            'adv': bid.bidResponse ? getAdDomain(bid.bidResponse) || undefined : undefined,
            'ss': s2sBidders.indexOf(bid.bidder) > -1 ? 1 : 0,
            't': bid.status == ERROR && bid.error.code == TIMEOUT_ERROR ? 1 : 0,
            'wb': highestBid && highestBid.adId === bid.adId ? 1 : 0,
            'mi': bid.bidResponse ? bid.bidResponse.mi : window.matchedimpressions && window.matchedimpressions[bid.bidder],
            'af': bid.bidResponse ? bid.bidResponse.mediaType || undefined : undefined,
            'ocpm': bid.bidResponse ? bid.bidResponse.originalCpm || 0 : 0,
            'ocry': bid.bidResponse ? bid.bidResponse.originalCurrency || CURRENCY_USD : CURRENCY_USD,
            'piid': bid.bidResponse ? bid.bidResponse.partnerImpId || EMPTY_STRING : EMPTY_STRING,
            'frv': s2sBidders.indexOf(bid.bidder) > -1 ? undefined : bid.bidResponse ? bid.bidResponse.floorData ? bid.bidResponse.floorData.floorRuleValue : undefined : undefined,
            'md': bid.bidResponse ? getMetadata(bid.bidResponse.meta) : undefined
          });
        });
        return partnerBids;
      }, []);
    }
    function getSizesForAdUnit(adUnit, adUnitId) {
      var bid = Object.values(adUnit.bids).filter(function (bid) {
        return !!bid.bidResponse && bid.bidResponse.mediaType === 'native';
      })[0];
      if (!!bid || bid === undefined && adUnit.dimensions.length === 0) {
        return ['1x1'];
      } else {
        return adUnit.dimensions.map(function (e) {
          return e[0] + 'x' + e[1];
        });
      }
    }
    function getAdUnitAdFormats(adUnit) {
      var af = adUnit ? Object.keys(adUnit.mediaTypes || {}).map(function (format) {
        return MEDIATYPE[format.toUpperCase()];
      }) : [];
      return af;
    }
    function getAdUnit(adUnits, adUnitId) {
      return adUnits.filter(function (adUnit) {
        return adUnit.divID && adUnit.divID == adUnitId || adUnit.code == adUnitId;
      })[0];
    }
    function getPSL(auctionId) {
      var latency = window.pbsLatency;
      var latencyValues = latency && latency[auctionId];
      // If we do not have latencyValues, means we are not using prebidServerBidAdapter i.e. auction end point
      // so for 2.5 endpoint we need to make sure that we are not passing this key as earlier.
      var pslTime = latencyValues ? 0 : undefined;
      if (latencyValues && latencyValues['startTime'] && latencyValues['endTime']) {
        pslTime = latencyValues['endTime'] - latencyValues['startTime'];
      }
      return pslTime;
    }
    function executeBidsLoggerCall(e, highestCpmBids) {
      var HOSTNAME = window.location.host;
      var storedObject = window.localStorage.getItem(PREFIX + HOSTNAME);
      var frequencyDepth = storedObject !== null ? JSON.parse(storedObject) : {};
      var auctionId = e.auctionId;
      var referrer = _src_config_js__WEBPACK_IMPORTED_MODULE_5__.config.getConfig('pageUrl') || cache.auctions[auctionId].referer || '';
      var auctionCache = cache.auctions[auctionId];
      var floorData = auctionCache.floorData;
      var outputObj = {
        s: []
      };
      var pixelURL = END_POINT_BID_LOGGER;
      if (!auctionCache) {
        return;
      }
      if (auctionCache.sent) {
        return;
      }
      pixelURL += 'pubid=' + publisherId;
      outputObj['pubid'] = '' + publisherId;
      outputObj['iid'] = '' + auctionId;
      outputObj['to'] = '' + auctionCache.timeout;
      outputObj['purl'] = referrer;
      outputObj['orig'] = getDomainFromUrl(referrer);
      outputObj['tst'] = Math.round(new window.Date().getTime() / 1000);
      outputObj['pid'] = '' + profileId;
      outputObj['pdvid'] = '' + profileVersionId;
      outputObj['psl'] = getPSL(auctionId);
      outputObj['dvc'] = {
        'plt': getDevicePlatform()
      };
      outputObj['bm'] = window.PWT && window.PWT.browserMapping;
      outputObj['ih'] = identityOnly;
      outputObj['tgid'] = function () {
        var testGroupId = parseInt(_src_config_js__WEBPACK_IMPORTED_MODULE_5__.config.getConfig('testGroupId') || 0);
        if (testGroupId <= 15 && testGroupId >= 0) {
          return testGroupId;
        }
        return 0;
      }();
      outputObj['tpv'] = frequencyDepth === null || frequencyDepth === void 0 ? void 0 : frequencyDepth.pageView;
      outputObj['trc'] = frequencyDepth === null || frequencyDepth === void 0 ? void 0 : frequencyDepth.slotCnt;
      outputObj['tbs'] = frequencyDepth === null || frequencyDepth === void 0 ? void 0 : frequencyDepth.bidServed;
      outputObj['tis'] = frequencyDepth === null || frequencyDepth === void 0 ? void 0 : frequencyDepth.impressionServed;
      outputObj['lip'] = frequencyDepth === null || frequencyDepth === void 0 ? void 0 : frequencyDepth.lip;
      if (floorData) {
        outputObj['fmv'] = floorData.floorRequestData ? floorData.floorRequestData.modelVersion || undefined : undefined;
        outputObj['ft'] = floorData.floorResponseData ? floorData.floorResponseData.enforcements.enforceJS == false ? 0 : 1 : undefined;
      }
      outputObj.s = Object.keys(auctionCache.adUnitCodes).reduce(function (slotsArray, adUnitId) {
        var _frequencyDepth$slotL, _frequencyDepth$slotL2, _frequencyDepth$slotL3, _frequencyDepth$slotL4, _frequencyDepth$slotL5, _frequencyDepth$slotL6, _frequencyDepth$viewe, _origAdUnit$pubmaticA;
        var adUnit = auctionCache.adUnitCodes[adUnitId];
        var origAdUnit = getAdUnit(auctionCache.origAdUnits, adUnitId) || {};
        var slotObject = {
          'sn': adUnitId,
          'au': origAdUnit.adUnitId || adUnitId,
          'mt': getAdUnitAdFormats(origAdUnit),
          'sz': getSizesForAdUnit(adUnit, adUnitId),
          'fskp': floorData ? floorData.floorRequestData ? floorData.floorRequestData.skipped == false ? 0 : 1 : undefined : undefined,
          'ps': gatherPartnerBidsForAdUnitForLogger(adUnit, adUnitId, highestCpmBids.filter(function (bid) {
            return bid.adUnitCode === adUnitId;
          })),
          'bs': frequencyDepth === null || frequencyDepth === void 0 ? void 0 : (_frequencyDepth$slotL = frequencyDepth.slotLevelFrquencyDepth) === null || _frequencyDepth$slotL === void 0 ? void 0 : (_frequencyDepth$slotL2 = _frequencyDepth$slotL[origAdUnit.adUnitId]) === null || _frequencyDepth$slotL2 === void 0 ? void 0 : _frequencyDepth$slotL2.bidServed,
          'is': frequencyDepth === null || frequencyDepth === void 0 ? void 0 : (_frequencyDepth$slotL3 = frequencyDepth.slotLevelFrquencyDepth) === null || _frequencyDepth$slotL3 === void 0 ? void 0 : (_frequencyDepth$slotL4 = _frequencyDepth$slotL3[origAdUnit.adUnitId]) === null || _frequencyDepth$slotL4 === void 0 ? void 0 : _frequencyDepth$slotL4.impressionServed,
          'rc': frequencyDepth === null || frequencyDepth === void 0 ? void 0 : (_frequencyDepth$slotL5 = frequencyDepth.slotLevelFrquencyDepth) === null || _frequencyDepth$slotL5 === void 0 ? void 0 : (_frequencyDepth$slotL6 = _frequencyDepth$slotL5[origAdUnit.adUnitId]) === null || _frequencyDepth$slotL6 === void 0 ? void 0 : _frequencyDepth$slotL6.slotCnt,
          'vw': frequencyDepth === null || frequencyDepth === void 0 ? void 0 : (_frequencyDepth$viewe = frequencyDepth.viewedSlot) === null || _frequencyDepth$viewe === void 0 ? void 0 : _frequencyDepth$viewe[origAdUnit.adUnitId],
          'rf': origAdUnit !== null && origAdUnit !== void 0 && (_origAdUnit$pubmaticA = origAdUnit.pubmaticAutoRefresh) !== null && _origAdUnit$pubmaticA !== void 0 && _origAdUnit$pubmaticA.isRefreshed ? 1 : 0
        };
        slotsArray.push(slotObject);
        return slotsArray;
      }, []);
      auctionCache.sent = true;
      (0,_src_ajax_js__WEBPACK_IMPORTED_MODULE_6__.ajax)(pixelURL, null, 'json=' + enc(JSON.stringify(outputObj)), {
        contentType: 'application/x-www-form-urlencoded',
        withCredentials: true,
        method: 'POST'
      });
    }
    function executeBidWonLoggerCall(auctionId, adUnitId) {
      var _origAdUnit$pubmaticA2;
      var winningBidId = cache.auctions[auctionId].adUnitCodes[adUnitId].bidWon;
      var winningBids = cache.auctions[auctionId].adUnitCodes[adUnitId].bids[winningBidId];
      var winningBid = winningBids[0];
      if (winningBids.length > 1) {
        winningBid = winningBids.filter(function (bid) {
          return bid.adId === cache.auctions[auctionId].adUnitCodes[adUnitId].bidWonAdId;
        })[0];
      }
      var adapterName = getAdapterNameForAlias(winningBid.adapterCode || winningBid.bidder);
      var generatedBidId = winningBid.bidResponse && winningBid.bidResponse.prebidBidId;
      var origAdUnit = getAdUnit(cache.auctions[auctionId].origAdUnits, adUnitId);
      var origAdUnitId = origAdUnit.adUnitId || adUnitId;
      var pixelURL = END_POINT_WIN_BID_LOGGER;
      pixelURL += 'pubid=' + publisherId;
      pixelURL += '&purl=' + enc(_src_config_js__WEBPACK_IMPORTED_MODULE_5__.config.getConfig('pageUrl') || cache.auctions[auctionId].referer || '');
      pixelURL += '&tst=' + Math.round(new window.Date().getTime() / 1000);
      pixelURL += '&iid=' + enc(auctionId);
      pixelURL += '&bidid=' + (generatedBidId ? enc(generatedBidId) : enc(winningBidId));
      pixelURL += '&origbidid=' + enc(winningBidId);
      pixelURL += '&pid=' + enc(profileId);
      pixelURL += '&pdvid=' + enc(profileVersionId);
      pixelURL += '&slot=' + enc(adUnitId);
      pixelURL += '&au=' + enc(origAdUnitId);
      pixelURL += '&pn=' + enc(adapterName);
      pixelURL += '&bc=' + enc(winningBid.bidderCode || winningBid.bidder);
      pixelURL += '&en=' + enc(winningBid.bidResponse.bidPriceUSD);
      pixelURL += '&eg=' + enc(winningBid.bidResponse.bidGrossCpmUSD);
      pixelURL += '&kgpv=' + enc(getValueForKgpv(winningBid, adUnitId));
      pixelURL += '&piid=' + enc(winningBid.bidResponse.partnerImpId || EMPTY_STRING);
      pixelURL += '&rf=' + enc(origAdUnit !== null && origAdUnit !== void 0 && (_origAdUnit$pubmaticA2 = origAdUnit.pubmaticAutoRefresh) !== null && _origAdUnit$pubmaticA2 !== void 0 && _origAdUnit$pubmaticA2.isRefreshed ? 1 : 0);
      (0,_src_ajax_js__WEBPACK_IMPORTED_MODULE_6__.ajax)(pixelURL, null, null, {
        contentType: 'application/x-www-form-urlencoded',
        withCredentials: true,
        method: 'GET'
      });
    }
    /// /////////// ADAPTER EVENT HANDLER FUNCTIONS //////////////
    
    // function auctionInitHandler(args) {
    (0,_src_prebidGlobal_js__WEBPACK_IMPORTED_MODULE_3__.getGlobal)().onEvent(_src_constants_json__WEBPACK_IMPORTED_MODULE_2__.EVENTS.AUCTION_INIT, function (args) {
      s2sBidders = function () {
        var s2sConf = _src_config_js__WEBPACK_IMPORTED_MODULE_5__.config.getConfig('s2sConfig');
        return s2sConf && (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(s2sConf.bidders) ? s2sConf.bidders : [];
      }();
      var cacheEntry = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.pick)(args, ['timestamp', 'timeout', 'bidderDonePendingCount', function () {
        return args.bidderRequests.length;
      }]);
      cacheEntry.adUnitCodes = {};
      cacheEntry.floorData = {};
      cacheEntry.origAdUnits = args.adUnits;
      cacheEntry.referer = args.bidderRequests[0].refererInfo.topmostLocation;
      cache.auctions[args.auctionId] = cacheEntry;
    });
    
    // function bidRequestedHandler(args) {
    (0,_src_prebidGlobal_js__WEBPACK_IMPORTED_MODULE_3__.getGlobal)().onEvent(_src_constants_json__WEBPACK_IMPORTED_MODULE_2__.EVENTS.BID_REQUESTED, function (args) {
      args.bids.forEach(function (bid) {
        if (!cache.auctions[args.auctionId].adUnitCodes.hasOwnProperty(bid.adUnitCode)) {
          cache.auctions[args.auctionId].adUnitCodes[bid.adUnitCode] = {
            bids: {},
            bidWon: false,
            dimensions: bid.sizes
          };
        }
        cache.auctions[args.auctionId].adUnitCodes[bid.adUnitCode].bids[bid.bidId] = [copyRequiredBidDetails(bid)];
        if (bid.floorData) {
          cache.auctions[args.auctionId].floorData['floorRequestData'] = bid.floorData;
        }
      });
    });
    
    // function bidResponseHandler(args) {
    (0,_src_prebidGlobal_js__WEBPACK_IMPORTED_MODULE_3__.getGlobal)().onEvent(_src_constants_json__WEBPACK_IMPORTED_MODULE_2__.EVENTS.BID_RESPONSE, function (args) {
      var bid = cache.auctions[args.auctionId].adUnitCodes[args.adUnitCode].bids[args.requestId][0];
      if (!bid) {
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.logError)(LOG_PRE_FIX + 'Could not find associated bid request for bid response with requestId: ', args.requestId);
        return;
      }
      if (bid.bidder && args.bidderCode && bid.bidder !== args.bidderCode || bid.bidder === args.bidderCode && bid.status === SUCCESS) {
        var _bid, _bid$bidResponse;
        if (bid.params) {
          args.params = bid.params;
        }
        if ((_bid = bid) !== null && _bid !== void 0 && (_bid$bidResponse = _bid.bidResponse) !== null && _bid$bidResponse !== void 0 && _bid$bidResponse.partnerImpId) {
          args.partnerImpId = bid.bidResponse.partnerImpId;
        }
        bid = copyRequiredBidDetails(args);
        bid.bidId = args.requestId;
        cache.auctions[args.auctionId].adUnitCodes[args.adUnitCode].bids[args.requestId].push(bid);
      }
      if (args.floorData) {
        cache.auctions[args.auctionId].floorData['floorResponseData'] = args.floorData;
      }
      bid.adId = args.adId;
      bid.source = formatSource(bid.source || args.source);
      setBidStatus(bid, args);
      bid.clientLatencyTimeMs = Date.now() - cache.auctions[args.auctionId].timestamp;
      bid.bidResponse = parseBidResponse(args);
    });
    
    // function bidderDoneHandler(args) {
    (0,_src_prebidGlobal_js__WEBPACK_IMPORTED_MODULE_3__.getGlobal)().onEvent(_src_constants_json__WEBPACK_IMPORTED_MODULE_2__.EVENTS.BIDDER_DONE, function (args) {
      cache.auctions[args.auctionId].bidderDonePendingCount--;
      args.bids.forEach(function (bid) {
        var cachedBid = cache.auctions[bid.auctionId].adUnitCodes[bid.adUnitCode].bids[bid.bidId || bid.requestId];
        if (typeof bid.serverResponseTimeMs !== 'undefined') {
          cachedBid.serverLatencyTimeMs = bid.serverResponseTimeMs;
        }
        if (!cachedBid.status) {
          cachedBid.status = NO_BID;
        }
        if (!cachedBid.clientLatencyTimeMs) {
          cachedBid.clientLatencyTimeMs = Date.now() - cache.auctions[bid.auctionId].timestamp;
        }
      });
    });
    
    // function bidWonHandler(args) {
    (0,_src_prebidGlobal_js__WEBPACK_IMPORTED_MODULE_3__.getGlobal)().onEvent(_src_constants_json__WEBPACK_IMPORTED_MODULE_2__.EVENTS.BID_WON, function (args) {
      var auctionCache = cache.auctions[args.auctionId];
      auctionCache.adUnitCodes[args.adUnitCode].bidWon = args.requestId;
      auctionCache.adUnitCodes[args.adUnitCode].bidWonAdId = args.adId;
      executeBidWonLoggerCall(args.auctionId, args.adUnitCode);
    });
    (0,_src_prebidGlobal_js__WEBPACK_IMPORTED_MODULE_3__.getGlobal)().onEvent(_src_constants_json__WEBPACK_IMPORTED_MODULE_2__.EVENTS.AUCTION_END, function (args) {
      var _this = this;
      // if for the given auction bidderDonePendingCount == 0 then execute logger call sooners
      var highestCpmBids = (0,_src_prebidGlobal_js__WEBPACK_IMPORTED_MODULE_3__.getGlobal)().getHighestCpmBids() || [];
      setTimeout(function () {
        executeBidsLoggerCall.call(_this, args, highestCpmBids);
      }, cache.auctions[args.auctionId].bidderDonePendingCount === 0 ? 500 : SEND_TIMEOUT);
    });
    
    // function bidTimeoutHandler(args) {
    (0,_src_prebidGlobal_js__WEBPACK_IMPORTED_MODULE_3__.getGlobal)().onEvent(_src_constants_json__WEBPACK_IMPORTED_MODULE_2__.EVENTS.BID_TIMEOUT, function (args) {
      // db = 1 and t = 1 means bidder did NOT respond with a bid but we got a timeout notification
      // db = 0 and t = 1 means bidder did  respond with a bid but post timeout
      args.forEach(function (badBid) {
        var auctionCache = cache.auctions[badBid.auctionId];
        var bid = auctionCache.adUnitCodes[badBid.adUnitCode].bids[badBid.bidId || badBid.requestId][0];
        if (bid) {
          bid.status = ERROR;
          bid.error = {
            code: TIMEOUT_ERROR
          };
        } else {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.logWarn)(LOG_PRE_FIX + 'bid not found');
        }
      });
    });
    
    /// /////////// ADAPTER DEFINITION //////////////
    
    var baseAdapter = (0,_libraries_analyticsAdapter_AnalyticsAdapter_js__WEBPACK_IMPORTED_MODULE_7__["default"])({
      analyticsType: 'endpoint'
    });
    var pubmaticAdapter = Object.assign({}, baseAdapter, {
      enableAnalytics: function enableAnalytics() {
        var conf = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var error = false;
        if ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(conf.options) === 'object') {
          if (conf.options.publisherId) {
            publisherId = Number(conf.options.publisherId);
          }
          profileId = Number(conf.options.profileId) || DEFAULT_PROFILE_ID;
          profileVersionId = Number(conf.options.profileVersionId) || DEFAULT_PROFILE_VERSION_ID;
          identityOnly = Number(conf.options.identityOnly) || DEFAULT_ISIDENTITY_ONLY;
        } else {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.logError)(LOG_PRE_FIX + 'Config not found.');
          error = true;
        }
        if (!publisherId) {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.logError)(LOG_PRE_FIX + 'Missing publisherId(Number).');
          error = true;
        }
        if (error) {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.logError)(LOG_PRE_FIX + 'Not collecting data due to error(s).');
        } else {
          baseAdapter.enableAnalytics.call(this, conf);
        }
      },
      disableAnalytics: function disableAnalytics() {
        publisherId = DEFAULT_PUBLISHER_ID;
        profileId = DEFAULT_PROFILE_ID;
        profileVersionId = DEFAULT_PROFILE_VERSION_ID;
        s2sBidders = [];
        baseAdapter.disableAnalytics.apply(this, arguments);
      },
      track: function track(_ref) {
        var eventType = _ref.eventType,
          args = _ref.args;
        switch (eventType) {
          case _src_constants_json__WEBPACK_IMPORTED_MODULE_2__.EVENTS.AUCTION_INIT:
            // auctionInitHandler(args);
            break;
          case _src_constants_json__WEBPACK_IMPORTED_MODULE_2__.EVENTS.BID_REQUESTED:
            // bidRequestedHandler(args);
            break;
          case _src_constants_json__WEBPACK_IMPORTED_MODULE_2__.EVENTS.BID_RESPONSE:
            // bidResponseHandler(args);
            break;
          case _src_constants_json__WEBPACK_IMPORTED_MODULE_2__.EVENTS.BIDDER_DONE:
            // bidderDoneHandler(args);
            break;
          case _src_constants_json__WEBPACK_IMPORTED_MODULE_2__.EVENTS.BID_WON:
            // bidWonHandler(args);
            break;
          case _src_constants_json__WEBPACK_IMPORTED_MODULE_2__.EVENTS.AUCTION_END:
            // auctionEndHandler(args);
            break;
          case _src_constants_json__WEBPACK_IMPORTED_MODULE_2__.EVENTS.BID_TIMEOUT:
            // bidTimeoutHandler(args);
            break;
        }
      }
    });
    
    /// /////////// ADAPTER REGISTRATION //////////////
    
    _src_adapterManager_js__WEBPACK_IMPORTED_MODULE_4__["default"].registerAnalyticsAdapter({
      adapter: pubmaticAdapter,
      code: ADAPTER_CODE
    });
    
    // export default pubmaticAdapter;
    
    window.owpbjs.installedModules.push('pubmaticAnalyticsAdapter');
    
    /***/ })
    
    },
    /******/ function(__webpack_require__) { // webpackRuntimeModules
    /******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
    /******/ __webpack_require__.O(0, ["analyticsAdapter","fpd"], function() { return __webpack_exec__("./modules/pubmaticAnalyticsAdapter.js"); });
    /******/ var __webpack_exports__ = __webpack_require__.O();
    /******/ }
    ]);
    
    "use strict";
    (self["owpbjsChunk"] = self["owpbjsChunk"] || []).push([["pubmaticBidAdapter"],{
    
    /***/ "./modules/pubmaticBidAdapter.js":
    /*!***************************************!*\
      !*** ./modules/pubmaticBidAdapter.js ***!
      \***************************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    /* unused harmony exports _getDomainFromURL, checkVideoPlacement, assignDealTier, prepareMetaObject, spec */
    /* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
    /* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");
    /* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
    /* harmony import */ var _src_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../src/utils.js */ "./src/utils.js");
    /* harmony import */ var _src_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../src/utils.js */ "./node_modules/dlv/index.js");
    /* harmony import */ var _src_utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../src/utils.js */ "./node_modules/dset/dist/index.mjs");
    /* harmony import */ var _src_adapters_bidderFactory_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../src/adapters/bidderFactory.js */ "./src/adapters/bidderFactory.js");
    /* harmony import */ var _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../src/mediaTypes.js */ "./src/mediaTypes.js");
    /* harmony import */ var _src_config_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../src/config.js */ "./src/config.js");
    /* harmony import */ var _src_Renderer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../src/Renderer.js */ "./src/Renderer.js");
    /* harmony import */ var _src_bidderSettings_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../src/bidderSettings.js */ "./src/bidderSettings.js");
    /* harmony import */ var _src_native_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../src/native.js */ "./src/native.js");
    
    
    
    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
    
    
    
    
    
    
    
    var BIDDER_CODE = 'pubmatic';
    var LOG_WARN_PREFIX = 'PubMatic: ';
    var ENDPOINT = 'https://hbopenbid.pubmatic.com/translator';
    var USER_SYNC_URL_IFRAME = 'https://ads.pubmatic.com/AdServer/js/user_sync.html?kdntuid=1&p=';
    var USER_SYNC_URL_IMAGE = 'https://image8.pubmatic.com/AdServer/ImgSync?p=';
    var DEFAULT_CURRENCY = 'USD';
    var AUCTION_TYPE = 1;
    var PUBMATIC_ALIAS = 'pubmatic2';
    var UNDEFINED = undefined;
    var DEFAULT_WIDTH = 0;
    var DEFAULT_HEIGHT = 0;
    var PREBID_NATIVE_HELP_LINK = 'http://prebid.org/dev-docs/show-native-ads.html';
    var PUBLICATION = 'pubmatic'; // Your publication on Blue Billywig, potentially with environment (e.g. publication.bbvms.com or publication.test.bbvms.com)
    var RENDERER_URL = 'https://pubmatic.bbvms.com/r/'.concat('$RENDERER', '.js'); // URL of the renderer application
    var MSG_VIDEO_PLACEMENT_MISSING = 'Video.Placement param missing';
    var CUSTOM_PARAMS = {
      'kadpageurl': '',
      // Custom page url
      'gender': '',
      // User gender
      'yob': '',
      // User year of birth
      'lat': '',
      // User location - Latitude
      'lon': '',
      // User Location - Longitude
      'wiid': '',
      // OpenWrap Wrapper Impression ID
      'profId': '',
      // OpenWrap Legacy: Profile ID
      'verId': '' // OpenWrap Legacy: version ID
    };
    
    var DATA_TYPES = {
      'NUMBER': 'number',
      'STRING': 'string',
      'BOOLEAN': 'boolean',
      'ARRAY': 'array',
      'OBJECT': 'object'
    };
    var VIDEO_CUSTOM_PARAMS = {
      'mimes': DATA_TYPES.ARRAY,
      'minduration': DATA_TYPES.NUMBER,
      'maxduration': DATA_TYPES.NUMBER,
      'startdelay': DATA_TYPES.NUMBER,
      'playbackmethod': DATA_TYPES.ARRAY,
      'api': DATA_TYPES.ARRAY,
      'protocols': DATA_TYPES.ARRAY,
      'w': DATA_TYPES.NUMBER,
      'h': DATA_TYPES.NUMBER,
      'battr': DATA_TYPES.ARRAY,
      'linearity': DATA_TYPES.NUMBER,
      'placement': DATA_TYPES.NUMBER,
      'plcmt': DATA_TYPES.NUMBER,
      'minbitrate': DATA_TYPES.NUMBER,
      'maxbitrate': DATA_TYPES.NUMBER,
      'skip': DATA_TYPES.NUMBER
    };
    var NATIVE_ASSETS = {
      'TITLE': {
        ID: 1,
        KEY: 'title',
        TYPE: 0
      },
      'IMAGE': {
        ID: 2,
        KEY: 'image',
        TYPE: 0
      },
      'ICON': {
        ID: 3,
        KEY: 'icon',
        TYPE: 0
      },
      'SPONSOREDBY': {
        ID: 4,
        KEY: 'sponsoredBy',
        TYPE: 1
      },
      // please note that type of SPONSORED is also 1
      'BODY': {
        ID: 5,
        KEY: 'body',
        TYPE: 2
      },
      // please note that type of DESC is also set to 2
      'CLICKURL': {
        ID: 6,
        KEY: 'clickUrl',
        TYPE: 0
      },
      'VIDEO': {
        ID: 7,
        KEY: 'video',
        TYPE: 0
      },
      'EXT': {
        ID: 8,
        KEY: 'ext',
        TYPE: 0
      },
      'DATA': {
        ID: 9,
        KEY: 'data',
        TYPE: 0
      },
      'LOGO': {
        ID: 10,
        KEY: 'logo',
        TYPE: 0
      },
      'SPONSORED': {
        ID: 11,
        KEY: 'sponsored',
        TYPE: 1
      },
      // please note that type of SPONSOREDBY is also set to 1
      'DESC': {
        ID: 12,
        KEY: 'data',
        TYPE: 2
      },
      // please note that type of BODY is also set to 2
      'RATING': {
        ID: 13,
        KEY: 'rating',
        TYPE: 3
      },
      'LIKES': {
        ID: 14,
        KEY: 'likes',
        TYPE: 4
      },
      'DOWNLOADS': {
        ID: 15,
        KEY: 'downloads',
        TYPE: 5
      },
      'PRICE': {
        ID: 16,
        KEY: 'price',
        TYPE: 6
      },
      'SALEPRICE': {
        ID: 17,
        KEY: 'saleprice',
        TYPE: 7
      },
      'PHONE': {
        ID: 18,
        KEY: 'phone',
        TYPE: 8
      },
      'ADDRESS': {
        ID: 19,
        KEY: 'address',
        TYPE: 9
      },
      'DESC2': {
        ID: 20,
        KEY: 'desc2',
        TYPE: 10
      },
      'DISPLAYURL': {
        ID: 21,
        KEY: 'displayurl',
        TYPE: 11
      },
      'CTA': {
        ID: 22,
        KEY: 'cta',
        TYPE: 12
      }
    };
    var NATIVE_ASSET_IMAGE_TYPE = {
      'ICON': 1,
      'LOGO': 2,
      'IMAGE': 3
    };
    var MEDIATYPE = {
      0: _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.BANNER,
      1: _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.VIDEO,
      2: _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.NATIVE
    };
    
    // check if title, image can be added with mandatory field default values
    var NATIVE_MINIMUM_REQUIRED_IMAGE_ASSETS = [{
      id: NATIVE_ASSETS.SPONSOREDBY.ID,
      required: true,
      data: {
        type: 1
      }
    }, {
      id: NATIVE_ASSETS.TITLE.ID,
      required: true
    }, {
      id: NATIVE_ASSETS.IMAGE.ID,
      required: true
    }];
    var NET_REVENUE = true;
    var dealChannelValues = {
      1: 'PMP',
      5: 'PREF',
      6: 'PMPG'
    };
    
    // BB stands for Blue BillyWig
    var BB_RENDERER = {
      bootstrapPlayer: function bootstrapPlayer(bid) {
        var config = {
          code: bid.adUnitCode
        };
        if (bid.vastXml) config.vastXml = bid.vastXml;else if (bid.vastUrl) config.vastUrl = bid.vastUrl;
        if (!bid.vastXml && !bid.vastUrl) {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)("".concat(LOG_WARN_PREFIX, ": No vastXml or vastUrl on bid, bailing..."));
          return;
        }
        var rendererId = BB_RENDERER.getRendererId(PUBLICATION, bid.rendererCode);
        var ele = document.getElementById(bid.adUnitCode); // NB convention
    
        var renderer;
        for (var rendererIndex = 0; rendererIndex < window.bluebillywig.renderers.length; rendererIndex++) {
          if (window.bluebillywig.renderers[rendererIndex]._id === rendererId) {
            renderer = window.bluebillywig.renderers[rendererIndex];
            break;
          }
        }
        if (renderer) renderer.bootstrap(config, ele);else (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)("".concat(LOG_WARN_PREFIX, ": Couldn't find a renderer with ").concat(rendererId));
      },
      newRenderer: function newRenderer(rendererCode, adUnitCode) {
        var rendererUrl = RENDERER_URL.replace('$RENDERER', rendererCode);
        var renderer = _src_Renderer_js__WEBPACK_IMPORTED_MODULE_3__.Renderer.install({
          url: rendererUrl,
          loaded: false,
          adUnitCode: adUnitCode
        });
        try {
          renderer.setRender(BB_RENDERER.outstreamRender);
        } catch (err) {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)("".concat(LOG_WARN_PREFIX, ": Error tying to setRender on renderer"), err);
        }
        return renderer;
      },
      outstreamRender: function outstreamRender(bid) {
        bid.renderer.push(function () {
          BB_RENDERER.bootstrapPlayer(bid);
        });
      },
      getRendererId: function getRendererId(pub, renderer) {
        return "".concat(pub, "-").concat(renderer); // NB convention!
      }
    };
    
    var publisherId = 0;
    var isInvalidNativeRequest = false;
    var NATIVE_ASSET_ID_TO_KEY_MAP = {};
    var NATIVE_ASSET_KEY_TO_ASSET_MAP = {};
    var biddersList = ['pubmatic'];
    var allBiddersList = ['all'];
    var vsgDomain = window.location.hostname;
    var getAndParseFromLocalStorage = function getAndParseFromLocalStorage(key) {
      return JSON.parse(window.localStorage.getItem(key));
    };
    var vsgObj = (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])({}, vsgDomain, '');
    var removeViewTimeForZeroValue = function removeViewTimeForZeroValue(obj) {
      // Deleteing this field as it is only required to calculate totalViewtime and no need to send it to translator.
      delete obj.lastViewStarted;
      // Deleteing totalTimeView incase value is less than 1 sec.
      if (obj.totalViewTime == 0) {
        delete obj.totalViewTime;
      }
    };
    
    // loading NATIVE_ASSET_ID_TO_KEY_MAP
    (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__._each)(NATIVE_ASSETS, function (anAsset) {
      NATIVE_ASSET_ID_TO_KEY_MAP[anAsset.ID] = anAsset.KEY;
    });
    // loading NATIVE_ASSET_KEY_TO_ASSET_MAP
    (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__._each)(NATIVE_ASSETS, function (anAsset) {
      NATIVE_ASSET_KEY_TO_ASSET_MAP[anAsset.KEY] = anAsset;
    });
    function _getDomainFromURL(url) {
      var anchor = document.createElement('a');
      anchor.href = url;
      return anchor.hostname;
    }
    function _parseSlotParam(paramName, paramValue) {
      if (!(0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isStr)(paramValue)) {
        paramValue && (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)(LOG_WARN_PREFIX + 'Ignoring param key: ' + paramName + ', expects string-value, found ' + (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_4__["default"])(paramValue));
        return UNDEFINED;
      }
      switch (paramName) {
        case 'pmzoneid':
          return paramValue.split(',').slice(0, 50).map(function (id) {
            return id.trim();
          }).join();
        case 'kadfloor':
          return parseFloat(paramValue) || UNDEFINED;
        case 'lat':
          return parseFloat(paramValue) || UNDEFINED;
        case 'lon':
          return parseFloat(paramValue) || UNDEFINED;
        case 'yob':
          return parseInt(paramValue) || UNDEFINED;
        default:
          return paramValue;
      }
    }
    function _cleanSlot(slotName) {
      if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isStr)(slotName)) {
        return slotName.replace(/^\s+/g, '').replace(/\s+$/g, '');
      }
      if (slotName) {
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)(BIDDER_CODE + ': adSlot must be a string. Ignoring adSlot');
      }
      return '';
    }
    function _parseAdSlot(bid) {
      bid.params.adUnit = '';
      bid.params.adUnitIndex = '0';
      bid.params.width = 0;
      bid.params.height = 0;
      bid.params.adSlot = _cleanSlot(bid.params.adSlot);
      var slot = bid.params.adSlot;
      var splits = slot.split(':');
      slot = splits[0];
      if (splits.length == 2) {
        bid.params.adUnitIndex = splits[1];
      }
      // check if size is mentioned in sizes array. in that case do not check for @ in adslot
      splits = slot.split('@');
      bid.params.adUnit = splits[0];
      if (splits.length > 1) {
        // i.e size is specified in adslot, so consider that and ignore sizes array
        splits = splits.length == 2 ? splits[1].split('x') : splits.length == 3 ? splits[2].split('x') : [];
        if (splits.length != 2) {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)(LOG_WARN_PREFIX + 'AdSlot Error: adSlot not in required format');
          return;
        }
        bid.params.width = parseInt(splits[0], 10);
        bid.params.height = parseInt(splits[1], 10);
      }
      // Case : if Size is present in ad slot as well as in mediaTypes then ???
      if (bid.hasOwnProperty('mediaTypes') && bid.mediaTypes.hasOwnProperty(_src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.BANNER) && bid.mediaTypes.banner.hasOwnProperty('sizes')) {
        var i = 0;
        var sizeArray = [];
        for (; i < bid.mediaTypes.banner.sizes.length; i++) {
          if (bid.mediaTypes.banner.sizes[i].length === 2) {
            // sizes[i].length will not be 2 in case where size is set as fluid, we want to skip that entry
            sizeArray.push(bid.mediaTypes.banner.sizes[i]);
          }
        }
        bid.mediaTypes.banner.sizes = sizeArray;
        if (bid.mediaTypes.banner.sizes.length >= 1) {
          // set the first size in sizes array in bid.params.width and bid.params.height. These will be sent as primary size.
          // The rest of the sizes will be sent in format array.
          if (!bid.params.width && !bid.params.height) {
            bid.params.width = bid.mediaTypes.banner.sizes[0][0];
            bid.params.height = bid.mediaTypes.banner.sizes[0][1];
            bid.mediaTypes.banner.sizes = bid.mediaTypes.banner.sizes.splice(1, bid.mediaTypes.banner.sizes.length - 1);
          } else if (bid.params.width == bid.mediaTypes.banner.sizes[0][0] && bid.params.height == bid.mediaTypes.banner.sizes[0][1]) {
            bid.mediaTypes.banner.sizes = bid.mediaTypes.banner.sizes.splice(1, bid.mediaTypes.banner.sizes.length - 1);
          }
        }
      }
    }
    function _initConf(refererInfo) {
      return {
        // TODO: do the fallbacks make sense here?
        pageURL: (refererInfo === null || refererInfo === void 0 ? void 0 : refererInfo.page) || window.location.href,
        refURL: (refererInfo === null || refererInfo === void 0 ? void 0 : refererInfo.ref) || window.document.referrer
      };
    }
    function _handleCustomParams(params, conf) {
      if (!conf.kadpageurl) {
        conf.kadpageurl = conf.pageURL;
      }
      var key, value, entry;
      for (key in CUSTOM_PARAMS) {
        if (CUSTOM_PARAMS.hasOwnProperty(key)) {
          value = params[key];
          if (value) {
            entry = CUSTOM_PARAMS[key];
            if ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_4__["default"])(entry) === 'object') {
              // will be used in future when we want to process a custom param before using
              // 'keyname': {f: function() {}}
              value = entry.f(value, conf);
            }
            if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isStr)(value)) {
              conf[key] = value;
            } else {
              (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)(LOG_WARN_PREFIX + 'Ignoring param : ' + key + ' with value : ' + CUSTOM_PARAMS[key] + ', expects string-value, found ' + (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_4__["default"])(value));
            }
          }
        }
      }
      return conf;
    }
    function _createOrtbTemplate(conf) {
      return {
        id: '' + new Date().getTime(),
        at: AUCTION_TYPE,
        cur: [DEFAULT_CURRENCY],
        imp: [],
        site: {
          page: conf.pageURL,
          ref: conf.refURL,
          publisher: {}
        },
        device: {
          ua: navigator.userAgent,
          js: 1,
          dnt: navigator.doNotTrack == 'yes' || navigator.doNotTrack == '1' || navigator.msDoNotTrack == '1' ? 1 : 0,
          h: screen.height,
          w: screen.width,
          language: navigator.language
        },
        user: {},
        ext: {}
      };
    }
    function _checkParamDataType(key, value, datatype) {
      var errMsg = 'Ignoring param key: ' + key + ', expects ' + datatype + ', found ' + (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_4__["default"])(value);
      var functionToExecute;
      switch (datatype) {
        case DATA_TYPES.BOOLEAN:
          functionToExecute = _src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isBoolean;
          break;
        case DATA_TYPES.NUMBER:
          functionToExecute = _src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isNumber;
          break;
        case DATA_TYPES.STRING:
          functionToExecute = _src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isStr;
          break;
        case DATA_TYPES.ARRAY:
          functionToExecute = _src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isArray;
          break;
      }
      if (functionToExecute(value)) {
        return value;
      }
      (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)(LOG_WARN_PREFIX + errMsg);
      return UNDEFINED;
    }
    function _commonNativeRequestObject(nativeAsset, params) {
      var key = nativeAsset.KEY;
      return {
        id: nativeAsset.ID,
        required: params[key].required ? 1 : 0,
        data: {
          type: nativeAsset.TYPE,
          len: params[key].len,
          ext: params[key].ext
        }
      };
    }
    function _createNativeRequest(params) {
      var nativeRequestObject = {
        assets: []
      };
      for (var key in params) {
        if (params.hasOwnProperty(key)) {
          var assetObj = {};
          if (!(nativeRequestObject.assets && nativeRequestObject.assets.length > 0 && nativeRequestObject.assets.hasOwnProperty(key))) {
            switch (key) {
              case NATIVE_ASSETS.TITLE.KEY:
                assetObj = {
                  id: NATIVE_ASSETS.TITLE.ID,
                  required: params[key].required ? 1 : 0,
                  title: {
                    len: params[key].len || params[key].length,
                    ext: params[key].ext
                  }
                };
                break;
              case NATIVE_ASSETS.IMAGE.KEY:
                assetObj = {
                  id: NATIVE_ASSETS.IMAGE.ID,
                  required: params[key].required ? 1 : 0,
                  img: {
                    type: NATIVE_ASSET_IMAGE_TYPE.IMAGE,
                    w: params[key].w || params[key].width || (params[key].sizes ? params[key].sizes[0] : UNDEFINED),
                    h: params[key].h || params[key].height || (params[key].sizes ? params[key].sizes[1] : UNDEFINED),
                    wmin: params[key].wmin || params[key].minimumWidth || (params[key].minsizes ? params[key].minsizes[0] : UNDEFINED),
                    hmin: params[key].hmin || params[key].minimumHeight || (params[key].minsizes ? params[key].minsizes[1] : UNDEFINED),
                    mimes: params[key].mimes,
                    ext: params[key].ext
                  }
                };
                break;
              case NATIVE_ASSETS.ICON.KEY:
                assetObj = {
                  id: NATIVE_ASSETS.ICON.ID,
                  required: params[key].required ? 1 : 0,
                  img: {
                    type: NATIVE_ASSET_IMAGE_TYPE.ICON,
                    w: params[key].w || params[key].width || (params[key].sizes ? params[key].sizes[0] : UNDEFINED),
                    h: params[key].h || params[key].height || (params[key].sizes ? params[key].sizes[1] : UNDEFINED),
                    ext: params[key].ext
                  }
                };
                break;
              case NATIVE_ASSETS.VIDEO.KEY:
                assetObj = {
                  id: NATIVE_ASSETS.VIDEO.ID,
                  required: params[key].required ? 1 : 0,
                  video: {
                    minduration: params[key].minduration,
                    maxduration: params[key].maxduration,
                    protocols: params[key].protocols,
                    mimes: params[key].mimes,
                    ext: params[key].ext
                  }
                };
                break;
              case NATIVE_ASSETS.EXT.KEY:
                assetObj = {
                  id: NATIVE_ASSETS.EXT.ID,
                  required: params[key].required ? 1 : 0
                };
                break;
              case NATIVE_ASSETS.LOGO.KEY:
                assetObj = {
                  id: NATIVE_ASSETS.LOGO.ID,
                  required: params[key].required ? 1 : 0,
                  img: {
                    type: NATIVE_ASSET_IMAGE_TYPE.LOGO,
                    w: params[key].w || params[key].width || (params[key].sizes ? params[key].sizes[0] : UNDEFINED),
                    h: params[key].h || params[key].height || (params[key].sizes ? params[key].sizes[1] : UNDEFINED),
                    ext: params[key].ext
                  }
                };
                break;
              case NATIVE_ASSETS.SPONSOREDBY.KEY:
              case NATIVE_ASSETS.BODY.KEY:
              case NATIVE_ASSETS.RATING.KEY:
              case NATIVE_ASSETS.LIKES.KEY:
              case NATIVE_ASSETS.DOWNLOADS.KEY:
              case NATIVE_ASSETS.PRICE.KEY:
              case NATIVE_ASSETS.SALEPRICE.KEY:
              case NATIVE_ASSETS.PHONE.KEY:
              case NATIVE_ASSETS.ADDRESS.KEY:
              case NATIVE_ASSETS.DESC2.KEY:
              case NATIVE_ASSETS.DISPLAYURL.KEY:
              case NATIVE_ASSETS.CTA.KEY:
                assetObj = _commonNativeRequestObject(NATIVE_ASSET_KEY_TO_ASSET_MAP[key], params);
                break;
            }
          }
        }
        if (assetObj && assetObj.id) {
          nativeRequestObject.assets[nativeRequestObject.assets.length] = assetObj;
        }
      }
      ;
    
      // for native image adtype prebid has to have few required assests i.e. title,sponsoredBy, image
      // if any of these are missing from the request then request will not be sent
      var requiredAssetCount = NATIVE_MINIMUM_REQUIRED_IMAGE_ASSETS.length;
      var presentrequiredAssetCount = 0;
      NATIVE_MINIMUM_REQUIRED_IMAGE_ASSETS.forEach(function (ele) {
        var lengthOfExistingAssets = nativeRequestObject.assets.length;
        for (var i = 0; i < lengthOfExistingAssets; i++) {
          if (ele.id == nativeRequestObject.assets[i].id) {
            presentrequiredAssetCount++;
            break;
          }
        }
      });
      if (requiredAssetCount == presentrequiredAssetCount) {
        isInvalidNativeRequest = false;
      } else {
        isInvalidNativeRequest = true;
      }
      return nativeRequestObject;
    }
    function _createBannerRequest(bid) {
      var sizes = bid.mediaTypes.banner.sizes;
      var format = [];
      var bannerObj;
      if (sizes !== UNDEFINED && (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(sizes)) {
        bannerObj = {};
        if (!bid.params.width && !bid.params.height) {
          if (sizes.length === 0) {
            // i.e. since bid.params does not have width or height, and length of sizes is 0, need to ignore this banner imp
            bannerObj = UNDEFINED;
            (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)(LOG_WARN_PREFIX + 'Error: mediaTypes.banner.size missing for adunit: ' + bid.params.adUnit + '. Ignoring the banner impression in the adunit.');
            return bannerObj;
          } else {
            bannerObj.w = parseInt(sizes[0][0], 10);
            bannerObj.h = parseInt(sizes[0][1], 10);
            sizes = sizes.splice(1, sizes.length - 1);
          }
        } else {
          bannerObj.w = bid.params.width;
          bannerObj.h = bid.params.height;
        }
        if (sizes.length > 0) {
          format = [];
          sizes.forEach(function (size) {
            if (size.length > 1) {
              format.push({
                w: size[0],
                h: size[1]
              });
            }
          });
          if (format.length > 0) {
            bannerObj.format = format;
          }
        }
        bannerObj.pos = 0;
        bannerObj.topframe = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.inIframe)() ? 0 : 1;
      } else {
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)(LOG_WARN_PREFIX + 'Error: mediaTypes.banner.size missing for adunit: ' + bid.params.adUnit + '. Ignoring the banner impression in the adunit.');
        bannerObj = UNDEFINED;
      }
      return bannerObj;
    }
    function checkVideoPlacement(videoData, adUnitCode) {
      // Check for video.placement property. If property is missing display log message.
      if (!(0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(videoData, 'placement')) {
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)(MSG_VIDEO_PLACEMENT_MISSING + ' for ' + adUnitCode);
      }
      ;
    }
    function _createVideoRequest(bid) {
      var videoData = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.mergeDeep)((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(bid.mediaTypes, 'video'), bid.params.video);
      var videoObj;
      if (videoData !== UNDEFINED) {
        videoObj = {};
        checkVideoPlacement(videoData, bid.adUnitCode);
        for (var key in VIDEO_CUSTOM_PARAMS) {
          if (videoData.hasOwnProperty(key)) {
            videoObj[key] = _checkParamDataType(key, videoData[key], VIDEO_CUSTOM_PARAMS[key]);
          }
        }
        // read playersize and assign to h and w.
        if (bid.mediaTypes.video.playerSize) {
          if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(bid.mediaTypes.video.playerSize[0])) {
            videoObj.w = parseInt(bid.mediaTypes.video.playerSize[0][0], 10);
            videoObj.h = parseInt(bid.mediaTypes.video.playerSize[0][1], 10);
          } else if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isNumber)(bid.mediaTypes.video.playerSize[0])) {
            videoObj.w = parseInt(bid.mediaTypes.video.playerSize[0], 10);
            videoObj.h = parseInt(bid.mediaTypes.video.playerSize[1], 10);
          }
        } else if (bid.mediaTypes.video.w && bid.mediaTypes.video.h) {
          videoObj.w = parseInt(bid.mediaTypes.video.w, 10);
          videoObj.h = parseInt(bid.mediaTypes.video.h, 10);
        } else {
          videoObj = UNDEFINED;
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)(LOG_WARN_PREFIX + 'Error: Video size params(playersize or w&h) missing for adunit: ' + bid.params.adUnit + ' with mediaType set as video. Ignoring video impression in the adunit.');
          return videoObj;
        }
      } else {
        videoObj = UNDEFINED;
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)(LOG_WARN_PREFIX + 'Error: Video config params missing for adunit: ' + bid.params.adUnit + ' with mediaType set as video. Ignoring video impression in the adunit.');
      }
      return videoObj;
    }
    
    // support for PMP deals
    function _addPMPDealsInImpression(impObj, bid) {
      if (bid.params.deals) {
        if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(bid.params.deals)) {
          bid.params.deals.forEach(function (dealId) {
            if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isStr)(dealId) && dealId.length > 3) {
              if (!impObj.pmp) {
                impObj.pmp = {
                  private_auction: 0,
                  deals: []
                };
              }
              impObj.pmp.deals.push({
                id: dealId
              });
            } else {
              (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)(LOG_WARN_PREFIX + 'Error: deal-id present in array bid.params.deals should be a strings with more than 3 charaters length, deal-id ignored: ' + dealId);
            }
          });
        } else {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)(LOG_WARN_PREFIX + 'Error: bid.params.deals should be an array of strings.');
        }
      }
    }
    function _addBidViewabilityData(impObj, bid) {
      if (bid.bidViewability) {
        impObj.ext.bidViewability = bid.bidViewability;
      }
    }
    function _addDealCustomTargetings(imp, bid) {
      var dctr = '';
      var dctrLen;
      if (bid.params.dctr) {
        dctr = bid.params.dctr;
        if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isStr)(dctr) && dctr.length > 0) {
          var arr = dctr.split('|');
          dctr = '';
          arr.forEach(function (val) {
            dctr += val.length > 0 ? val.trim() + '|' : '';
          });
          dctrLen = dctr.length;
          if (dctr.substring(dctrLen, dctrLen - 1) === '|') {
            dctr = dctr.substring(0, dctrLen - 1);
          }
          imp.ext['key_val'] = dctr.trim();
        } else {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)(LOG_WARN_PREFIX + 'Ignoring param : dctr with value : ' + dctr + ', expects string-value, found empty or non-string value');
        }
      }
    }
    function _addJWPlayerSegmentData(imp, bid) {
      var jwSegData = bid.rtd && bid.rtd.jwplayer && bid.rtd.jwplayer.targeting || undefined;
      var jwPlayerData = '';
      var jwMark = 'jw-';
      if (jwSegData === undefined || jwSegData === '' || !jwSegData.hasOwnProperty('segments')) return;
      var maxLength = jwSegData.segments.length;
      jwPlayerData += jwMark + 'id=' + jwSegData.content.id; // add the content id first
    
      for (var i = 0; i < maxLength; i++) {
        jwPlayerData += '|' + jwMark + jwSegData.segments[i] + '=1';
      }
      var ext;
      ext = imp.ext;
      ext && ext.key_val === undefined ? ext.key_val = jwPlayerData : ext.key_val += '|' + jwPlayerData;
    }
    function _createImpressionObject(bid, conf) {
      var impObj = {};
      var bannerObj;
      var videoObj;
      var nativeObj = {};
      var sizes = bid.hasOwnProperty('sizes') ? bid.sizes : [];
      var mediaTypes = '';
      var format = [];
      impObj = {
        id: bid.bidId,
        tagid: bid.params.hashedKey || bid.params.adUnit || undefined,
        bidfloor: _parseSlotParam('kadfloor', bid.params.kadfloor),
        secure: 1,
        ext: {
          pmZoneId: _parseSlotParam('pmzoneid', bid.params.pmzoneid)
        },
        bidfloorcur: bid.params.currency ? _parseSlotParam('currency', bid.params.currency) : DEFAULT_CURRENCY
      };
      _addPMPDealsInImpression(impObj, bid);
      _addDealCustomTargetings(impObj, bid);
      _addJWPlayerSegmentData(impObj, bid);
      _addBidViewabilityData(impObj, bid);
      if (bid.hasOwnProperty('mediaTypes')) {
        for (mediaTypes in bid.mediaTypes) {
          switch (mediaTypes) {
            case _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.BANNER:
              bannerObj = _createBannerRequest(bid);
              if (bannerObj !== UNDEFINED) {
                impObj.banner = bannerObj;
              }
              break;
            case _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.NATIVE:
              nativeObj['request'] = JSON.stringify(_createNativeRequest(bid.nativeParams));
              if (!isInvalidNativeRequest) {
                impObj.native = nativeObj;
              } else {
                (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)(LOG_WARN_PREFIX + 'Error: Error in Native adunit ' + bid.params.adUnit + '. Ignoring the adunit. Refer to ' + PREBID_NATIVE_HELP_LINK + ' for more details.');
              }
              break;
            case _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.VIDEO:
              videoObj = _createVideoRequest(bid);
              if (videoObj !== UNDEFINED) {
                impObj.video = videoObj;
              }
              break;
          }
        }
      } else {
        // mediaTypes is not present, so this is a banner only impression
        // this part of code is required for older testcases with no 'mediaTypes' to run succesfully.
        bannerObj = {
          pos: 0,
          w: bid.params.width,
          h: bid.params.height,
          topframe: (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.inIframe)() ? 0 : 1
        };
        if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(sizes) && sizes.length > 1) {
          sizes = sizes.splice(1, sizes.length - 1);
          sizes.forEach(function (size) {
            if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(size) && size.length == 2) {
              format.push({
                w: size[0],
                h: size[1]
              });
            }
            ;
          });
          bannerObj.format = format;
        }
        impObj.banner = bannerObj;
      }
      _addImpressionFPD(impObj, bid);
      _addFloorFromFloorModule(impObj, bid);
      return impObj.hasOwnProperty(_src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.BANNER) || impObj.hasOwnProperty(_src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.NATIVE) || impObj.hasOwnProperty(_src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.VIDEO) ? impObj : UNDEFINED;
    }
    function _addImpressionFPD(imp, bid) {
      var ortb2 = _objectSpread({}, (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(bid, 'ortb2Imp.ext.data'));
      Object.keys(ortb2).forEach(function (prop) {
        /**
          * Prebid AdSlot
          * @type {(string|undefined)}
        */
        if (prop === 'pbadslot') {
          if (typeof ortb2[prop] === 'string' && ortb2[prop]) (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_6__.dset)(imp, 'ext.data.pbadslot', ortb2[prop]);
        } else if (prop === 'adserver') {
          /**
           * Copy GAM AdUnit and Name to imp
           */
          ['name', 'adslot'].forEach(function (name) {
            /** @type {(string|undefined)} */
            var value = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(ortb2, "adserver.".concat(name));
            if (typeof value === 'string' && value) {
              (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_6__.dset)(imp, "ext.data.adserver.".concat(name.toLowerCase()), value);
              // copy GAM ad unit id as imp[].ext.dfp_ad_unit_code
              if (name === 'adslot') {
                (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_6__.dset)(imp, "ext.dfp_ad_unit_code", value);
              }
            }
          });
        } else {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_6__.dset)(imp, "ext.data.".concat(prop), ortb2[prop]);
        }
      });
    }
    function _addFloorFromFloorModule(impObj, bid) {
      var bidFloor = -1;
      // get lowest floor from floorModule
      if (typeof bid.getFloor === 'function' && !_src_config_js__WEBPACK_IMPORTED_MODULE_7__.config.getConfig('pubmatic.disableFloors')) {
        [_src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.BANNER, _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.VIDEO, _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.NATIVE].forEach(function (mediaType) {
          if (impObj.hasOwnProperty(mediaType)) {
            var sizesArray = [];
            if (mediaType === 'banner') {
              if (impObj[mediaType].w && impObj[mediaType].h) {
                sizesArray.push([impObj[mediaType].w, impObj[mediaType].h]);
              }
              if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(impObj[mediaType].format)) {
                impObj[mediaType].format.forEach(function (size) {
                  return sizesArray.push([size.w, size.h]);
                });
              }
            }
            if (sizesArray.length === 0) {
              sizesArray.push('*');
            }
            sizesArray.forEach(function (size) {
              var floorInfo = bid.getFloor({
                currency: impObj.bidfloorcur,
                mediaType: mediaType,
                size: size
              });
              (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logInfo)(LOG_WARN_PREFIX, 'floor from floor module returned for mediatype:', mediaType, ' and size:', size, ' is: currency', floorInfo.currency, 'floor', floorInfo.floor);
              if ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_4__["default"])(floorInfo) === 'object' && floorInfo.currency === impObj.bidfloorcur && !isNaN(parseInt(floorInfo.floor))) {
                var mediaTypeFloor = parseFloat(floorInfo.floor);
                (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logInfo)(LOG_WARN_PREFIX, 'floor from floor module:', mediaTypeFloor, 'previous floor value', bidFloor, 'Min:', Math.min(mediaTypeFloor, bidFloor));
                if (bidFloor === -1) {
                  bidFloor = mediaTypeFloor;
                } else {
                  bidFloor = Math.min(mediaTypeFloor, bidFloor);
                }
                (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logInfo)(LOG_WARN_PREFIX, 'new floor value:', bidFloor);
              }
            });
          }
        });
      }
      // get highest from impObj.bidfllor and floor from floor module
      // as we are using Math.max, it is ok if we have not got any floor from floorModule, then value of bidFloor will be -1
      if (impObj.bidfloor) {
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logInfo)(LOG_WARN_PREFIX, 'floor from floor module:', bidFloor, 'impObj.bidfloor', impObj.bidfloor, 'Max:', Math.max(bidFloor, impObj.bidfloor));
        bidFloor = Math.max(bidFloor, impObj.bidfloor);
      }
    
      // assign value only if bidFloor is > 0
      impObj.bidfloor = !isNaN(bidFloor) && bidFloor > 0 ? bidFloor : UNDEFINED;
      (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logInfo)(LOG_WARN_PREFIX, 'new impObj.bidfloor value:', impObj.bidfloor);
    }
    function _handleEids(payload, validBidRequests) {
      var bidUserIdAsEids = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(validBidRequests, '0.userIdAsEids');
      if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(bidUserIdAsEids) && bidUserIdAsEids.length > 0) {
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_6__.dset)(payload, 'user.eids', bidUserIdAsEids);
      }
    }
    function _checkMediaType(bid, newBid) {
      // Create a regex here to check the strings
      if (bid.ext && bid.ext['bidtype'] != undefined) {
        newBid.mediaType = MEDIATYPE[bid.ext.bidtype];
      } else {
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logInfo)(LOG_WARN_PREFIX + 'bid.ext.bidtype does not exist, checking alternatively for mediaType');
        var adm = bid.adm;
        var admStr = '';
        var videoRegex = new RegExp(/VAST\s+version/);
        if (adm.indexOf('span class="PubAPIAd"') >= 0) {
          newBid.mediaType = _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.BANNER;
        } else if (videoRegex.test(adm)) {
          newBid.mediaType = _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.VIDEO;
        } else {
          try {
            admStr = JSON.parse(adm.replace(/\\/g, ''));
            if (admStr && admStr.native) {
              newBid.mediaType = _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.NATIVE;
            }
          } catch (e) {
            (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)(LOG_WARN_PREFIX + 'Error: Cannot parse native reponse for ad response: ' + adm);
          }
        }
      }
    }
    function _parseNativeResponse(bid, newBid) {
      newBid.native = {};
      if (bid.hasOwnProperty('adm')) {
        var adm = '';
        try {
          adm = JSON.parse(bid.adm.replace(/\\/g, ''));
        } catch (ex) {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)(LOG_WARN_PREFIX + 'Error: Cannot parse native reponse for ad response: ' + newBid.adm);
          return;
        }
        if (adm && adm.native && adm.native.assets && adm.native.assets.length > 0) {
          newBid.mediaType = _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.NATIVE;
          for (var i = 0, len = adm.native.assets.length; i < len; i++) {
            switch (adm.native.assets[i].id) {
              case NATIVE_ASSETS.TITLE.ID:
                newBid.native.title = adm.native.assets[i].title && adm.native.assets[i].title.text;
                break;
              case NATIVE_ASSETS.IMAGE.ID:
                newBid.native.image = {
                  url: adm.native.assets[i].img && adm.native.assets[i].img.url,
                  height: adm.native.assets[i].img && adm.native.assets[i].img.h,
                  width: adm.native.assets[i].img && adm.native.assets[i].img.w
                };
                break;
              case NATIVE_ASSETS.ICON.ID:
                newBid.native.icon = {
                  url: adm.native.assets[i].img && adm.native.assets[i].img.url,
                  height: adm.native.assets[i].img && adm.native.assets[i].img.h,
                  width: adm.native.assets[i].img && adm.native.assets[i].img.w
                };
                break;
              case NATIVE_ASSETS.SPONSOREDBY.ID:
              case NATIVE_ASSETS.BODY.ID:
              case NATIVE_ASSETS.LIKES.ID:
              case NATIVE_ASSETS.DOWNLOADS.ID:
              case NATIVE_ASSETS.PRICE:
              case NATIVE_ASSETS.SALEPRICE.ID:
              case NATIVE_ASSETS.PHONE.ID:
              case NATIVE_ASSETS.ADDRESS.ID:
              case NATIVE_ASSETS.DESC2.ID:
              case NATIVE_ASSETS.CTA.ID:
              case NATIVE_ASSETS.RATING.ID:
              case NATIVE_ASSETS.DISPLAYURL.ID:
                newBid.native[NATIVE_ASSET_ID_TO_KEY_MAP[adm.native.assets[i].id]] = adm.native.assets[i].data && adm.native.assets[i].data.value;
                break;
            }
          }
          newBid.native.clickUrl = adm.native.link && adm.native.link.url;
          newBid.native.clickTrackers = adm.native.link && adm.native.link.clicktrackers || [];
          newBid.native.impressionTrackers = adm.native.imptrackers || [];
          newBid.native.jstracker = adm.native.jstracker || [];
          if (!newBid.width) {
            newBid.width = DEFAULT_WIDTH;
          }
          if (!newBid.height) {
            newBid.height = DEFAULT_HEIGHT;
          }
        }
      }
    }
    function _blockedIabCategoriesValidation(payload, blockedIabCategories) {
      blockedIabCategories = blockedIabCategories.filter(function (category) {
        if (typeof category === 'string') {
          // only strings
          return true;
        } else {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)(LOG_WARN_PREFIX + 'bcat: Each category should be a string, ignoring category: ' + category);
          return false;
        }
      }).map(function (category) {
        return category.trim();
      }) // trim all
      .filter(function (category, index, arr) {
        // more than 3 charaters length
        if (category.length > 3) {
          return arr.indexOf(category) === index; // unique value only
        } else {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)(LOG_WARN_PREFIX + 'bcat: Each category should have a value of a length of more than 3 characters, ignoring category: ' + category);
        }
      });
      if (blockedIabCategories.length > 0) {
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)(LOG_WARN_PREFIX + 'bcat: Selected: ', blockedIabCategories);
        payload.bcat = blockedIabCategories;
      }
    }
    function _allowedIabCategoriesValidation(payload, allowedIabCategories) {
      allowedIabCategories = allowedIabCategories.filter(function (category) {
        if (typeof category === 'string') {
          // returns only strings
          return true;
        } else {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)(LOG_WARN_PREFIX + 'acat: Each category should be a string, ignoring category: ' + category);
          return false;
        }
      }).map(function (category) {
        return category.trim();
      }) // trim all categories
      .filter(function (category, index, arr) {
        return arr.indexOf(category) === index;
      }); // return unique values only
    
      if (allowedIabCategories.length > 0) {
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)(LOG_WARN_PREFIX + 'acat: Selected: ', allowedIabCategories);
        payload.ext.acat = allowedIabCategories;
      }
    }
    function _assignRenderer(newBid, request) {
      var bidParams, context, adUnitCode;
      if (request.bidderRequest && request.bidderRequest.bids) {
        for (var bidderRequestBidsIndex = 0; bidderRequestBidsIndex < request.bidderRequest.bids.length; bidderRequestBidsIndex++) {
          if (request.bidderRequest.bids[bidderRequestBidsIndex].bidId === newBid.requestId) {
            bidParams = request.bidderRequest.bids[bidderRequestBidsIndex].params;
            context = request.bidderRequest.bids[bidderRequestBidsIndex].mediaTypes[_src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.VIDEO].context;
            adUnitCode = request.bidderRequest.bids[bidderRequestBidsIndex].adUnitCode;
          }
        }
        if (context && context === 'outstream' && bidParams && bidParams.outstreamAU && adUnitCode) {
          newBid.rendererCode = bidParams.outstreamAU;
          newBid.renderer = BB_RENDERER.newRenderer(newBid.rendererCode, adUnitCode);
        }
      }
    }
    
    /**
     * In case of adpod video context, assign prebiddealpriority to the dealtier property of adpod-video bid,
     * so that adpod module can set the hb_pb_cat_dur targetting key.
     * @param {*} newBid
     * @param {*} bid
     * @param {*} request
     * @returns
     */
    function assignDealTier(newBid, bid, request) {
      var _bid$ext, _bid$ext2, _bid$ext2$video;
      if (!(bid !== null && bid !== void 0 && (_bid$ext = bid.ext) !== null && _bid$ext !== void 0 && _bid$ext.prebiddealpriority)) return;
      var bidRequest = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.getBidRequest)(newBid.requestId, [request.bidderRequest]);
      var videoObj = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(bidRequest, 'mediaTypes.video');
      if ((videoObj === null || videoObj === void 0 ? void 0 : videoObj.context) != _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.ADPOD) return;
      var duration = (bid === null || bid === void 0 ? void 0 : (_bid$ext2 = bid.ext) === null || _bid$ext2 === void 0 ? void 0 : (_bid$ext2$video = _bid$ext2.video) === null || _bid$ext2$video === void 0 ? void 0 : _bid$ext2$video.duration) || (videoObj === null || videoObj === void 0 ? void 0 : videoObj.maxduration);
      // if (!duration) return;
      newBid.video = {
        context: _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.ADPOD,
        durationSeconds: duration,
        dealTier: bid.ext.prebiddealpriority
      };
    }
    function isNonEmptyArray(test) {
      if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(test) === true) {
        if (test.length > 0) {
          return true;
        }
      }
      return false;
    }
    
    /**
     * Prepare meta object to pass as params
     * @param {*} br : bidResponse
     * @param {*} bid : bids
     */
    function prepareMetaObject(br, bid, seat) {
      br.meta = {};
      if (bid.ext && bid.ext.dspid) {
        br.meta.networkId = bid.ext.dspid;
        br.meta.demandSource = bid.ext.dspid;
      }
    
      // NOTE: We will not recieve below fields from the translator response also not sure on what will be the key names for these in the response,
      // when we needed we can add it back.
      // New fields added, assignee fields name may change
      // if (bid.ext.networkName) br.meta.networkName = bid.ext.networkName;
      // if (bid.ext.advertiserName) br.meta.advertiserName = bid.ext.advertiserName;
      // if (bid.ext.agencyName) br.meta.agencyName = bid.ext.agencyName;
      // if (bid.ext.brandName) br.meta.brandName = bid.ext.brandName;
      if (bid.ext && bid.ext.dchain) {
        br.meta.dchain = bid.ext.dchain;
      }
      var advid = seat || bid.ext && bid.ext.advid;
      if (advid) {
        br.meta.advertiserId = advid;
        br.meta.agencyId = advid;
        br.meta.buyerId = advid;
      }
      if (bid.adomain && isNonEmptyArray(bid.adomain)) {
        br.meta.advertiserDomains = bid.adomain;
        br.meta.clickUrl = bid.adomain[0];
        br.meta.brandId = bid.adomain[0];
      }
      if (bid.cat && isNonEmptyArray(bid.cat)) {
        br.meta.secondaryCatIds = bid.cat;
        br.meta.primaryCatId = bid.cat[0];
      }
    }
    
    /**
     * returns, boolean value according to translator get request is enabled
     * and random value should be less than or equal to testGroupPercentage
     * @returns boolean
     */
    function hasGetRequestEnabled() {
      if (!(_src_config_js__WEBPACK_IMPORTED_MODULE_7__.config.getConfig('translatorGetRequest.enabled') === true)) return false;
      var randomValue100 = Math.ceil(Math.random() * 100);
      var testGroupPercentage = _src_config_js__WEBPACK_IMPORTED_MODULE_7__.config.getConfig('translatorGetRequest.testGroupPercentage') || 0;
      return randomValue100 <= testGroupPercentage;
    }
    function getUniqueNumber(rangeEnd) {
      return Math.floor(Math.random() * rangeEnd) + 1;
    }
    var spec = {
      code: BIDDER_CODE,
      gvlid: 76,
      supportedMediaTypes: [_src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.BANNER, _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.VIDEO, _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.NATIVE],
      aliases: [PUBMATIC_ALIAS],
      /**
      * Determines whether or not the given bid request is valid. Valid bid request must have placementId and hbid
      *
      * @param {BidRequest} bid The bid params to validate.
      * @return boolean True if this is a valid bid, and false otherwise.
      */
      isBidRequestValid: function isBidRequestValid(bid) {
        if (bid && bid.params) {
          if (!(0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isStr)(bid.params.publisherId)) {
            (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)(LOG_WARN_PREFIX + 'Error: publisherId is mandatory and cannot be numeric (wrap it in quotes in your config). Call to OpenBid will not be sent for ad unit: ' + JSON.stringify(bid));
            return false;
          }
          // video ad validation
          if (bid.hasOwnProperty('mediaTypes') && bid.mediaTypes.hasOwnProperty(_src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.VIDEO)) {
            // bid.mediaTypes.video.mimes OR bid.params.video.mimes should be present and must be a non-empty array
            var mediaTypesVideoMimes = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(bid.mediaTypes, 'video.mimes');
            var paramsVideoMimes = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_5__["default"])(bid, 'params.video.mimes');
            if (isNonEmptyArray(mediaTypesVideoMimes) === false && isNonEmptyArray(paramsVideoMimes) === false) {
              (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)(LOG_WARN_PREFIX + 'Error: For video ads, bid.mediaTypes.video.mimes OR bid.params.video.mimes should be present and must be a non-empty array. Call to OpenBid will not be sent for ad unit:' + JSON.stringify(bid));
              return false;
            }
            if (!bid.mediaTypes[_src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.VIDEO].hasOwnProperty('context')) {
              (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)("".concat(LOG_WARN_PREFIX, ": no context specified in bid. Rejecting bid: "), bid);
              return false;
            }
            if (bid.mediaTypes[_src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.VIDEO].context === 'outstream' && !(0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isStr)(bid.params.outstreamAU) && !bid.hasOwnProperty('renderer') && !bid.mediaTypes[_src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.VIDEO].hasOwnProperty('renderer')) {
              // we are here since outstream ad-unit is provided without outstreamAU and renderer
              // so it is not a valid video ad-unit
              // but it may be valid banner or native ad-unit
              // so if mediaType banner or Native is present then  we will remove media-type video and return true
    
              if (bid.mediaTypes.hasOwnProperty(_src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.BANNER) || bid.mediaTypes.hasOwnProperty(_src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.NATIVE)) {
                delete bid.mediaTypes[_src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.VIDEO];
                (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)("".concat(LOG_WARN_PREFIX, ": for \"outstream\" bids either outstreamAU parameter must be provided or ad unit supplied renderer is required. Rejecting mediatype Video of bid: "), bid);
                return true;
              } else {
                (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)("".concat(LOG_WARN_PREFIX, ": for \"outstream\" bids either outstreamAU parameter must be provided or ad unit supplied renderer is required. Rejecting bid: "), bid);
                return false;
              }
            }
          }
          return true;
        }
        return false;
      },
      /**
       * Make a server request from the list of BidRequests.
       *
       * @param {validBidRequests[]} - an array of bids
       * @return ServerRequest Info describing the request to the server.
       */
      buildRequests: function buildRequests(validBidRequests, bidderRequest) {
        var _commonFpd$device, _commonFpd$device3, _commonFpd$ext, _commonFpd$ext$prebid, _commonFpd$ext$prebid2, _commonFpd$ext$prebid3, _bidderRequest;
        // convert Native ORTB definition to old-style prebid native definition
        validBidRequests = (0,_src_native_js__WEBPACK_IMPORTED_MODULE_8__.convertOrtbRequestToProprietaryNative)(validBidRequests);
        var refererInfo;
        if (bidderRequest && bidderRequest.refererInfo) {
          refererInfo = bidderRequest.refererInfo;
        }
        var conf = _initConf(refererInfo);
        var payload = _createOrtbTemplate(conf);
        var bidCurrency = '';
        var dctrArr = [];
        var bid;
        var blockedIabCategories = [];
        var allowedIabCategories = [];
        validBidRequests.forEach(function (originalBid) {
          bid = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.deepClone)(originalBid);
          bid.params.adSlot = bid.params.adSlot || '';
          _parseAdSlot(bid);
          if (bid.mediaTypes && bid.mediaTypes.hasOwnProperty('video') || bid.params.hasOwnProperty('video')) {
            // Nothing to do
          } else {
            // If we have a native mediaType configured alongside banner, its ok if the banner size is not set in width and height
            // The corresponding banner imp object will not be generated, but we still want the native object to be sent, hence the following check
            if (!(bid.hasOwnProperty('mediaTypes') && bid.mediaTypes.hasOwnProperty(_src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.NATIVE)) && bid.params.width === 0 && bid.params.height === 0) {
              (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)(LOG_WARN_PREFIX + 'Skipping the non-standard adslot: ', bid.params.adSlot, JSON.stringify(bid));
              return;
            }
          }
          conf.pubId = conf.pubId || bid.params.publisherId;
          conf = _handleCustomParams(bid.params, conf);
          conf.transactionId = bid.transactionId;
          if (bidCurrency === '') {
            bidCurrency = bid.params.currency || UNDEFINED;
          } else if (bid.params.hasOwnProperty('currency') && bidCurrency !== bid.params.currency) {
            (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logWarn)(LOG_WARN_PREFIX + 'Currency specifier ignored. Only one currency permitted.');
          }
          bid.params.currency = bidCurrency;
          // check if dctr is added to more than 1 adunit
          if (bid.params.hasOwnProperty('dctr') && (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isStr)(bid.params.dctr)) {
            dctrArr.push(bid.params.dctr);
          }
          if (bid.params.hasOwnProperty('bcat') && (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(bid.params.bcat)) {
            blockedIabCategories = blockedIabCategories.concat(bid.params.bcat);
          }
          if (bid.params.hasOwnProperty('acat') && (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(bid.params.acat)) {
            allowedIabCategories = allowedIabCategories.concat(bid.params.acat);
          }
          var impObj = _createImpressionObject(bid, conf);
          if (impObj) {
            payload.imp.push(impObj);
          }
        });
        if (payload.imp.length == 0) {
          return;
        }
        payload.site.publisher.id = conf.pubId.trim();
        publisherId = conf.pubId.trim();
        payload.ext.wrapper = {};
        payload.ext.wrapper.profile = parseInt(conf.profId) || UNDEFINED;
        payload.ext.wrapper.version = parseInt(conf.verId) || UNDEFINED;
        payload.ext.wrapper.wiid = conf.wiid || bidderRequest.auctionId;
        // eslint-disable-next-line no-undef
        payload.ext.wrapper.wv = "prebid_prebid_7.39.0";
        payload.ext.wrapper.transactionId = conf.transactionId;
        payload.ext.wrapper.wp = 'pbjs';
        var allowAlternateBidder = bidderRequest ? _src_bidderSettings_js__WEBPACK_IMPORTED_MODULE_9__.bidderSettings.get(bidderRequest.bidderCode, 'allowAlternateBidderCodes') : undefined;
        if (allowAlternateBidder !== undefined) {
          payload.ext.marketplace = {};
          if (bidderRequest && allowAlternateBidder == true) {
            var allowedBiddersList = _src_bidderSettings_js__WEBPACK_IMPORTED_MODULE_9__.bidderSettings.get(bidderRequest.bidderCode, 'allowedAlternateBidderCodes');
            if ((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(allowedBiddersList)) {
              allowedBiddersList = allowedBiddersList.map(function (val) {
                return val.trim().toLowerCase();
              }).filter(function (val) {
                return !!val;
              }).filter(_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.uniques);
              biddersList = allowedBiddersList.includes('*') ? allBiddersList : [].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_10__["default"])(biddersList), (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_10__["default"])(allowedBiddersList));
            } else {
              biddersList = allBiddersList;
            }
          }
          payload.ext.marketplace.allowedbidders = biddersList.filter(_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.uniques);
        }
        if (bid.bidViewability) {
          vsgObj = getAndParseFromLocalStorage('viewability-data');
          removeViewTimeForZeroValue(vsgObj[vsgDomain]);
          payload.ext.bidViewability = {
            adDomain: vsgObj[vsgDomain]
          };
        }
        payload.user.gender = conf.gender ? conf.gender.trim() : UNDEFINED;
        payload.user.geo = {};
        payload.user.geo.lat = _parseSlotParam('lat', conf.lat);
        payload.user.geo.lon = _parseSlotParam('lon', conf.lon);
        payload.user.yob = _parseSlotParam('yob', conf.yob);
        payload.device.geo = payload.user.geo;
        payload.site.page = conf.kadpageurl.trim() || payload.site.page.trim();
        payload.site.domain = _getDomainFromURL(payload.site.page);
    
        // add the content object from config in request
        if ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_4__["default"])(_src_config_js__WEBPACK_IMPORTED_MODULE_7__.config.getConfig('content')) === 'object') {
          payload.site.content = _src_config_js__WEBPACK_IMPORTED_MODULE_7__.config.getConfig('content');
        }
    
        // merge the device from config.getConfig('device')
        if ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_4__["default"])(_src_config_js__WEBPACK_IMPORTED_MODULE_7__.config.getConfig('device')) === 'object') {
          payload.device = Object.assign(payload.device, _src_config_js__WEBPACK_IMPORTED_MODULE_7__.config.getConfig('device'));
        }
    
        // update device.language to ISO-639-1-alpha-2 (2 character language)
        payload.device.language = payload.device.language && payload.device.language.split('-')[0];
    
        // passing transactionId in source.tid
        (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_6__.dset)(payload, 'source.tid', conf.transactionId);
    
        // test bids
        if (window.location.href.indexOf('pubmaticTest=true') !== -1) {
          payload.test = 1;
        }
    
        // adding schain object
        if (validBidRequests[0].schain) {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_6__.dset)(payload, 'source.ext.schain', validBidRequests[0].schain);
        }
    
        // Attaching GDPR Consent Params
        if (bidderRequest && bidderRequest.gdprConsent) {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_6__.dset)(payload, 'user.ext.consent', bidderRequest.gdprConsent.consentString);
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_6__.dset)(payload, 'regs.ext.gdpr', bidderRequest.gdprConsent.gdprApplies ? 1 : 0);
        }
    
        // CCPA
        if (bidderRequest && bidderRequest.uspConsent) {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_6__.dset)(payload, 'regs.ext.us_privacy', bidderRequest.uspConsent);
        }
    
        // coppa compliance
        if (_src_config_js__WEBPACK_IMPORTED_MODULE_7__.config.getConfig('coppa') === true) {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_6__.dset)(payload, 'regs.coppa', 1);
        }
        _handleEids(payload, validBidRequests);
    
        // First Party Data
        var commonFpd = bidderRequest && bidderRequest.ortb2 || {};
        if (commonFpd.site) {
          // Saving page, domain & ref property from payload before getting replaced by fpd modules.
          var _payload$site = payload.site,
            page = _payload$site.page,
            domain = _payload$site.domain,
            ref = _payload$site.ref;
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.mergeDeep)(payload, {
            site: commonFpd.site
          });
          // Replace original values for page, domain & ref
          payload.site.page = page;
          payload.site.domain = domain;
          payload.site.ref = ref;
        }
        if (commonFpd.user) {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.mergeDeep)(payload, {
            user: commonFpd.user
          });
        }
        if (commonFpd.bcat) {
          blockedIabCategories = blockedIabCategories.concat(commonFpd.bcat);
        }
        // check if fpd ortb2 contains device property with sua object
        if ((_commonFpd$device = commonFpd.device) !== null && _commonFpd$device !== void 0 && _commonFpd$device.sua) {
          var _commonFpd$device2;
          payload.device.sua = (_commonFpd$device2 = commonFpd.device) === null || _commonFpd$device2 === void 0 ? void 0 : _commonFpd$device2.sua;
        }
    
        // check if fpd ortb2 contains device property with sua object
        if ((_commonFpd$device3 = commonFpd.device) !== null && _commonFpd$device3 !== void 0 && _commonFpd$device3.sua) {
          payload.device.sua = commonFpd.device.sua;
        }
        if ((_commonFpd$ext = commonFpd.ext) !== null && _commonFpd$ext !== void 0 && (_commonFpd$ext$prebid = _commonFpd$ext.prebid) !== null && _commonFpd$ext$prebid !== void 0 && (_commonFpd$ext$prebid2 = _commonFpd$ext$prebid.bidderparams) !== null && _commonFpd$ext$prebid2 !== void 0 && (_commonFpd$ext$prebid3 = _commonFpd$ext$prebid2[bidderRequest.bidderCode]) !== null && _commonFpd$ext$prebid3 !== void 0 && _commonFpd$ext$prebid3.acat) {
          var acatParams = commonFpd.ext.prebid.bidderparams[bidderRequest.bidderCode].acat;
          _allowedIabCategoriesValidation(payload, acatParams);
        } else if (allowedIabCategories.length) {
          _allowedIabCategoriesValidation(payload, allowedIabCategories);
        }
        _blockedIabCategoriesValidation(payload, blockedIabCategories);
    
        // Check if bidderRequest has timeout property if present send timeout as tmax value to translator request
        // bidderRequest has timeout property if publisher sets during calling requestBids function from page
        // if not bidderRequest contains global value set by Prebid
        if ((_bidderRequest = bidderRequest) !== null && _bidderRequest !== void 0 && _bidderRequest.timeout) {
          payload.tmax = bidderRequest.timeout || _src_config_js__WEBPACK_IMPORTED_MODULE_7__.config.getConfig('bidderTimeout');
        } else {
          var _window, _window$PWT, _window$PWT$versionDe;
          payload.tmax = (_window = window) === null || _window === void 0 ? void 0 : (_window$PWT = _window.PWT) === null || _window$PWT === void 0 ? void 0 : (_window$PWT$versionDe = _window$PWT.versionDetails) === null || _window$PWT$versionDe === void 0 ? void 0 : _window$PWT$versionDe.timeout;
        }
    
        // Sending epoch timestamp in request.ext object
        payload.ext.epoch = new Date().getTime();
    
        // Note: Do not move this block up
        // if site object is set in Prebid config then we need to copy required fields from site into app and unset the site object
        if ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_4__["default"])(_src_config_js__WEBPACK_IMPORTED_MODULE_7__.config.getConfig('app')) === 'object') {
          payload.app = _src_config_js__WEBPACK_IMPORTED_MODULE_7__.config.getConfig('app');
          // not copying domain from site as it is a derived value from page
          payload.app.publisher = payload.site.publisher;
          payload.app.ext = payload.site.ext || UNDEFINED;
          // We will also need to pass content object in app.content if app object is also set into the config;
          // BUT do not use content object from config if content object is present in app as app.content
          if ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_4__["default"])(payload.app.content) !== 'object') {
            payload.app.content = payload.site.content || UNDEFINED;
          }
          delete payload.site;
        }
        var correlator = getUniqueNumber(1000);
        var url = ENDPOINT + '?source=ow-client&correlator=' + correlator;
        var serverRequest = {
          method: 'POST',
          url: url,
          data: JSON.stringify(payload),
          bidderRequest: bidderRequest
        };
    
        // Allow translator request to execute it as GET Methoid if flag is set.
        if (hasGetRequestEnabled()) {
          var _bidderRequest2, _bidderRequest2$bids, _bidderRequest3, _ref;
          // For Auction End Handler
          bidderRequest = bidderRequest || {};
          bidderRequest.nwMonitor = {};
          bidderRequest.nwMonitor.reqMethod = 'POST';
          bidderRequest.nwMonitor.correlator = correlator;
          bidderRequest.nwMonitor.requestUrlPayloadLength = url.length + JSON.stringify(payload).length;
          // For Timeout handler
          if ((_bidderRequest2 = bidderRequest) !== null && _bidderRequest2 !== void 0 && (_bidderRequest2$bids = _bidderRequest2.bids) !== null && _bidderRequest2$bids !== void 0 && _bidderRequest2$bids.length && (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isArray)((_bidderRequest3 = bidderRequest) === null || _bidderRequest3 === void 0 ? void 0 : _bidderRequest3.bids)) {
            bidderRequest.bids.forEach(function (bid) {
              return bid.correlator = correlator;
            });
          }
          var maxUrlLength = _src_config_js__WEBPACK_IMPORTED_MODULE_7__.config.getConfig('translatorGetRequest.maxUrlLength') || 63000;
          var configuredEndPoint = _src_config_js__WEBPACK_IMPORTED_MODULE_7__.config.getConfig('translatorGetRequest.endPoint') || ENDPOINT;
          var urlEncodedPayloadStr = (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.parseQueryStringParameters)({
            'source': 'ow-client',
            'payload': JSON.stringify(payload),
            'correlator': correlator
          });
          if (((_ref = configuredEndPoint + '?' + urlEncodedPayloadStr) === null || _ref === void 0 ? void 0 : _ref.length) <= maxUrlLength) {
            serverRequest = {
              method: 'GET',
              url: configuredEndPoint,
              data: urlEncodedPayloadStr,
              bidderRequest: bidderRequest,
              payloadStr: JSON.stringify(payload)
            };
            bidderRequest.nwMonitor.reqMethod = 'GET';
            bidderRequest.nwMonitor.requestUrlPayloadLength = configuredEndPoint.length + '?'.length + urlEncodedPayloadStr.length;
          }
        }
        return serverRequest;
      },
      /**
       * Unpack the response from the server into a list of bids.
       *
       * @param {*} response A successful response from the server.
       * @return {Bid[]} An array of bids which were nested inside the server.
       */
      interpretResponse: function interpretResponse(response, request) {
        var bidResponses = [];
        var respCur = DEFAULT_CURRENCY;
        // In case of Translator GET request, will copy the actual json data from payloadStr to data.
        if (request !== null && request !== void 0 && request.payloadStr) request.data = request.payloadStr;
        var parsedRequest = JSON.parse(request.data);
        var parsedReferrer = parsedRequest.site && parsedRequest.site.ref ? parsedRequest.site.ref : '';
        try {
          var requestData = JSON.parse(request.data);
          if (response.body && response.body.seatbid && (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(response.body.seatbid)) {
            bidResponses = [];
            // Supporting multiple bid responses for same adSize
            respCur = response.body.cur || respCur;
            response.body.seatbid.forEach(function (seatbidder) {
              seatbidder.bid && (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(seatbidder.bid) && seatbidder.bid.forEach(function (bid) {
                var newBid = {
                  requestId: bid.impid,
                  cpm: parseFloat((bid.price || 0).toFixed(2)),
                  width: bid.w,
                  height: bid.h,
                  sspID: bid.id || '',
                  creativeId: bid.crid || bid.id,
                  dealId: bid.dealid,
                  currency: respCur,
                  netRevenue: NET_REVENUE,
                  ttl: 300,
                  referrer: parsedReferrer,
                  ad: bid.adm,
                  pm_seat: seatbidder.seat || null,
                  pm_dspid: bid.ext && bid.ext.dspid ? bid.ext.dspid : null,
                  partnerImpId: bid.id || '' // partner impression Id
                };
    
                if (parsedRequest.imp && parsedRequest.imp.length > 0) {
                  parsedRequest.imp.forEach(function (req) {
                    if (bid.impid === req.id) {
                      _checkMediaType(bid, newBid);
                      switch (newBid.mediaType) {
                        case _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.BANNER:
                          break;
                        case _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.VIDEO:
                          newBid.width = bid.hasOwnProperty('w') ? bid.w : req.video.w;
                          newBid.height = bid.hasOwnProperty('h') ? bid.h : req.video.h;
                          newBid.vastXml = bid.adm;
                          _assignRenderer(newBid, request);
                          assignDealTier(newBid, bid, request);
                          break;
                        case _src_mediaTypes_js__WEBPACK_IMPORTED_MODULE_1__.NATIVE:
                          _parseNativeResponse(bid, newBid);
                          break;
                      }
                    }
                  });
                }
                if (newBid['dealId']) {
                  newBid['dealChannel'] = 'PMP';
                }
                if (newBid['dealId'] && bid.ext && bid.ext.deal_channel) {
                  newBid['dealChannel'] = dealChannelValues[bid.ext.deal_channel] || null;
                }
                prepareMetaObject(newBid, bid, seatbidder.seat);
    
                // START of Experimental change
                if (response.body.ext) {
                  newBid['ext'] = response.body.ext;
                }
                // END of Experimental change
    
                // adserverTargeting
                if (seatbidder.ext && seatbidder.ext.buyid) {
                  newBid.adserverTargeting = {
                    'hb_buyid_pubmatic': seatbidder.ext.buyid
                  };
                }
    
                // if from the server-response the bid.ext.marketplace is set then
                //    submit the bid to Prebid as marketplace name
                if (bid.ext && !!bid.ext.marketplace) {
                  newBid.bidderCode = bid.ext.marketplace;
                }
                bidResponses.push(newBid);
              });
            });
          }
          // adding zero bid for every no-bid
          if (requestData && requestData.imp && requestData.imp.length > 0) {
            var requestIds = requestData.imp.map(function (reqData) {
              return reqData.id;
            });
            var uniqueImpIds = bidResponses.map(function (bid) {
              return bid.requestId;
            }).filter(function (value, index, self) {
              return self.indexOf(value) === index;
            });
            var nonBidIds = requestIds.filter(function (x) {
              return !uniqueImpIds.includes(x);
            });
            nonBidIds.forEach(function (nonBidId) {
              requestData.imp.forEach(function (impData) {
                if (impData.id === nonBidId) {
                  bidResponses.push({
                    requestId: impData.id,
                    width: 0,
                    height: 0,
                    ttl: 300,
                    ad: '',
                    creativeId: 0,
                    netRevenue: NET_REVENUE,
                    cpm: 0,
                    currency: respCur,
                    referrer: parsedReferrer
                  });
                }
              });
            });
          }
        } catch (error) {
          (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.logError)(error);
        }
        return bidResponses;
      },
      /**
       * Register User Sync.
       */
      getUserSyncs: function getUserSyncs(syncOptions, responses, gdprConsent, uspConsent) {
        var syncurl = '' + publisherId;
    
        // Attaching GDPR Consent Params in UserSync url
        if (gdprConsent) {
          syncurl += '&gdpr=' + (gdprConsent.gdprApplies ? 1 : 0);
          syncurl += '&gdpr_consent=' + encodeURIComponent(gdprConsent.consentString || '');
        }
    
        // CCPA
        if (uspConsent) {
          syncurl += '&us_privacy=' + encodeURIComponent(uspConsent);
        }
    
        // coppa compliance
        if (_src_config_js__WEBPACK_IMPORTED_MODULE_7__.config.getConfig('coppa') === true) {
          syncurl += '&coppa=1';
        }
        if (syncOptions.iframeEnabled) {
          return [{
            type: 'iframe',
            url: USER_SYNC_URL_IFRAME + syncurl
          }];
        } else {
          return [{
            type: 'image',
            url: USER_SYNC_URL_IMAGE + syncurl
          }];
        }
      },
      /**
       * Covert bid param types for S2S
       * @param {Object} params bid params
       * @param {Boolean} isOpenRtb boolean to check openrtb2 protocol
       * @return {Object} params bid params
       */
    
      transformBidParams: function transformBidParams(params, isOpenRtb, adUnit, bidRequests) {
        return (0,_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.convertTypes)({
          'publisherId': 'string',
          'adSlot': 'string'
        }, params);
      }
    };
    (0,_src_adapters_bidderFactory_js__WEBPACK_IMPORTED_MODULE_11__.registerBidder)(spec);
    window.owpbjs.installedModules.push('pubmaticBidAdapter');
    
    /***/ })
    
    },
    /******/ function(__webpack_require__) { // webpackRuntimeModules
    /******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
    /******/ __webpack_require__.O(0, ["fpd"], function() { return __webpack_exec__("./modules/pubmaticBidAdapter.js"); });
    /******/ var __webpack_exports__ = __webpack_require__.O();
    /******/ }
    ]);
    
    "use strict";
    (self["owpbjsChunk"] = self["owpbjsChunk"] || []).push([["viewabilityScoreGeneration"],{
    
    /***/ "./modules/viewabilityScoreGeneration.js":
    /*!***********************************************!*\
      !*** ./modules/viewabilityScoreGeneration.js ***!
      \***********************************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    /* unused harmony exports getAndParseFromLocalStorage, setAndStringifyToLocalStorage, makeBidRequestsHook, updateTotalViewTime, gptSlotRenderEndedHandler, gptImpressionViewableHandler, gptSlotVisibilityChangedHandler, calculateBucket, addViewabilityTargeting, setViewabilityTargetingKeys, updateGptWithViewabilityTargeting, setGptEventHandlers, init */
    /* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
    /* harmony import */ var _src_config_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../src/config.js */ "./src/config.js");
    /* harmony import */ var _src_adapterManager_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../src/adapterManager.js */ "./src/adapterManager.js");
    /* harmony import */ var _src_targeting_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../src/targeting.js */ "./src/targeting.js");
    /* harmony import */ var _src_events_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../src/events.js */ "./src/events.js");
    /* harmony import */ var _src_constants_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../src/constants.json */ "./src/constants.json");
    /* harmony import */ var _src_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../src/utils.js */ "./src/utils.js");
    
    
    
    
    
    
    
    var MODULE_NAME = 'viewabilityScoreGeneration';
    var ENABLED = 'enabled';
    var TARGETING = 'targeting';
    var GPT_SLOT_RENDER_ENDED_EVENT = 'slotRenderEnded';
    var GPT_IMPRESSION_VIEWABLE_EVENT = 'impressionViewable';
    var GPT_SLOT_VISIBILITY_CHANGED_EVENT = 'slotVisibilityChanged';
    var TOTAL_VIEW_TIME_LIMIT = 1000000000;
    var domain = window.location.hostname;
    var NATIVE_DEFAULT_SIZE = '0x0';
    var ADSLOTSIZE_INDEX = 2;
    var ADUNIT_INDEX = 1;
    
    // stat hat call to collect data when there is issue while writing to localstorgae.
    var fireStatHatLogger = function fireStatHatLogger(statKeyName) {
      var stathatUserEmail = 'jason.quaccia@pubmatic.com';
      var url = 'https://api.stathat.com/ez';
      var data = "time=".concat(new Date().getTime(), "&stat=").concat(statKeyName, "&email=").concat(stathatUserEmail, "&count=1");
      var statHatElement = document.createElement('script');
      statHatElement.src = url + '?' + data;
      statHatElement.async = true;
      document.body.appendChild(statHatElement);
    };
    var getAndParseFromLocalStorage = function getAndParseFromLocalStorage(key) {
      return JSON.parse(window.localStorage.getItem(key));
    };
    var setAndStringifyToLocalStorage = function setAndStringifyToLocalStorage(key, object) {
      try {
        window.localStorage.setItem(key, JSON.stringify(object));
      } catch (e) {
        // send error to stathat endpoint
        fireStatHatLogger("".concat(e, " --- ").concat(window.location.href));
      }
    };
    var vsgObj = getAndParseFromLocalStorage('viewability-data');
    var makeBidRequestsHook = function makeBidRequestsHook(fn, bidderRequests) {
      var _config$getConfig;
      if (vsgObj && (_config$getConfig = _src_config_js__WEBPACK_IMPORTED_MODULE_0__.config.getConfig(MODULE_NAME)) !== null && _config$getConfig !== void 0 && _config$getConfig.enabled) {
        bidderRequests.forEach(function (bidderRequest) {
          bidderRequest.bids.forEach(function (bid) {
            var _bid$mediaTypes2;
            var bidViewabilityFields = {};
            var adSizes = {};
            var adUnit = vsgObj[bid.adUnitCode];
            if (bid.sizes.length) {
              bid.sizes.forEach(function (bidSize) {
                var _vsgObj$key, _bid$mediaTypes, _bid$mediaTypes$video;
                var key = bidSize.toString().replace(',', 'x');
                if ((_vsgObj$key = vsgObj[key]) !== null && _vsgObj$key !== void 0 && _vsgObj$key.slot.includes(bid.adUnitCode)) adSizes[key] = removeKeys((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.deepClone)(vsgObj[key]));
                // special handling for outstream video, we can check for playerSize in bid.mediaType to fetch value from localStorage
                else if ((_bid$mediaTypes = bid.mediaTypes) !== null && _bid$mediaTypes !== void 0 && (_bid$mediaTypes$video = _bid$mediaTypes.video) !== null && _bid$mediaTypes$video !== void 0 && _bid$mediaTypes$video.playerSize) {
                  var _vsgObj$_key;
                  var _key = bid.mediaTypes.video.playerSize.toString().replace(',', 'x');
                  if ((_vsgObj$_key = vsgObj[_key]) !== null && _vsgObj$_key !== void 0 && _vsgObj$_key.slot.includes(bid.adUnitCode)) adSizes[_key] = removeKeys((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.deepClone)(vsgObj[_key]));
                }
              });
              // Special handling for native creative, we are storing values for native againest '1x1' mapping.
            } else if ((_bid$mediaTypes2 = bid.mediaTypes) !== null && _bid$mediaTypes2 !== void 0 && _bid$mediaTypes2.native && vsgObj[NATIVE_DEFAULT_SIZE]) adSizes['1x1'] = removeKeys((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.deepClone)(vsgObj[NATIVE_DEFAULT_SIZE]));
            if (Object.keys(adSizes).length) bidViewabilityFields.adSizes = adSizes;
            if (adUnit) bidViewabilityFields.adUnit = removeKeys((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.deepClone)(adUnit));
            if (Object.keys(bidViewabilityFields).length) bid.bidViewability = bidViewabilityFields;
          });
        });
      }
      fn(bidderRequests);
    };
    var removeKeys = function removeKeys(obj) {
      // Deleteing this field as it is only required to calculate totalViewtime and no need to send it to translator.
      delete obj.lastViewStarted;
      // Deleteing totalTimeView incase value is less than 1 sec.
      if (obj.totalViewTime == 0) {
        delete obj.totalViewTime;
      }
      // Deleting slot field as it is only required to pass correct size values in corresponding impressions.
      delete obj.slot;
      return obj;
    };
    
    // once the TOTAL_VIEW_TIME_LIMIT for totalViewTime is reached, divide totalViewTime, rendered & viewed all by the same factor of "x" in order to preserve the same averages but not let counts in localstorage get too high
    var reduceAndPreserveCounts = function reduceAndPreserveCounts(key) {
      var lsObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : vsgObj;
      var divideBy = 2;
      lsObj[key].totalViewTime = Math.round(lsObj[key].totalViewTime / divideBy);
      lsObj[key].rendered = Math.round(lsObj[key].rendered / divideBy);
      lsObj[key].viewed = Math.round(lsObj[key].viewed / divideBy);
    };
    var updateTotalViewTime = function updateTotalViewTime(diff, currentTime, lastViewStarted, key) {
      var lsObj = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : vsgObj;
      diff = currentTime - lastViewStarted;
      var newValue = Math.round((lsObj[key].totalViewTime || 0) + diff / 1000);
      if (newValue >= TOTAL_VIEW_TIME_LIMIT) {
        reduceAndPreserveCounts(key, lsObj);
      } else {
        lsObj[key].totalViewTime = newValue;
      }
    };
    
    // function to return default values for rendered, viewed, slot and createdAt
    // slot is required for getting correct values from local storage
    var defaultInit = function defaultInit(keyArr, index) {
      return {
        rendered: 1,
        viewed: 0,
        slot: index == ADSLOTSIZE_INDEX ? [keyArr[ADUNIT_INDEX]] : undefined,
        createdAt: Date.now()
      };
    };
    
    // this function initialises value and increase rendered count based on slot, size and domain level.
    var incrementRenderCount = function incrementRenderCount(keyArr) {
      keyArr.forEach(function (key, index) {
        if (!key) return;
        if (vsgObj) {
          if (vsgObj[key]) {
            var _vsgObj$key$slot;
            vsgObj[key].rendered = vsgObj[key].rendered + 1;
            if (!((_vsgObj$key$slot = vsgObj[key].slot) !== null && _vsgObj$key$slot !== void 0 && _vsgObj$key$slot.includes(keyArr[ADUNIT_INDEX])) && index == 2) vsgObj[key].slot.push(keyArr[ADUNIT_INDEX]);
          } else {
            vsgObj[key] = defaultInit(keyArr, index);
          }
        } else {
          vsgObj = (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])({}, key, defaultInit(keyArr, index));
        }
      });
    };
    
    // this function increase viewed count based on slot, size and domain level.
    var incrementViewCount = function incrementViewCount(keyArr) {
      keyArr.forEach(function (key) {
        if (vsgObj[key]) {
          vsgObj[key].viewed = vsgObj[key].viewed + 1;
        }
      });
    };
    
    // this function adds totalViewtime based on slot, size and domain level.
    var incrementTotalViewTime = function incrementTotalViewTime(keyArr, inViewPercentage, setToLocalStorageCb) {
      keyArr.forEach(function (key) {
        if (vsgObj[key]) {
          var currentTime = Date.now();
          var lastViewStarted = vsgObj[key].lastViewStarted;
          var diff;
          if (inViewPercentage < 50) {
            if (lastViewStarted) {
              updateTotalViewTime(diff, currentTime, lastViewStarted, key);
              delete vsgObj[key].lastViewStarted;
            }
          } else {
            if (lastViewStarted) {
              updateTotalViewTime(diff, currentTime, lastViewStarted, key);
            }
            vsgObj[key].lastViewStarted = currentTime;
            setToLocalStorageCb('viewability-data', vsgObj);
          }
        }
      });
    };
    var gptSlotRenderEndedHandler = function gptSlotRenderEndedHandler(adSlotElementId, adSlotSize, adDomain, setToLocalStorageCb) {
      incrementRenderCount([adDomain, adSlotElementId, adSlotSize]);
      setToLocalStorageCb('viewability-data', vsgObj);
    };
    var gptImpressionViewableHandler = function gptImpressionViewableHandler(adSlotElementId, adSlotSizes, adDomain, setToLocalStorageCb) {
      var keyArr = [adDomain, adSlotElementId, adSlotSizes];
      incrementViewCount(keyArr);
      setToLocalStorageCb('viewability-data', vsgObj);
    };
    var gptSlotVisibilityChangedHandler = function gptSlotVisibilityChangedHandler(adSlotElementId, adSlotSizes, adDomain, inViewPercentage, setToLocalStorageCb) {
      var keyArr = [adDomain, adSlotElementId, adSlotSizes];
      incrementTotalViewTime(keyArr, inViewPercentage, setToLocalStorageCb);
    };
    var calculateBucket = function calculateBucket(bucketCategories, score) {
      var bucketCategoriesObject = {};
      var result;
      bucketCategories.forEach(function (category, index) {
        bucketCategoriesObject[category] = Math.round((index + 1) / bucketCategories.length * 10) / 10;
      });
      for (var i = 0; i < bucketCategories.length; i++) {
        if (score <= bucketCategoriesObject[bucketCategories[i]]) {
          result = bucketCategories[i];
          break;
        }
      }
      return result;
    };
    var addViewabilityTargeting = function addViewabilityTargeting(globalConfig, targetingSet, vsgLocalStorageObj, cb) {
      Object.keys(targetingSet).forEach(function (targetKey) {
        if (Object.keys(targetingSet[targetKey]).length !== 0) {
          // Will add only required targetting keys by this module.
          targetingSet[targetKey] = {};
          if (vsgLocalStorageObj[targetKey] && vsgLocalStorageObj[targetKey].hasOwnProperty('viewed') && vsgLocalStorageObj[targetKey].hasOwnProperty('rendered')) {
            var viewabilityScore = Math.round(vsgLocalStorageObj[targetKey].viewed / vsgLocalStorageObj[targetKey].rendered * 10) / 10;
            var viewabilityBucket = calculateBucket(globalConfig[MODULE_NAME][TARGETING].bucketCategories, viewabilityScore);
            if (globalConfig[MODULE_NAME][TARGETING].score) {
              var targetingScoreKey = globalConfig[MODULE_NAME][TARGETING].scoreKey ? globalConfig[MODULE_NAME][TARGETING].scoreKey : 'bidViewabilityScore';
              targetingSet[targetKey][targetingScoreKey] = viewabilityScore;
            }
            if (globalConfig[MODULE_NAME][TARGETING].bucket) {
              var targetingBucketKey = globalConfig[MODULE_NAME][TARGETING].bucketKey ? globalConfig[MODULE_NAME][TARGETING].bucketKey : 'bidViewabilityBucket';
              targetingSet[targetKey][targetingBucketKey] = viewabilityBucket;
            }
          }
        }
      });
      cb(targetingSet);
    };
    var setViewabilityTargetingKeys = function setViewabilityTargetingKeys(globalConfig) {
      _src_events_js__WEBPACK_IMPORTED_MODULE_3__.on(_src_constants_json__WEBPACK_IMPORTED_MODULE_4__.EVENTS.AUCTION_END, function () {
        if (vsgObj) {
          var targetingSet = _src_targeting_js__WEBPACK_IMPORTED_MODULE_5__.targeting.getAllTargeting();
          addViewabilityTargeting(globalConfig, targetingSet, vsgObj, updateGptWithViewabilityTargeting);
        }
      });
    };
    var updateGptWithViewabilityTargeting = function updateGptWithViewabilityTargeting(targetingSet) {
      window.googletag.pubads().getSlots().forEach(function (slot) {
        Object.keys(targetingSet).filter((0,_src_utils_js__WEBPACK_IMPORTED_MODULE_1__.isAdUnitCodeMatchingSlot)(slot)).forEach(function (targetId) {
          slot.updateTargetingFromMap(targetingSet[targetId]);
        });
      });
    };
    var getSlotAndSize = function getSlotAndSize(event) {
      var _event$slot$getTarget;
      var currentAdSlotElement = event.slot.getSlotElementId();
      var creativeSize = ((_event$slot$getTarget = event.slot.getTargeting('hb_size')) === null || _event$slot$getTarget === void 0 ? void 0 : _event$slot$getTarget.length) === 0 ? event.slot.getTargeting('pwtsz') : event.slot.getTargeting('hb_size');
      var currentAdSlotSize = creativeSize === null || creativeSize === void 0 ? void 0 : creativeSize[0];
      return {
        currentAdSlotElement: currentAdSlotElement,
        currentAdSlotSize: currentAdSlotSize
      };
    };
    var setGptEventHandlers = function setGptEventHandlers() {
      // add the GPT event listeners
      // the event handlers below get triggered in the following order: slotRenderEnded, slotVisibilityChanged and impressionViewable
      window.googletag = window.googletag || {};
      window.googletag.cmd = window.googletag.cmd || [];
      window.googletag.cmd.push(function () {
        window.googletag.pubads().addEventListener(GPT_SLOT_RENDER_ENDED_EVENT, function (event) {
          var slotSize = getSlotAndSize(event);
          gptSlotRenderEndedHandler(slotSize.currentAdSlotElement, slotSize.currentAdSlotSize, domain, setAndStringifyToLocalStorage);
        });
        window.googletag.pubads().addEventListener(GPT_IMPRESSION_VIEWABLE_EVENT, function (event) {
          var slotSize = getSlotAndSize(event);
          gptImpressionViewableHandler(slotSize.currentAdSlotElement, slotSize.currentAdSlotSize, domain, setAndStringifyToLocalStorage);
        });
        window.googletag.pubads().addEventListener(GPT_SLOT_VISIBILITY_CHANGED_EVENT, function (event) {
          var slotSize = getSlotAndSize(event);
          gptSlotVisibilityChangedHandler(slotSize.currentAdSlotElement, slotSize.currentAdSlotSize, domain, event.inViewPercentage, setAndStringifyToLocalStorage);
        });
      });
    };
    var initConfigDefaults = function initConfigDefaults(config) {
      var _config$viewabilitySc, _config$viewabilitySc2, _config$viewabilitySc3, _config$viewabilitySc4, _config$viewabilitySc5, _config$viewabilitySc6, _config$viewabilitySc7, _config$viewabilitySc8, _config$viewabilitySc9, _config$viewabilitySc10, _config$viewabilitySc11, _config$viewabilitySc12, _config$viewabilitySc13, _config$viewabilitySc14, _config$viewabilitySc15, _config$viewabilitySc16, _config$viewabilitySc17, _config$viewabilitySc18;
      if (!config[MODULE_NAME][TARGETING]) {
        config[MODULE_NAME][TARGETING] = {};
      }
      ;
      config[MODULE_NAME][TARGETING].enabled = typeof ((_config$viewabilitySc = config.viewabilityScoreGeneration) === null || _config$viewabilitySc === void 0 ? void 0 : (_config$viewabilitySc2 = _config$viewabilitySc.targeting) === null || _config$viewabilitySc2 === void 0 ? void 0 : _config$viewabilitySc2.enabled) === 'boolean' ? (_config$viewabilitySc3 = config.viewabilityScoreGeneration) === null || _config$viewabilitySc3 === void 0 ? void 0 : (_config$viewabilitySc4 = _config$viewabilitySc3.targeting) === null || _config$viewabilitySc4 === void 0 ? void 0 : _config$viewabilitySc4.enabled : false;
      config[MODULE_NAME][TARGETING].bucketCategories = (_config$viewabilitySc5 = config.viewabilityScoreGeneration) !== null && _config$viewabilitySc5 !== void 0 && (_config$viewabilitySc6 = _config$viewabilitySc5.targeting) !== null && _config$viewabilitySc6 !== void 0 && _config$viewabilitySc6.bucketCategories && (_config$viewabilitySc7 = config.viewabilityScoreGeneration) !== null && _config$viewabilitySc7 !== void 0 && (_config$viewabilitySc8 = _config$viewabilitySc7.targeting) !== null && _config$viewabilitySc8 !== void 0 && _config$viewabilitySc8.bucketCategories.every(function (i) {
        return typeof i === 'string';
      }) ? (_config$viewabilitySc9 = config.viewabilityScoreGeneration) === null || _config$viewabilitySc9 === void 0 ? void 0 : (_config$viewabilitySc10 = _config$viewabilitySc9.targeting) === null || _config$viewabilitySc10 === void 0 ? void 0 : _config$viewabilitySc10.bucketCategories : ['LOW', 'MEDIUM', 'HIGH'];
      config[MODULE_NAME][TARGETING].score = typeof ((_config$viewabilitySc11 = config.viewabilityScoreGeneration) === null || _config$viewabilitySc11 === void 0 ? void 0 : (_config$viewabilitySc12 = _config$viewabilitySc11.targeting) === null || _config$viewabilitySc12 === void 0 ? void 0 : _config$viewabilitySc12.score) === 'boolean' ? (_config$viewabilitySc13 = config.viewabilityScoreGeneration) === null || _config$viewabilitySc13 === void 0 ? void 0 : (_config$viewabilitySc14 = _config$viewabilitySc13.targeting) === null || _config$viewabilitySc14 === void 0 ? void 0 : _config$viewabilitySc14.score : true;
      config[MODULE_NAME][TARGETING].bucket = typeof ((_config$viewabilitySc15 = config.viewabilityScoreGeneration) === null || _config$viewabilitySc15 === void 0 ? void 0 : (_config$viewabilitySc16 = _config$viewabilitySc15.targeting) === null || _config$viewabilitySc16 === void 0 ? void 0 : _config$viewabilitySc16.bucket) === 'boolean' ? (_config$viewabilitySc17 = config.viewabilityScoreGeneration) === null || _config$viewabilitySc17 === void 0 ? void 0 : (_config$viewabilitySc18 = _config$viewabilitySc17.targeting) === null || _config$viewabilitySc18 === void 0 ? void 0 : _config$viewabilitySc18.bucket : true;
    };
    var init = function init(setGptCb, setTargetingCb) {
      _src_config_js__WEBPACK_IMPORTED_MODULE_0__.config.getConfig(MODULE_NAME, function (globalConfig) {
        var _globalConfig$viewabi, _globalConfig$viewabi2, _globalConfig$viewabi3, _globalConfig$viewabi4, _globalConfig$viewabi5, _globalConfig$viewabi6;
        if (globalConfig[MODULE_NAME][ENABLED] !== true) {
          return;
        }
        initConfigDefaults(globalConfig);
        setGptCb();
        if ((_globalConfig$viewabi = globalConfig.viewabilityScoreGeneration) !== null && _globalConfig$viewabi !== void 0 && (_globalConfig$viewabi2 = _globalConfig$viewabi.targeting) !== null && _globalConfig$viewabi2 !== void 0 && _globalConfig$viewabi2.enabled && ((_globalConfig$viewabi3 = globalConfig.viewabilityScoreGeneration) !== null && _globalConfig$viewabi3 !== void 0 && (_globalConfig$viewabi4 = _globalConfig$viewabi3.targeting) !== null && _globalConfig$viewabi4 !== void 0 && _globalConfig$viewabi4.score || (_globalConfig$viewabi5 = globalConfig.viewabilityScoreGeneration) !== null && _globalConfig$viewabi5 !== void 0 && (_globalConfig$viewabi6 = _globalConfig$viewabi5.targeting) !== null && _globalConfig$viewabi6 !== void 0 && _globalConfig$viewabi6.bucket)) {
          setTargetingCb(globalConfig);
        }
        _src_adapterManager_js__WEBPACK_IMPORTED_MODULE_6__["default"].makeBidRequests.after(makeBidRequestsHook);
      });
    };
    init(setGptEventHandlers, setViewabilityTargetingKeys);
    window.owpbjs.installedModules.push('viewabilityScoreGeneration');
    
    /***/ })
    
    },
    /******/ function(__webpack_require__) { // webpackRuntimeModules
    /******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
    /******/ __webpack_require__.O(0, ["fpd"], function() { return __webpack_exec__("./modules/viewabilityScoreGeneration.js"); });
    /******/ var __webpack_exports__ = __webpack_require__.O();
    /******/ }
    ]);
    
    owpbjs.processQueue();
    //# sourceMappingURL=prebid.js.map
    
    /******/ (function(modules) { // webpackBootstrap
    /******/ 	// The module cache
    /******/ 	var installedModules = {};
    /******/
    /******/ 	// The require function
    /******/ 	function __webpack_require__(moduleId) {
    /******/
    /******/ 		// Check if module is in cache
    /******/ 		if(installedModules[moduleId]) {
    /******/ 			return installedModules[moduleId].exports;
    /******/ 		}
    /******/ 		// Create a new module (and put it into the cache)
    /******/ 		var module = installedModules[moduleId] = {
    /******/ 			i: moduleId,
    /******/ 			l: false,
    /******/ 			exports: {}
    /******/ 		};
    /******/
    /******/ 		// Execute the module function
    /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ 		// Flag the module as loaded
    /******/ 		module.l = true;
    /******/
    /******/ 		// Return the exports of the module
    /******/ 		return module.exports;
    /******/ 	}
    /******/
    /******/
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/ 	__webpack_require__.m = modules;
    /******/
    /******/ 	// expose the module cache
    /******/ 	__webpack_require__.c = installedModules;
    /******/
    /******/ 	// define getter function for harmony exports
    /******/ 	__webpack_require__.d = function(exports, name, getter) {
    /******/ 		if(!__webpack_require__.o(exports, name)) {
    /******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
    /******/ 		}
    /******/ 	};
    /******/
    /******/ 	// define __esModule on exports
    /******/ 	__webpack_require__.r = function(exports) {
    /******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
    /******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
    /******/ 		}
    /******/ 		Object.defineProperty(exports, '__esModule', { value: true });
    /******/ 	};
    /******/
    /******/ 	// create a fake namespace object
    /******/ 	// mode & 1: value is a module id, require it
    /******/ 	// mode & 2: merge all properties of value into the ns
    /******/ 	// mode & 4: return value when already ns object
    /******/ 	// mode & 8|1: behave like require
    /******/ 	__webpack_require__.t = function(value, mode) {
    /******/ 		if(mode & 1) value = __webpack_require__(value);
    /******/ 		if(mode & 8) return value;
    /******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
    /******/ 		var ns = Object.create(null);
    /******/ 		__webpack_require__.r(ns);
    /******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
    /******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
    /******/ 		return ns;
    /******/ 	};
    /******/
    /******/ 	// getDefaultExport function for compatibility with non-harmony modules
    /******/ 	__webpack_require__.n = function(module) {
    /******/ 		var getter = module && module.__esModule ?
    /******/ 			function getDefault() { return module['default']; } :
    /******/ 			function getModuleExports() { return module; };
    /******/ 		__webpack_require__.d(getter, 'a', getter);
    /******/ 		return getter;
    /******/ 	};
    /******/
    /******/ 	// Object.prototype.hasOwnProperty.call
    /******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
    /******/
    /******/ 	// __webpack_public_path__
    /******/ 	__webpack_require__.p = "";
    /******/
    /******/
    /******/ 	// Load entry module and return exports
    /******/ 	return __webpack_require__(__webpack_require__.s = "./src_new/owt.js");
    /******/ })
    /************************************************************************/
    /******/ ({
    
    /***/ "./node_modules/prebid-universal-creative/dist/creative.js":
    /*!*****************************************************************!*\
      !*** ./node_modules/prebid-universal-creative/dist/creative.js ***!
      \*****************************************************************/
    /*! no static exports found */
    /***/ (function(module, exports) {
    
    /* prebid-universal-creative v1.13.0
    Updated : 2021-12-09 */
    !function(r){var n={};function o(t){if(n[t])return n[t].exports;var e=n[t]={i:t,l:!1,exports:{}};return r[t].call(e.exports,e,e.exports,o),e.l=!0,e.exports}o.m=r,o.c=n,o.d=function(t,e,r){o.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=1)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getEmptyIframe=function(t,e){var r=document.createElement("iframe");return r.setAttribute("frameborder",0),r.setAttribute("scrolling","no"),r.setAttribute("marginheight",0),r.setAttribute("marginwidth",0),r.setAttribute("TOPMARGIN",0),r.setAttribute("LEFTMARGIN",0),r.setAttribute("allowtransparency","true"),r.setAttribute("width",e),r.setAttribute("height",t),r},e.insertElement=function(t,e,r){var n;e=e||document,n=r?e.getElementsByTagName(r):e.getElementsByTagName("head");try{(n=n.length?n:e.getElementsByTagName("body")).length&&(n=n[0]).insertBefore(t,n.firstChild)}catch(t){}}},function(t,e,r){"use strict";var n=r(2),o=r(5);window.ucTag=window.ucTag||{};var i=(0,o.newEnvironment)(window),a=(0,n.newRenderingManager)(window,i);window.ucTag.renderAd=a.renderAd},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.newRenderingManager=function(d,s){function f(t){if(t){var e=t.split("x").map(Number);!function(n,o){if(s.isSafeFrame()){var i=d.innerWidth,a=d.innerHeight;i===n&&a===o||(d.$sf.ext.register(n,o,function(t){var e=n-i,r=o-a;d.$sf.ext.expand({r:e,b:r,push:!0})}),d.parent.postMessage({sentinel:"amp",type:"embed-size",width:n,height:o},"*"))}}(e[0],e[1])}else console.log("Targeting key hb_size not found to resize creative")}function n(t,e,r,n,o,i){var a=2<arguments.length&&void 0!==r?r:"",s=3<arguments.length?n:void 0,c=4<arguments.length?o:void 0,u=5<arguments.length?i:void 0,l="Prebid_";if(a.substr(0,l.length)===l)!function(t){var e=d.localStorage.getItem(t);h(!0)(e)}(a),f(s);else{var p="".concat(function(t,e){var r=void 0===e||""===e?v:e;return"https://".concat(void 0===t||""===t?g:t).concat(r)}(t,e),"?uuid=").concat(a);f(s),m.sendRequest(p,h(u,c))}}function h(u,l){return function(t){var e=function(t){var e;try{e=JSON.parse(t)}catch(t){console.log("Error parsing response from cache host: ".concat(t))}return e}(t),r=e.price||l,n=m.getCreativeCommentMarkup(e),o=e.width?e.width:e.w,i=e.height?e.height:e.h;if(e.wurl&&(0,m.triggerPixel)(decodeURIComponent(e.wurl)),e.adm){if(e.adm=r?e.adm.replace("${AUCTION_PRICE}",r):e.adm.replace("${AUCTION_PRICE}",""),n+=u?p(e.adm,o,i):e.adm,e.nurl&&(n+=m.createTrackPixelHtml(decodeURIComponent(e.nurl))),e.burl){var a=function(){m.triggerPixel(e.burl)};if(u)m.loadScript(d,"mraid.js",function(){!function(e){function r(t){0<t&&(mraid.removeEventListener("exposureChange",r),e())}function n(t){t&&(mraid.removeEventListener("viewableChange",n),e())}function o(){d.MRAID_ENV&&3<=parseFloat(d.MRAID_ENV.version)?mraid.addEventListener("exposureChange",r):d.MRAID_ENV&&parseFloat(d.MRAID_ENV.version)<3&&(mraid.isViewable()?e():mraid.addEventListener("viewableChange",n))}return!(!d.mraid||!d.MRAID_ENV)&&("loading"==mraid.getState()?mraid.addEventListener("ready",function t(){mraid.removeEventListener("ready",t),o()}):o(),!0)}(a)&&a()},a);else a()}m.writeAdHtml(n)}else if(e.nurl)if(u){n+=p(m.loadScript(d,e.nurl).outerHTML,o,i),m.writeAdHtml(n)}else{var s=e.nurl,c=m.getCreativeComment(e);y.insertElement(c,document,"body"),m.writeAdUrl(s,o,i)}}}function p(t,e,r){var n=m.getUUID();return'<div id="'.concat(n,'" style="border-style: none; position: absolute; width:100%; height:100%;">\n      <div id="').concat(n,'_inner" style="margin: 0 auto; width:').concat(e,"px; height:").concat(r,'px; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">').concat(t,"</div>\n      </div>")}return{renderAd:function(t,e){var r=m.transformAuctionTargetingData(e);s.isMobileApp(r.env)?n(r.cacheHost,r.cachePath,r.uuid,r.size,r.hbPb,!0):s.isAmp(r.uuid)?n(r.cacheHost,r.cachePath,r.uuid,r.size,r.hbPb):s.canLocatePrebid()?function(t,e){for(var r=d,n=0;n<10;n++)if((r=r.parent).pbjs)try{r.pbjs.renderAd(t,e);break}catch(t){continue}}(t,r.adId):function(p,t,e){var r,n=1<arguments.length&&void 0!==t?t:"",o=2<arguments.length?e:void 0,i=d.location,a=m.parseUrl(o),f=a.protocol+"://"+a.host,s=n||d.location.hostname,c=i.protocol+"//"+s;function u(t){var e=t.message?"message":"data",r={};try{r=JSON.parse(t[e])}catch(t){return}var n=t.origin||t.originalEvent.origin;if(r.message&&"Prebid Response"===r.message&&f===n&&r.adId===p&&(r.ad||r.adUrl)){var o=d.document.body,i=r.ad,a=r.adUrl,s=r.width,c=r.height;if("video"===r.mediaType)console.log("Error trying to write ad.");else if(i){var u=y.getEmptyIframe(r.height,r.width);o.appendChild(u),u.contentDocument.open(),u.contentDocument.write(i),u.contentDocument.close()}else if(a){var l=y.getEmptyIframe(c,s);l.style.display="inline",l.style.overflow="hidden",l.src=a,y.insertElement(l,document,"body")}else console.log("Error trying to write ad. No ad for bid response id: ".concat(id))}}d.addEventListener("message",u,!1),r=JSON.stringify({message:"Prebid Request",adId:p,adServerDomain:c}),d.parent.postMessage(r,f)}(r.adId,r.adServerDomain,r.pubUrl)}}};var m=n(r(3)),y=n(r(0));function a(){if("function"!=typeof WeakMap)return null;var t=new WeakMap;return a=function(){return t},t}function n(t){if(t&&t.__esModule)return t;var e=a();if(e&&e.has(t))return e.get(t);var r={};if(null!=t){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in t)if(Object.prototype.hasOwnProperty.call(t,o)){var i=n?Object.getOwnPropertyDescriptor(t,o):null;i&&(i.get||i.set)?Object.defineProperty(r,o,i):r[o]=t[o]}}return r.default=t,e&&e.set(t,r),r}var g="prebid.adnxs.com",v="/pbc/v1/cache"},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.triggerPixel=function(t,e){var r=new Image;e&&"function"==typeof e&&(r.addEventListener("load",e),r.addEventListener("error",e));r.src=t},n.createTrackPixelHtml=function(t){if(!t)return"";var e=encodeURI(t);return'<div style="position:absolute;left:0px;top:0px;visibility:hidden;"><img src="'.concat(e,'"></div>')},n.writeAdUrl=function(t,e,r){var n=o.getEmptyIframe(r,e);n.src=t,document.body.appendChild(n)},n.writeAdHtml=function(t){r(document.body,t,{error:console.error})},n.sendRequest=function(t,e){var r=new XMLHttpRequest;r.addEventListener("load",function(){e(r.responseText)}),r.open("GET",t),r.send()},n.getUUID=function(){var r=(new Date).getTime();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var e=(r+16*Math.random())%16|0;return r=Math.floor(r/16),("x"===t?e:3&e|8).toString(16)})},n.loadScript=function(t,e,r,n){var o=t.document,i=o.createElement("script");i.type="text/javascript",r&&"function"==typeof r&&(i.readyState?i.onreadystatechange=function(){"loaded"!==i.readyState&&"complete"!==i.readyState||(i.onreadystatechange=null,r())}:i.onload=function(){r()});n&&"function"==typeof n&&(i.onerror=function(){n()});i.src=e;var a=o.getElementsByTagName("head");(a=a.length?a:o.getElementsByTagName("body")).length&&(a=a[0]).insertBefore(i,a.firstChild);return i},n.getCreativeComment=function(t){return document.createComment("Creative ".concat(t.crid," served by Prebid.js Header Bidding"))},n.getCreativeCommentMarkup=function(t){var e=n.getCreativeComment(t),r=document.createElement("div");return r.appendChild(e),r.innerHTML},n.transformAuctionTargetingData=function(e){var r={hb_adid:"adId",hb_cache_host:"cacheHost",hb_cache_path:"cachePath",hb_cache_id:"uuid",hb_format:"mediaType",hb_env:"env",hb_size:"size",hb_pb:"hbPb"};function t(t){return!(!e[t]||!(function(t){return i(t,"Object")}(e[t])&&0<Object.keys(e[t]).length||s(e[t])&&""!==e[t]))}var n={},o={};t("targetingMap")?o=function(e){var r={};return Object.keys(e).forEach(function(t){Array.isArray(e[t])&&0<e[t].length&&(r[t]=e[t][0])}),r}(e.targetingMap):t("targetingKeywords")&&(o=function(t){var o={},e=t.split(",");return 0<e.length&&e.forEach(function(t){var e=t.split(":");if(2===e.length){var r=e[0],n=e[1];o[r]=n}}),o}(e.targetingKeywords));return function(e){Object.keys(e).forEach(function(t){n[r[t]||t]=e[t]})}(o),Object.keys(e).forEach(function(t){"targetingMap"!==t&&"targetingKeywords"!==t&&s(e[t])&&""!==e[t]&&(n[t]=e[t])}),n},n.parseUrl=function(t){var e=document.createElement("a");return e.href=decodeURIComponent(t),{href:e.href,protocol:(e.protocol||"").replace(/:$/,""),hostname:e.hostname,port:+e.port,pathname:e.pathname.replace(/^(?!\/)/,"/"),hash:(e.hash||"").replace(/^#/,""),host:(e.host||window.location.host).replace(/:(443|80)$/,"")}};var o=function(t){if(t&&t.__esModule)return t;var e=a();if(e&&e.has(t))return e.get(t);var r={};if(null!=t){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in t)if(Object.prototype.hasOwnProperty.call(t,o)){var i=n?Object.getOwnPropertyDescriptor(t,o):null;i&&(i.get||i.set)?Object.defineProperty(r,o,i):r[o]=t[o]}}r.default=t,e&&e.set(t,r);return r}(e(0));function a(){if("function"!=typeof WeakMap)return null;var t=new WeakMap;return a=function(){return t},t}var r=e(4);function i(t,e){return Object.prototype.toString.call(t)==="[object "+e+"]"}function s(t){return i(t,"String")}},function(t,e,r){var n;n=function(){return o={},r.m=n=[function(t,e,r){"use strict";var n,o=r(1),i=(n=o)&&n.__esModule?n:{default:n};t.exports=i.default},function(t,e,r){"use strict";e.__esModule=!0;var s=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t};e.default=h;var n,o=r(2),c=(n=o)&&n.__esModule?n:{default:n},i=function(t){{if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e}}(r(4));function u(){}var a={afterAsync:u,afterDequeue:u,afterStreamStart:u,afterWrite:u,autoFix:!0,beforeEnqueue:u,beforeWriteToken:function(t){return t},beforeWrite:function(t){return t},done:u,error:function(t){throw new Error(t.msg)},releaseAsync:!1},l=0,p=[],f=null;function d(){var t=p.shift();if(t){var e=i.last(t);e.afterDequeue(),t.stream=function(t,e,n){(f=new c.default(t,n)).id=l++,f.name=n.name||f.id,h.streams[f.name]=f;var r=t.ownerDocument,o={close:r.close,open:r.open,write:r.write,writeln:r.writeln};function i(t){t=n.beforeWrite(t),f.write(t),n.afterWrite(t)}s(r,{close:u,open:u,write:function(){for(var t=arguments.length,e=Array(t),r=0;r<t;r++)e[r]=arguments[r];return i(e.join(""))},writeln:function(){for(var t=arguments.length,e=Array(t),r=0;r<t;r++)e[r]=arguments[r];return i(e.join("")+"\n")}});var a=f.win.onerror||u;return f.win.onerror=function(t,e,r){n.error({msg:t+" - "+e+": "+r}),a.apply(f.win,[t,e,r])},f.write(e,function(){s(r,o),f.win.onerror=a,n.done(),f=null,d()}),f}.apply(void 0,t),e.afterStreamStart()}}function h(t,e,r){if(i.isFunction(r))r={done:r};else if("clear"===r)return p=[],f=null,void(l=0);r=i.defaults(r,a);var n=[t=/^#/.test(t)?window.document.getElementById(t.substr(1)):t.jquery?t[0]:t,e,r];return t.postscribe={cancel:function(){n.stream?n.stream.abort():n[1]=u}},r.beforeEnqueue(n),p.push(n),f||d(),t.postscribe}s(h,{streams:{},queue:p,WriteStream:c.default})},function(t,e,r){"use strict";e.__esModule=!0;var n,s=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},o=r(3),i=(n=o)&&n.__esModule?n:{default:n},a=function(t){{if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e}}(r(4));var l="data-ps-",p="ps-style",f="ps-script";function c(t,e){var r=l+e,n=t.getAttribute(r);return a.existy(n)?String(n):n}function u(t,e,r){var n=2<arguments.length&&void 0!==r?r:null,o=l+e;a.existy(n)&&""!==n?t.setAttribute(o,n):t.removeAttribute(o)}var d=(h.prototype.write=function(){var t;for((t=this.writeQueue).push.apply(t,arguments);!this.deferredRemote&&this.writeQueue.length;){var e=this.writeQueue.shift();a.isFunction(e)?this._callFunction(e):this._writeImpl(e)}},h.prototype._callFunction=function(t){var e={type:"function",value:t.name||t.toString()};this._onScriptStart(e),t.call(this.win,this.doc),this._onScriptDone(e)},h.prototype._writeImpl=function(t){this.parser.append(t);for(var e=void 0,r=void 0,n=void 0,o=[];(e=this.parser.readToken())&&!(r=a.isScript(e))&&!(n=a.isStyle(e));)(e=this.options.beforeWriteToken(e))&&o.push(e);0<o.length&&this._writeStaticTokens(o),r&&this._handleScriptToken(e),n&&this._handleStyleToken(e)},h.prototype._writeStaticTokens=function(t){var e=this._buildChunk(t);return e.actual?(e.html=this.proxyHistory+e.actual,this.proxyHistory+=e.proxy,this.proxyRoot.innerHTML=e.html,this._walkChunk(),e):null},h.prototype._buildChunk=function(t){for(var e=this.actuals.length,r=[],n=[],o=[],i=t.length,a=0;a<i;a++){var s=t[a],c=s.toString();if(r.push(c),s.attrs){if(!/^noscript$/i.test(s.tagName)){var u=e++;n.push(c.replace(/(\/?>)/," "+l+"id="+u+" $1")),s.attrs.id!==f&&s.attrs.id!==p&&o.push("atomicTag"===s.type?"":"<"+s.tagName+" "+l+"proxyof="+u+(s.unary?" />":">"))}}else n.push(c),o.push("endTag"===s.type?c:"")}return{tokens:t,raw:r.join(""),actual:n.join(""),proxy:o.join("")}},h.prototype._walkChunk=function(){for(var t=void 0,e=[this.proxyRoot];a.existy(t=e.shift());){var r=1===t.nodeType;if(!r||!c(t,"proxyof")){r&&u(this.actuals[c(t,"id")]=t,"id");var n=t.parentNode&&c(t.parentNode,"proxyof");n&&this.actuals[n].appendChild(t)}e.unshift.apply(e,a.toArray(t.childNodes))}},h.prototype._handleScriptToken=function(t){var e=this,r=this.parser.clear();r&&this.writeQueue.unshift(r),t.src=t.attrs.src||t.attrs.SRC,(t=this.options.beforeWriteToken(t))&&(t.src&&this.scriptStack.length?this.deferredRemote=t:this._onScriptStart(t),this._writeScriptToken(t,function(){e._onScriptDone(t)}))},h.prototype._handleStyleToken=function(t){var e=this.parser.clear();e&&this.writeQueue.unshift(e),t.type=t.attrs.type||t.attrs.TYPE||"text/css",(t=this.options.beforeWriteToken(t))&&this._writeStyleToken(t),e&&this.write()},h.prototype._writeStyleToken=function(t){var e=this._buildStyle(t);this._insertCursor(e,p),t.content&&(e.styleSheet&&!e.sheet?e.styleSheet.cssText=t.content:e.appendChild(this.doc.createTextNode(t.content)))},h.prototype._buildStyle=function(t){var r=this.doc.createElement(t.tagName);return r.setAttribute("type",t.type),a.eachKey(t.attrs,function(t,e){r.setAttribute(t,e)}),r},h.prototype._insertCursor=function(t,e){this._writeImpl('<span id="'+e+'"/>');var r=this.doc.getElementById(e);r&&r.parentNode.replaceChild(t,r)},h.prototype._onScriptStart=function(t){t.outerWrites=this.writeQueue,this.writeQueue=[],this.scriptStack.unshift(t)},h.prototype._onScriptDone=function(t){t===this.scriptStack[0]?(this.scriptStack.shift(),this.write.apply(this,t.outerWrites),!this.scriptStack.length&&this.deferredRemote&&(this._onScriptStart(this.deferredRemote),this.deferredRemote=null)):this.options.error({msg:"Bad script nesting or script finished twice"})},h.prototype._writeScriptToken=function(t,e){var r=this._buildScript(t),n=this._shouldRelease(r),o=this.options.afterAsync;t.src&&(r.src=t.src,this._scriptLoadHandler(r,n?o:function(){e(),o()}));try{this._insertCursor(r,f),r.src&&!n||e()}catch(t){this.options.error(t),e()}},h.prototype._buildScript=function(t){var r=this.doc.createElement(t.tagName);return a.eachKey(t.attrs,function(t,e){r.setAttribute(t,e)}),t.content&&(r.text=t.content),r},h.prototype._scriptLoadHandler=function(e,r){function n(){e=e.onload=e.onreadystatechange=e.onerror=null}var o=this.options.error;function t(){n(),null!=r&&r(),r=null}function i(t){n(),o(t),null!=r&&r(),r=null}function a(t,e){var r=t["on"+e];null!=r&&(t["_on"+e]=r)}a(e,"load"),a(e,"error"),s(e,{onload:function(){if(e._onload)try{e._onload.apply(this,Array.prototype.slice.call(arguments,0))}catch(t){i({msg:"onload handler failed "+t+" @ "+e.src})}t()},onerror:function(){if(e._onerror)try{e._onerror.apply(this,Array.prototype.slice.call(arguments,0))}catch(t){return void i({msg:"onerror handler failed "+t+" @ "+e.src})}i({msg:"remote script failed "+e.src})},onreadystatechange:function(){/^(loaded|complete)$/.test(e.readyState)&&t()}})},h.prototype._shouldRelease=function(t){return!/^script$/i.test(t.nodeName)||!!(this.options.releaseAsync&&t.src&&t.hasAttribute("async"))},h);function h(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,h),this.root=t,this.options=e,this.doc=t.ownerDocument,this.win=this.doc.defaultView||this.doc.parentWindow,this.parser=new i.default("",{autoFix:e.autoFix}),this.actuals=[t],this.proxyHistory="",this.proxyRoot=this.doc.createElement(t.nodeName),this.scriptStack=[],this.writeQueue=[],u(this.proxyRoot,"proxyof",0)}e.default=d},function(t,e,r){var n;n=function(){return o={},r.m=n=[function(t,e,r){"use strict";var n,o=r(1),i=(n=o)&&n.__esModule?n:{default:n};t.exports=i.default},function(t,e,r){"use strict";e.__esModule=!0;var n,a=u(r(2)),o=u(r(3)),i=r(6),s=(n=i)&&n.__esModule?n:{default:n},c=r(5);function u(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e}var l={comment:/^<!--/,endTag:/^<\//,atomicTag:/^<\s*(script|style|noscript|iframe|textarea)[\s\/>]/i,startTag:/^</,chars:/^[^<]/},p=(f.prototype.append=function(t){this.stream+=t},f.prototype.prepend=function(t){this.stream=t+this.stream},f.prototype._readTokenImpl=function(){var t=this._peekTokenImpl();if(t)return this.stream=this.stream.slice(t.length),t},f.prototype._peekTokenImpl=function(){for(var t in l)if(l.hasOwnProperty(t)&&l[t].test(this.stream)){var e=o[t](this.stream);if(e)return"startTag"===e.type&&/script|style/i.test(e.tagName)?null:(e.text=this.stream.substr(0,e.length),e)}},f.prototype.peekToken=function(){return this._peekToken()},f.prototype.readToken=function(){return this._readToken()},f.prototype.readTokens=function(t){for(var e=void 0;e=this.readToken();)if(t[e.type]&&!1===t[e.type](e))return},f.prototype.clear=function(){var t=this.stream;return this.stream="",t},f.prototype.rest=function(){return this.stream},f);function f(){var t=this,e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",r=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,f),this.stream=e;var n=!1,o={};for(var i in a)a.hasOwnProperty(i)&&(r.autoFix&&(o[i+"Fix"]=!0),n=n||o[i+"Fix"]);n?(this._readToken=(0,s.default)(this,o,function(){return t._readTokenImpl()}),this._peekToken=(0,s.default)(this,o,function(){return t._peekTokenImpl()})):(this._readToken=this._readTokenImpl,this._peekToken=this._peekTokenImpl)}for(var d in(e.default=p).tokenToString=function(t){return t.toString()},p.escapeAttributes=function(t){var e={};for(var r in t)t.hasOwnProperty(r)&&(e[r]=(0,c.escapeQuotes)(t[r],null));return e},p.supports=a)a.hasOwnProperty(d)&&(p.browserHasFlaw=p.browserHasFlaw||!a[d]&&d)},function(t,e){"use strict";var r=!(e.__esModule=!0),n=!1,o=window.document.createElement("div");try{var i="<P><I></P></I>";o.innerHTML=i,e.tagSoup=r=o.innerHTML!==i}catch(t){e.tagSoup=r=!1}try{o.innerHTML="<P><i><P></P></i></P>",e.selfClose=n=2===o.childNodes.length}catch(t){e.selfClose=n=!1}o=null,e.tagSoup=r,e.selfClose=n},function(t,e,r){"use strict";e.__esModule=!0;var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};e.comment=function(t){var e=t.indexOf("--\x3e");if(0<=e)return new s.CommentToken(t.substr(4,e-1),e+3)},e.chars=function(t){var e=t.indexOf("<");return new s.CharsToken(0<=e?e:t.length)},e.startTag=o,e.atomicTag=function(t){var e=o(t);if(e){var r=t.slice(e.length);if(r.match(new RegExp("</\\s*"+e.tagName+"\\s*>","i"))){var n=r.match(new RegExp("([\\s\\S]*?)</\\s*"+e.tagName+"\\s*>","i"));if(n)return new s.AtomicTagToken(e.tagName,n[0].length+e.length,e.attrs,e.booleanAttrs,n[1])}}},e.endTag=function(t){var e=t.match(c.endTag);if(e)return new s.EndTagToken(e[1],e[0].length)};var s=r(4),c={startTag:/^<([\-A-Za-z0-9_]+)((?:\s+[\w\-]+(?:\s*=?\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)>/,endTag:/^<\/([\-A-Za-z0-9_]+)[^>]*>/,attr:/(?:([\-A-Za-z0-9_]+)\s*=\s*(?:(?:"((?:\\.|[^"])*)")|(?:'((?:\\.|[^'])*)')|([^>\s]+)))|(?:([\-A-Za-z0-9_]+)(\s|$)+)/g,fillAttr:/^(checked|compact|declare|defer|disabled|ismap|multiple|nohref|noresize|noshade|nowrap|readonly|selected)$/i};function o(t){var r,n,o;if(-1!==t.indexOf(">")){var e=t.match(c.startTag);if(e){var i=(r={},n={},o=e[2],e[2].replace(c.attr,function(t,e){arguments[2]||arguments[3]||arguments[4]||arguments[5]?arguments[5]?(r[arguments[5]]="",n[arguments[5]]=!0):r[e]=arguments[2]||arguments[3]||arguments[4]||c.fillAttr.test(e)&&e||"":r[e]="",o=o.replace(t,"")}),{v:new s.StartTagToken(e[1],e[0].length,r,n,!!e[3],o.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""))});if("object"===(void 0===i?"undefined":a(i)))return i.v}}}},function(t,e,r){"use strict";e.__esModule=!0,e.EndTagToken=e.AtomicTagToken=e.StartTagToken=e.TagToken=e.CharsToken=e.CommentToken=e.Token=void 0;var a=r(5);function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.Token=function t(e,r){s(this,t),this.type=e,this.length=r,this.text=""},e.CommentToken=(n.prototype.toString=function(){return"\x3c!--"+this.content},n);function n(t,e){s(this,n),this.type="comment",this.length=e||(t?t.length:0),this.text="",this.content=t}e.CharsToken=(o.prototype.toString=function(){return this.text},o);function o(t){s(this,o),this.type="chars",this.length=t,this.text=""}var i=e.TagToken=(c.formatTag=function(t,e){var r=1<arguments.length&&void 0!==e?e:null,n="<"+t.tagName;for(var o in t.attrs)if(t.attrs.hasOwnProperty(o)){n+=" "+o;var i=t.attrs[o];void 0!==t.booleanAttrs&&void 0!==t.booleanAttrs[o]||(n+='="'+(0,a.escapeQuotes)(i)+'"')}return t.rest&&(n+=" "+t.rest),t.unary&&!t.html5Unary?n+="/>":n+=">",null!=r&&(n+=r+"</"+t.tagName+">"),n},c);function c(t,e,r,n,o){s(this,c),this.type=t,this.length=r,this.text="",this.tagName=e,this.attrs=n,this.booleanAttrs=o,this.unary=!1,this.html5Unary=!1}e.StartTagToken=(u.prototype.toString=function(){return i.formatTag(this)},u);function u(t,e,r,n,o,i){s(this,u),this.type="startTag",this.length=e,this.text="",this.tagName=t,this.attrs=r,this.booleanAttrs=n,this.html5Unary=!1,this.unary=o,this.rest=i}e.AtomicTagToken=(l.prototype.toString=function(){return i.formatTag(this,this.content)},l);function l(t,e,r,n,o){s(this,l),this.type="atomicTag",this.length=e,this.text="",this.tagName=t,this.attrs=r,this.booleanAttrs=n,this.unary=!1,this.html5Unary=!1,this.content=o}e.EndTagToken=(p.prototype.toString=function(){return"</"+this.tagName+">"},p);function p(t,e){s(this,p),this.type="endTag",this.length=e,this.text="",this.tagName=t}},function(t,e){"use strict";e.__esModule=!0,e.escapeQuotes=function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"";return t?t.replace(/([^"]*)"/g,function(t,e){return/\\/.test(e)?e+'"':e+'\\"'}):e}},function(t,e){"use strict";e.__esModule=!0,e.default=function(r,n,e){var o=function(){var t=[];return t.last=function(){return this[this.length-1]},t.lastTagNameEq=function(t){var e=this.last();return e&&e.tagName&&e.tagName.toUpperCase()===t.toUpperCase()},t.containsTagName=function(t){for(var e,r=0;e=this[r];r++)if(e.tagName===t)return!0;return!1},t}(),i={startTag:function(t){var e=t.tagName;"TR"===e.toUpperCase()&&o.lastTagNameEq("TABLE")?(r.prepend("<TBODY>"),a()):n.selfCloseFix&&s.test(e)&&o.containsTagName(e)?o.lastTagNameEq(e)?u(r,o):(r.prepend("</"+t.tagName+">"),a()):t.unary||o.push(t)},endTag:function(t){o.last()?n.tagSoupFix&&!o.lastTagNameEq(t.tagName)?u(r,o):o.pop():n.tagSoupFix&&(e(),a())}};function a(){var t=function(t,e){var r=t.stream,n=c(e());return t.stream=r,n}(r,e);t&&i[t.type]&&i[t.type](t)}return function(){return a(),c(e())}};var r=/^(AREA|BASE|BASEFONT|BR|COL|FRAME|HR|IMG|INPUT|ISINDEX|LINK|META|PARAM|EMBED)$/i,s=/^(COLGROUP|DD|DT|LI|OPTIONS|P|TD|TFOOT|TH|THEAD|TR)$/i;function c(t){return t&&"startTag"===t.type&&(t.unary=r.test(t.tagName)||t.unary,t.html5Unary=!/\/>$/.test(t.text)),t}function u(t,e){var r=e.pop();t.prepend("</"+r.tagName+">")}}],r.c=o,r.p="",r(0);function r(t){if(o[t])return o[t].exports;var e=o[t]={exports:{},id:t,loaded:!1};return n[t].call(e.exports,e,e.exports,r),e.loaded=!0,e.exports}var n,o},t.exports=n()},function(t,e){"use strict";e.__esModule=!0;var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};function o(t){return null!=t}function i(t,e,r){var n=void 0,o=t&&t.length||0;for(n=0;n<o;n++)e.call(r,t[n],n)}function a(t,e,r){for(var n in t)t.hasOwnProperty(n)&&e.call(r,n,t[n])}function r(t,e){return!(!t||"startTag"!==t.type&&"atomicTag"!==t.type||!("tagName"in t))&&!!~t.tagName.toLowerCase().indexOf(e)}e.existy=o,e.isFunction=function(t){return"function"==typeof t},e.each=i,e.eachKey=a,e.defaults=function(r,t){return r=r||{},a(t,function(t,e){o(r[t])||(r[t]=e)}),r},e.toArray=function(r){try{return Array.prototype.slice.call(r)}catch(t){var e=function(){var e=[];return i(r,function(t){e.push(t)}),{v:e}}();if("object"===(void 0===e?"undefined":n(e)))return e.v}},e.last=function(t){return t[t.length-1]},e.isTag=r,e.isScript=function(t){return r(t,"script")},e.isStyle=function(t){return r(t,"style")}}],r.c=o,r.p="",r(0);function r(t){if(o[t])return o[t].exports;var e=o[t]={exports:{},id:t,loaded:!1};return n[t].call(e.exports,e,e.exports,r),e.loaded=!0,e.exports}var n,o},t.exports=n()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.newEnvironment=function(r){function e(){return r.top!==r&&!function(t){try{return t.top.location.toString(),!0}catch(t){return!1}}(r)}return{isMobileApp:function(t){return t&&"mobile-app"===t},isCrossDomain:e,isSafeFrame:function(){return!(!r.$sf||!r.$sf.ext)},isAmp:function(t){return"string"==typeof t&&""!==t&&e()},canLocatePrebid:function(){for(var t=!1,e=r;!t;){try{if(e.pbjs){t=!0;break}}catch(t){}if(e===window.top)break;e=e.parent}return t}}}}]);
    
    /***/ }),
    
    /***/ "./src_new/adapterEntry.js":
    /*!*********************************!*\
      !*** ./src_new/adapterEntry.js ***!
      \*********************************/
    /*! no static exports found */
    /***/ (function(module, exports, __webpack_require__) {
    
    var util = __webpack_require__(/*! ./util.js */ "./src_new/util.js");
    function AdapterEntry(adapterID) {
      this.adapterID = adapterID;
      this.callInitiatedTime = util.getCurrentTimestampInMs();
      this.bids = {};
      this.lastBidID = "";
    }
    AdapterEntry.prototype.getCallInitiatedTime = function () {
      return this.callInitiatedTime;
    };
    AdapterEntry.prototype.getLastBidID = function () {
      return this.lastBidID;
    };
    AdapterEntry.prototype.getBid = function (bidID) {
      /* istanbul ignore else */
      if (util.isOwnProperty(this.bids, bidID)) {
        return this.bids[bidID];
      }
      return null;
    };
    AdapterEntry.prototype.setNewBid = function (theBid) {
      delete this.bids[this.lastBidID];
      var bidID = theBid.getBidID();
      this.bids[bidID] = theBid;
      this.lastBidID = bidID;
    };
    module.exports.AdapterEntry = AdapterEntry;
    
    /***/ }),
    
    /***/ "./src_new/adapters/prebid.js":
    /*!************************************!*\
      !*** ./src_new/adapters/prebid.js ***!
      \************************************/
    /*! no static exports found */
    /***/ (function(module, exports, __webpack_require__) {
    
    /*
        Note:
            Whenever we support a new PB adapter, we need to check if it needs actual sizes to be passed,
                if so we will need to add special handling
            PreBid does not do mandatory parameters checking
    */
    var CONFIG = __webpack_require__(/*! ../config.js */ "./src_new/config.js");
    var CONSTANTS = __webpack_require__(/*! ../constants.js */ "./src_new/constants.js");
    var BID = __webpack_require__(/*! ../bid.js */ "./src_new/bid.js");
    var util = __webpack_require__(/*! ../util.js */ "./src_new/util.js");
    var bidManager = __webpack_require__(/*! ../bidManager.js */ "./src_new/bidManager.js");
    var CONF = __webpack_require__(/*! ../conf.js */ "./src_new/conf.js");
    var parentAdapterID = CONSTANTS.COMMON.PARENT_ADAPTER_PREBID;
    var pbNameSpace = /*CONFIG.isIdentityOnly() ? CONSTANTS.COMMON.IH_NAMESPACE : */CONSTANTS.COMMON.PREBID_NAMESPACE;
    
    /* start-test-block */
    exports.parentAdapterID = parentAdapterID;
    /* end-test-block */
    var kgpvMap = {};
    
    /* start-test-block */
    exports.kgpvMap = kgpvMap;
    /* end-test-block */
    
    var refThis = this;
    var onEventAdded = false;
    var onAuctionEndEventAdded = false;
    var isPrebidPubMaticAnalyticsEnabled = CONFIG.isPrebidPubMaticAnalyticsEnabled();
    var isSingleImpressionSettingEnabled = CONFIG.isSingleImpressionSettingEnabled();
    var defaultAliases = CONSTANTS.DEFAULT_ALIASES;
    
    /* start-test-block */
    exports.isSingleImpressionSettingEnabled = isSingleImpressionSettingEnabled;
    /* end-test-block */
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    function transformPBBidToOWBid(bid, kgpv, regexPattern) {
      var rxPattern = regexPattern || bid.regexPattern || undefined;
      var theBid = BID.createBid(bid.bidderCode, kgpv);
      var pubmaticServerErrorCode = parseInt(bid.pubmaticServerErrorCode);
      if (!!CONFIG.getAdServerCurrency()) {
        // if a bidder has same currency as of pbConf.currency.adServerCurrency then Prebid does not set pbBid.originalCurrency and pbBid.originalCurrency value
        // thus we need special handling
        if (!util.isOwnProperty(bid, "originalCpm")) {
          bid.originalCpm = bid.cpm;
        }
        if (!util.isOwnProperty(bid, "originalCurrency")) {
          bid.originalCurrency = util.getCurrencyToDisplay();
        }
      }
      if (bid.status == CONSTANTS.BID_STATUS.BID_REJECTED) {
        theBid.setGrossEcpm(bid.originalCpm, bid.originalCurrency, util.getCurrencyToDisplay(), bid.status);
      } else {
        theBid.setGrossEcpm(bid.cpm);
      }
      theBid.setDealID(bid.dealId);
      theBid.setDealChannel(bid.dealChannel);
      theBid.setAdHtml(bid.ad || "");
      theBid.setAdUrl(bid.adUrl || "");
      theBid.setWidth(bid.width);
      theBid.setHeight(bid.height);
      theBid.setMi(bid.mi);
      if (bid.videoCacheKey) {
        theBid.setVastCache(bid.videoCacheKey);
      }
      if (bid.vastUrl) {
        theBid.setVastUrl(bid.vastUrl);
      }
      if (bid.vastXml) {
        theBid.setVastUrl(bid.vastUrl);
      }
      if (bid.renderer) {
        theBid.setRenderer(bid.renderer);
      }
      if (bid.native) {
        theBid.setNative(bid.native);
      }
      if (rxPattern) {
        theBid.setRegexPattern(rxPattern);
      }
      if (bid.mediaType == CONSTANTS.FORMAT_VALUES.VIDEO) {
        if (bid.videoCacheKey) {
          theBid.setcacheUUID(bid.videoCacheKey);
        }
        theBid.updateBidId(bid.adUnitCode);
      }
      if (bid.mediaType && (parseFloat(bid.cpm) > 0 || bid.status == CONSTANTS.BID_STATUS.BID_REJECTED)) {
        theBid.setAdFormat(bid.adHtml, bid.mediaType);
      }
      if (bid.sspID) {
        theBid.setsspID(bid.sspID);
      }
      theBid.setReceivedTime(bid.responseTimestamp);
      theBid.setServerSideResponseTime(bid.serverSideResponseTime);
      // Check if currency conversion is enabled or not
      /*istanbul ignore else */
      if (CONFIG.getAdServerCurrency()) {
        theBid.setOriginalCpm(window.parseFloat(bid.originalCpm));
        theBid.setOriginalCurrency(bid.originalCurrency);
        if (util.isFunction(bid.getCpmInNewCurrency)) {
          theBid.setAnalyticsCpm(window.parseFloat(bid.getCpmInNewCurrency(CONSTANTS.COMMON.ANALYTICS_CURRENCY)), bid.status);
        } else {
          theBid.setAnalyticsCpm(theBid.getGrossEcpm(), bid.status);
        }
      }
      /*
          errorCodes meaning:
          1 = UNMAPPED_SLOT_ERROR
          2 = MISSING_CONF_ERROR
          3 = TIMEOUT_ERROR
          4 = NO_BID_PREBID_ERROR
          5 = PARTNER_TIMEDOUT_ERROR
          6 = INVALID_CONFIGURATION_ERROR
          7 = NO_GDPR_CONSENT_ERROR
          11 = ALL_PARTNER_THROTTLED
          12 = PARTNER_THROTTLED
          500 = API_RESPONSE_ERROR
      */
      if (pubmaticServerErrorCode === 1 || pubmaticServerErrorCode === 2 || pubmaticServerErrorCode === 6 || pubmaticServerErrorCode === 11 || pubmaticServerErrorCode === 12) {
        theBid.setDefaultBidStatus(-1);
        theBid.setWidth(0);
        theBid.setHeight(0);
      } else if (pubmaticServerErrorCode === 3 || pubmaticServerErrorCode === 4 || pubmaticServerErrorCode === 5) {
        theBid.setDefaultBidStatus(0);
        /*istanbul ignore else */
        if (theBid.isServerSide === 0) {
          theBid.setPostTimeoutStatus();
        }
      } else {
        pubmaticServerErrorCode && theBid.setDefaultBidStatus(1);
      }
      util.forEachOnObject(bid.adserverTargeting, function (key, value) {
        if (key !== "hb_format" && key !== "hb_source") {
          theBid.setKeyValuePair(key, value);
        }
      });
      theBid.setPbBid(bid);
      return theBid;
    }
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    /* start-test-block */
    exports.transformPBBidToOWBid = transformPBBidToOWBid;
    /* end-test-block */
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    // This function is used to check size for the winning kgpv and if size is different then winning then modify it
    // to have same code for logging and tracking 
    function checkAndModifySizeOfKGPVIfRequired(bid, kgpv) {
      var responseObject = {
        "responseKGPV": "",
        "responseRegex": ""
      };
    
      // Logic to find out KGPV for partner for which the bid is recieved.
      // Need to check for No Bid Case.
      kgpv.kgpvs.length > 0 && kgpv.kgpvs.forEach(function (ele) {
        /* istanbul ignore else */
        if (bid.bidderCode == ele.adapterID) {
          responseObject.responseKGPV = ele.kgpv;
          responseObject.responseRegex = ele.regexPattern;
        }
      });
      var responseIdArray = responseObject.responseKGPV.split("@");
      var sizeIndex = 1;
      var isRegex = false;
      /* istanbul ignore else */
      if (responseIdArray && (responseIdArray.length == 2 || responseIdArray.length == 3 && (sizeIndex = 2) && (isRegex = true)) && bid.mediaType != "video") {
        var responseIdSize = responseIdArray[sizeIndex];
        var responseIndex = null;
        // Below check if ad unit index is present then ignore it
        // TODO: Confirm it needs to be ignored or not
        /* istanbul ignore else */
        if (responseIdArray[sizeIndex].indexOf(":") > 0) {
          responseIdSize = responseIdArray[sizeIndex].split(":")[0];
          responseIndex = responseIdArray[sizeIndex].split(":")[1];
        }
        /* istanbul ignore else */
        if (bid.getSize() && bid.getSize() != responseIdSize && bid.getSize().toUpperCase() != "0X0") {
          // Below check is for size level mapping
          // ex. 300x250@300X250 is KGPV generated for first size but the winning size is 728x90 
          // then new KGPV will be replaced to 728x90@728X90
          /* istanbul ignore else */
          if (responseIdArray[0].toUpperCase() == responseIdSize.toUpperCase()) {
            responseIdArray[0] = bid.getSize().toLowerCase();
          }
          if (isRegex) {
            responseObject.responseKGPV = responseIdArray[0] + "@" + responseIdArray[1] + "@" + bid.getSize();
          } else {
            responseObject.responseKGPV = responseIdArray[0] + "@" + bid.getSize();
          }
          // Below check is to make consistent behaviour with ad unit index
          // it again appends index if it was originally present
          if (responseIndex) {
            responseObject.responseKGPV = responseObject.responseKGPV + ":" + responseIndex;
          }
        }
      }
      return responseObject;
    }
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    /* start-test-block */
    exports.checkAndModifySizeOfKGPVIfRequired = checkAndModifySizeOfKGPVIfRequired;
    /* end-test-block */
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    function pbBidStreamHandler(pbBid) {
      var responseID = pbBid.adUnitCode || "";
    
      // NEW APPROACH
      //todo: unit-test cases pending
      /* istanbul ignore else */
      if (util.isOwnProperty(refThis.kgpvMap, responseID)) {
        if (!!pbBid.floorData) {
          window.PWT.floorData[window.PWT.bidMap[pbBid.adUnitCode].impressionID]['floorResponseData'] = pbBid.floorData;
        }
        /**Special Hack for pubmaticServer for tracker/logger kgpv */
        /* istanbul ignore else */
        if (pbBid.bidderCode === 'pubmaticServer') {
          pbBid.bidderCode = pbBid.originalBidder;
        }
    
        // If Single impression is turned on then check and modify kgpv as per bid response size
        /* istanbul ignore else */
        if (refThis.isSingleImpressionSettingEnabled) {
          // Assinging kbpv after modifying and will be used for logger and tracker purposes
          // this field will be replaced everytime a bid is received with single impression feature on
          var kgpvAndRegexOfBid = refThis.checkAndModifySizeOfKGPVIfRequired(pbBid, refThis.kgpvMap[responseID]);
          refThis.kgpvMap[responseID].kgpv = kgpvAndRegexOfBid.responseKGPV;
          refThis.kgpvMap[responseID].regexPattern = kgpvAndRegexOfBid.responseRegex;
          // : Put a field Regex Pattern in KGPVMAP so that it can be passed on to the bid and to the logger
          // Something like this refThis.kgpvMap[responseID].regexPattern = pbBid.refThis.kgpvMap[responseID].regexPattern;
        }
    
        /*
            - special handling for serverSideEnabled
            - get the actual divId = kgpvMap[ pbBid.adUnitCode ].divID
            - now check if divID @ pbBid.bidderCode @ pbBid.width X pbBid.height exists in kgpvMap
                if yes this is new responseID
            - else check if divID @ pbBid.bidderCode exists in kgpvMap
                if yes this is new responseID
            - else do nothing, log failure
                Pros:
                no need of divid and kgpv to be returned in bid from prebid
                    no need to add custom keys in Prebid bid object, they might standerdize it in future
        */
    
        /* istanbul ignore else */
        if (pbBid.bidderCode && CONFIG.isServerSideAdapter(pbBid.bidderCode)) {
          var divID = refThis.kgpvMap[responseID].divID;
          if (!refThis.isSingleImpressionSettingEnabled) {
            var temp1 = refThis.getPBCodeWithWidthAndHeight(divID, pbBid.bidderCode, pbBid.width, pbBid.height);
            var temp2 = refThis.getPBCodeWithoutWidthAndHeight(divID, pbBid.bidderCode);
            if (util.isOwnProperty(refThis.kgpvMap, temp1)) {
              responseID = temp1;
            } else if (util.isOwnProperty(refThis.kgpvMap, temp2)) {
              responseID = temp2;
            } else {
              util.logWarning("Failed to find kgpv details for S2S-adapter:" + pbBid.bidderCode);
              return;
            }
          }
          pbBid.ss = CONFIG.isServerSideAdapter(pbBid.bidderCode) ? 1 : 0;
        }
    
        /* istanbul ignore else */
        if (pbBid.bidderCode) {
          // Adding a hook for publishers to modify the bid we have to store
          // we should NOT call the hook for defaultbids and post-timeout bids
          //			default bids handled here
          //			timeoutForPrebid check is added to avoid Hook call for post-timeout bids
          // Here slotID, adapterID, and latency are read-only and theBid can be modified
          if (pbBid.timeToRespond < CONFIG.getTimeout() - CONSTANTS.CONFIG.TIMEOUT_ADJUSTMENT) {
            util.handleHook(CONSTANTS.HOOKS.BID_RECEIVED, [refThis.kgpvMap[responseID].divID, pbBid]);
          }
          bidManager.setBidFromBidder(refThis.kgpvMap[responseID].divID, refThis.transformPBBidToOWBid(pbBid, refThis.kgpvMap[responseID].kgpv, refThis.kgpvMap[responseID].regexPattern));
        }
      } else {
        util.logWarning("Failed to find pbBid.adUnitCode in kgpvMap, pbBid.adUnitCode:" + pbBid.adUnitCode);
      }
    }
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    /* start-test-block */
    exports.pbBidStreamHandler = pbBidStreamHandler;
    /* end-test-block */
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    function pbBidRequestHandler(pbBid) {
      pbBid.bids.forEach(function (oBid) {
        if (!window.PWT.floorData[window.PWT.bidMap[oBid.adUnitCode].impressionID]) {
          window.PWT.floorData[window.PWT.bidMap[oBid.adUnitCode].impressionID] = {};
        }
        window.PWT.floorData[window.PWT.bidMap[oBid.adUnitCode].impressionID]['floorRequestData'] = oBid.floorData;
      });
    }
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    /* start-test-block */
    exports.pbBidRequestHandler = pbBidRequestHandler;
    /* end-test-block */
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    function pbAuctionEndHandler(args) {
      window.PWT.newAdUnits = window.PWT.newAdUnits || {};
      args.adUnits.forEach(function (adUnit) {
        if (!!adUnit.pubmaticAutoRefresh) {
          if (!window.PWT.newAdUnits[window.PWT.bidMap[adUnit.code].impressionID]) {
            window.PWT.newAdUnits[window.PWT.bidMap[adUnit.code].impressionID] = {};
          }
          if (!window.PWT.newAdUnits[window.PWT.bidMap[adUnit.code].impressionID][adUnit.code]) {
            window.PWT.newAdUnits[window.PWT.bidMap[adUnit.code].impressionID][adUnit.code] = {};
          }
          window.PWT.newAdUnits[window.PWT.bidMap[adUnit.code].impressionID][adUnit.code].pubmaticAutoRefresh = adUnit.pubmaticAutoRefresh;
        }
      });
    }
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    /* start-test-block */
    exports.pbAuctionEndHandler = pbAuctionEndHandler;
    /* end-test-block */
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    function getPBCodeWithWidthAndHeight(divID, adapterID, width, height) {
      return divID + "@" + adapterID + "@" + width + "X" + height;
    }
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    /* start-test-block */
    exports.getPBCodeWithWidthAndHeight = getPBCodeWithWidthAndHeight;
    /* end-test-block */
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    function getPBCodeWithoutWidthAndHeight(divID, adapterID) {
      return divID + "@" + adapterID;
    }
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    /* start-test-block */
    exports.getPBCodeWithoutWidthAndHeight = getPBCodeWithoutWidthAndHeight;
    /* end-test-block */
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    function isAdUnitsCodeContainBidder(adUnits, code, adapterID) {
      var bidderPresent = false;
      if (util.isOwnProperty(adUnits, code)) {
        adUnits[code].bids.forEach(function (bid) {
          if (bid.bidder == adapterID) {
            bidderPresent = true;
          }
        });
      }
      return bidderPresent;
    }
    
    /* start-test-block */
    exports.isAdUnitsCodeContainBidder = isAdUnitsCodeContainBidder;
    /* end-test-block */
    
    function generatedKeyCallbackForPbAnalytics(adapterID, adUnits, adapterConfig, impressionID, generatedKey, kgpConsistsWidthAndHeight, currentSlot, keyConfig, currentWidth, currentHeight, regexPattern) {
      var code, sizes, divID, adUnitId;
      var mediaTypeConfig;
      var partnerConfig;
    
      //If we are using PubMaticServerBidAdapatar then serverSideEabled: do not add config into adUnits. 
      //If we are using PrebidServerBidAdapatar then we need to add config into adUnits.
      if (CONFIG.isServerSideAdapter(adapterID) && CONFIG.usePBSAdapter() != true) {
        util.log("Not calling adapter: " + adapterID + ", for " + generatedKey + ", as it is serverSideEnabled.");
        return;
      }
      divID = currentSlot.getDivID();
      code = currentSlot.getDivID();
      sizes = currentSlot.getSizes();
      adUnitId = currentSlot.getAdUnitID();
    
      /* istanbul ignore else */
      var adUnitConfig = util.getAdUnitConfig(sizes, currentSlot);
      mediaTypeConfig = adUnitConfig.mediaTypeObject;
      if (mediaTypeConfig.partnerConfig) {
        partnerConfig = mediaTypeConfig.partnerConfig;
      }
      if (!util.isOwnProperty(adUnits, code)) {
        //TODO: Remove sizes from below as it will be deprecated soon in prebid
        // Need to check pubmaticServerBidAdapter in our fork after this change.
        adUnits[code] = {
          code: code,
          mediaTypes: {},
          sizes: sizes,
          adUnitId: adUnitId,
          bids: [],
          divID: divID
        };
        //Assigning it individually since mediaTypes doesn't take any extra param apart from these.
        // And We are now also getting partnerConfig for different partners
        if (mediaTypeConfig.banner) {
          adUnits[code].mediaTypes["banner"] = mediaTypeConfig.banner;
        }
        if (mediaTypeConfig.native) {
          adUnits[code].mediaTypes["native"] = mediaTypeConfig.native;
        }
        if (mediaTypeConfig.video) {
          adUnits[code].mediaTypes["video"] = mediaTypeConfig.video;
        }
        if (adUnitConfig.renderer) {
          adUnits[code]["renderer"] = adUnitConfig.renderer;
        }
        window.PWT.adUnits = window.PWT.adUnits || {};
        window.PWT.adUnits[code] = adUnits[code];
      } else if (CONFIG.isSingleImpressionSettingEnabled()) {
        // following function call basically checks whether the adapter is already configured for the given code in adunits object
        if (isAdUnitsCodeContainBidder(adUnits, code, adapterID)) {
          return;
        }
      }
      pushAdapterParamsInAdunits(adapterID, generatedKey, impressionID, keyConfig, adapterConfig, currentSlot, code, adUnits, partnerConfig, regexPattern);
    }
    exports.generatedKeyCallbackForPbAnalytics = generatedKeyCallbackForPbAnalytics;
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    function generatedKeyCallback(adapterID, adUnits, adapterConfig, impressionID, generatedKey, kgpConsistsWidthAndHeight, currentSlot, keyConfig, currentWidth, currentHeight, regexPattern) {
      var code,
        sizes,
        divID = currentSlot.getDivID();
      var adUnitId = currentSlot.getAdUnitID();
      var mediaTypeConfig;
      var partnerConfig;
      if (!refThis.isSingleImpressionSettingEnabled) {
        if (kgpConsistsWidthAndHeight) {
          code = refThis.getPBCodeWithWidthAndHeight(divID, adapterID, currentWidth, currentHeight);
          sizes = [[currentWidth, currentHeight]];
        } else {
          code = refThis.getPBCodeWithoutWidthAndHeight(divID, adapterID);
          sizes = currentSlot.getSizes();
        }
        refThis.kgpvMap[code] = {
          kgpv: generatedKey,
          divID: divID,
          regexPattern: regexPattern
        };
      } else {
        /* This will be executed in case single impression feature is enabled.
        Below statements assign code as div and sizes as all sizes of ad slot
        it generates kgpvmap consisting of kgpvs as property 
        if in kgpv map code exists and kgpv exists then 
            if a adapter with a single kgpv exists in kgpvs then it ignores and returns from this function
            if a adapter does not exist for the code then a entry is being pushed in kgpvs with adapterid and kgpv for the bidder
         if code does not consists in kgpv object then a entry is made with adapter first calling it.*/
        code = currentSlot.getDivID();
        sizes = currentSlot.getSizes();
        var adapterAlreadyExsistsInKGPVS = false;
        if (refThis.kgpvMap[code] && refThis.kgpvMap[code].kgpvs && refThis.kgpvMap[code].kgpvs.length > 0) {
          util.forEachOnArray(refThis.kgpvMap[code].kgpvs, function (idx, kgpv) {
            // We want to have one adapter entry for one bidder and one code/adSlot
            /*istanbul ignore else*/
            if (kgpv.adapterID == adapterID) {
              adapterAlreadyExsistsInKGPVS = true;
            }
          });
          /*istanbul ignore else*/
          if (adapterAlreadyExsistsInKGPVS && isAdUnitsCodeContainBidder(adUnits, code, adapterID)) {
            return;
          }
        } else {
          refThis.kgpvMap[code] = {
            kgpvs: [],
            divID: divID
          };
        }
        if (!adapterAlreadyExsistsInKGPVS) {
          var kgpv = {
            adapterID: adapterID,
            kgpv: generatedKey,
            regexPattern: regexPattern
          };
          refThis.kgpvMap[code].kgpvs.push(kgpv);
        }
      }
    
      //If we are using PubMaticServerBidAdapatar then serverSideEabled: do not add config into adUnits. 
      //If we are using PrebidServerBidAdapatar then we need to add config into adUnits.
      if (CONFIG.isServerSideAdapter(adapterID) && CONFIG.usePBSAdapter() != true) {
        util.log("Not calling adapter: " + adapterID + ", for " + generatedKey + ", as it is serverSideEnabled.");
        return;
      }
    
      /* istanbul ignore else */
      var adUnitConfig = util.getAdUnitConfig(sizes, currentSlot);
      mediaTypeConfig = adUnitConfig.mediaTypeObject;
      if (mediaTypeConfig.partnerConfig) {
        partnerConfig = mediaTypeConfig.partnerConfig;
      }
      if (!util.isOwnProperty(adUnits, code)) {
        //TODO: Remove sizes from below as it will be deprecated soon in prebid
        // Need to check pubmaticServerBidAdapter in our fork after this change.
        adUnits[code] = {
          code: code,
          mediaTypes: {},
          sizes: sizes,
          adUnitId: adUnitId,
          bids: [],
          divID: divID
        };
        //Assigning it individually since mediaTypes doesn't take any extra param apart from these.
        // And We are now also getting partnerConfig for different partners
        if (mediaTypeConfig.banner) {
          adUnits[code].mediaTypes["banner"] = mediaTypeConfig.banner;
        }
        if (mediaTypeConfig.native) {
          adUnits[code].mediaTypes["native"] = mediaTypeConfig.native;
        }
        if (mediaTypeConfig.video) {
          adUnits[code].mediaTypes["video"] = mediaTypeConfig.video;
        }
        if (adUnitConfig.renderer) {
          adUnits[code]["renderer"] = adUnitConfig.renderer;
        }
        window.PWT.adUnits = window.PWT.adUnits || {};
        window.PWT.adUnits[code] = adUnits[code];
      } else if (refThis.isSingleImpressionSettingEnabled) {
        if (isAdUnitsCodeContainBidder(adUnits, code, adapterID)) {
          return;
        }
      }
    
      // todo: is this block required? isn't it covered in above if block?
      // in case there are multiple bidders ,we don't generate the config again but utilize the existing mediatype.
      if (util.isOwnProperty(adUnits, code)) {
        mediaTypeConfig = adUnits[code].mediaTypes;
      }
      pushAdapterParamsInAdunits(adapterID, generatedKey, impressionID, keyConfig, adapterConfig, currentSlot, code, adUnits, partnerConfig, regexPattern);
    }
    
    /* start-test-block */
    exports.generatedKeyCallback = generatedKeyCallback;
    /* end-test-block */
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    function pushAdapterParamsInAdunits(adapterID, generatedKey, impressionID, keyConfig, adapterConfig, currentSlot, code, adUnits, partnerConfig, regexPattern) {
      var slotParams = {};
      var mediaTypeConfig = adUnits[code].mediaTypes;
      var sizes = adUnits[code].sizes;
      var isWiidRequired = false;
      if (mediaTypeConfig && util.isOwnProperty(mediaTypeConfig, "video") && adapterID != "telaria") {
        slotParams["video"] = mediaTypeConfig.video;
      }
      util.forEachOnObject(keyConfig, function (key, value) {
        /* istanbul ignore next */
        slotParams[key] = value;
      });
      if (isPrebidPubMaticAnalyticsEnabled) {
        slotParams["kgpv"] = generatedKey; // TODO : Update this in case of video, change the size to 0x0 
        slotParams["regexPattern"] = regexPattern;
      }
      if (partnerConfig && Object.keys(partnerConfig).length > 0) {
        util.forEachOnObject(partnerConfig, function (key, value) {
          if (key == adapterID) {
            util.forEachOnObject(value, function (key, value) {
              /* istanbul ignore next */
              slotParams[key] = value;
            });
          }
        });
      }
    
      // Logic : If for slot config for partner video parameter is present then use that
      // else take it from mediaType.video
      if (mediaTypeConfig && util.isOwnProperty(mediaTypeConfig, "video") && adapterID != "telaria") {
        if (util.isOwnProperty(slotParams, "video") && util.isObject(slotParams.video)) {
          util.forEachOnObject(mediaTypeConfig.video, function (key, value) {
            if (!util.isOwnProperty(slotParams["video"], key)) {
              slotParams["video"][key] = value;
            }
          });
        } else {
          slotParams["video"] = mediaTypeConfig.video;
        }
      }
      // for pubmaticServer partner we used to pass wiid when isPrebidPubMaticAnalyticsEnabled is false but now we do not 
      // get pubmaticServer partner when usePBSAdapter flag is true so we will be adding wiid conditionally.
      if (isPrebidPubMaticAnalyticsEnabled === false && CONFIG.usePBSAdapter()) {
        slotParams["wiid"] = impressionID;
        isWiidRequired = true;
      }
      var adapterName = CONFIG.getAdapterNameForAlias(adapterID) || adapterID;
    
      //processing for each partner
      switch (adapterName) {
        //todo: unit-test cases pending
        case "pubmaticServer":
          slotParams["publisherId"] = adapterConfig["publisherId"];
          slotParams["adUnitIndex"] = '' + currentSlot.getAdUnitIndex();
          slotParams["adUnitId"] = currentSlot.getAdUnitID();
          slotParams["divId"] = currentSlot.getDivID();
          slotParams["adSlot"] = generatedKey;
          if (isPrebidPubMaticAnalyticsEnabled === false) {
            slotParams["wiid"] = impressionID;
          }
          slotParams["profId"] = CONFIG.getProfileID();
          /* istanbul ignore else*/
          if (window.PWT.udpv) {
            slotParams["verId"] = CONFIG.getProfileDisplayVersionID();
          }
          adUnits[code].bids.push({
            bidder: adapterID,
            params: slotParams
          });
          break;
        case "pubmatic":
        case "pubmatic2":
          slotParams["publisherId"] = adapterConfig["publisherId"];
          slotParams["adSlot"] = slotParams["slotName"] || generatedKey;
          if (isPrebidPubMaticAnalyticsEnabled === false) {
            slotParams["wiid"] = impressionID;
          }
          slotParams["profId"] = adapterID == "pubmatic2" || adapterName == "pubmatic2" ? adapterConfig["profileId"] : CONFIG.getProfileID();
          /* istanbul ignore else*/
          if (adapterID != "pubmatic2" && adapterName != "pubmatic2" && window.PWT.udpv) {
            slotParams["verId"] = CONFIG.getProfileDisplayVersionID();
          }
    
          // If we will be using PrebidServerBidAdaptar add wrapper object with profile and version
          if (CONFIG.usePBSAdapter() == true && CONFIG.isServerSideAdapter(adapterID)) {
            slotParams["wrapper"] = {
              profile: parseInt(CONF.pwt.pid),
              version: parseInt(CONF.pwt.pdvid)
            };
            // If mapping is regex then we should pass hashedKey to adSlot params earlier it was handled on s2s side.
            if (slotParams["hashedKey"]) {
              slotParams["adSlot"] = slotParams["hashedKey"];
            }
          }
    
          // We are removing mimes because it merges with the existing adUnit mimes
          // if(slotParams["video"] && slotParams["video"]["mimes"]){
          // 	delete slotParams["video"]["mimes"];
          // }
          adUnits[code].bids.push({
            bidder: adapterID,
            params: slotParams
          });
          break;
        case "pulsepoint":
          util.forEachOnArray(sizes, function (index, size) {
            var slotParams = {};
            util.forEachOnObject(keyConfig, function (key, value) {
              /* istanbul ignore next */
              slotParams[key] = value;
            });
            slotParams["cf"] = size[0] + "x" + size[1];
            if (isWiidRequired) {
              slotParams["wiid"] = impressionID;
            }
            adUnits[code].bids.push({
              bidder: adapterID,
              params: slotParams
            });
          });
          break;
        case "adg":
          util.forEachOnArray(sizes, function (index, size) {
            var slotParams = {};
            util.forEachOnObject(keyConfig, function (key, value) {
              /* istanbul ignore next */
              slotParams[key] = value;
            });
            slotParams["width"] = size[0];
            slotParams["height"] = size[1];
            if (isWiidRequired) {
              slotParams["wiid"] = impressionID;
            }
            if (!(refThis.isSingleImpressionSettingEnabled && isAdUnitsCodeContainBidder(adUnits, code, adapterID))) {
              adUnits[code].bids.push({
                bidder: adapterID,
                params: slotParams
              });
            }
          });
          break;
        case "yieldlab":
          util.forEachOnArray(sizes, function (index, size) {
            var slotParams = {};
            util.forEachOnObject(keyConfig, function (key, value) {
              /* istanbul ignore next */
              slotParams[key] = value;
            });
            slotParams["adSize"] = size[0] + "x" + size[1];
            if (isWiidRequired) {
              slotParams["wiid"] = impressionID;
            }
            if (!(refThis.isSingleImpressionSettingEnabled && isAdUnitsCodeContainBidder(adUnits, code, adapterID))) {
              adUnits[code].bids.push({
                bidder: adapterID,
                params: slotParams
              });
            }
          });
          break;
        case "ix":
        case "indexExchange":
          /** Added case ix cause indexExchange bidder has changed its bidder code in server side 
           * this will have impact in codegen to change its adapter code from indexexchange to ix 
           * so added a case for the same.
          */
    
          if (slotParams["siteID"]) {
            slotParams["siteId"] = slotParams["siteID"];
            delete slotParams['siteID'];
          }
          if (isWiidRequired) {
            slotParams["wiid"] = impressionID;
          }
          adUnits[code].bids.push({
            bidder: adapterID,
            params: slotParams
          });
          break;
        default:
          adUnits[code].bids.push({
            bidder: adapterID,
            params: slotParams
          });
          break;
      }
    }
    exports.pushAdapterParamsInAdunits = pushAdapterParamsInAdunits;
    function generatePbConf(adapterID, adapterConfig, activeSlots, adUnits, impressionID) {
      util.log(adapterID + CONSTANTS.MESSAGES.M1);
    
      /* istanbul ignore else */
      if (!adapterConfig) {
        return;
      }
      util.forEachGeneratedKey(adapterID, adUnits, adapterConfig, impressionID, [], activeSlots, isPrebidPubMaticAnalyticsEnabled ? refThis.generatedKeyCallbackForPbAnalytics : refThis.generatedKeyCallback,
      // refThis.generatedKeyCallback,
      // serverSideEabled: do not set default bids as we do not want to throttle them at client-side
      true // !CONFIG.isServerSideAdapter(adapterID)
      );
    }
    
    /* start-test-block */
    exports.generatePbConf = generatePbConf;
    /* end-test-block */
    
    function assignSingleRequestConfigForBidders(prebidConfig) {
      //todo: use forEachAdapter
      util.forEachOnObject(CONSTANTS.SRA_ENABLED_BIDDERS, function (adapterName) {
        if (util.isOwnProperty(CONF.adapters, adapterName)) {
          prebidConfig[adapterName] = {
            singleRequest: true
          };
        }
      });
    }
    exports.assignSingleRequestConfigForBidders = assignSingleRequestConfigForBidders;
    function assignUserSyncConfig(prebidConfig) {
      prebidConfig["userSync"] = {
        enableOverride: true,
        syncsPerBidder: 0,
        iframeEnabled: true,
        pixelEnabled: true,
        filterSettings: {
          iframe: {
            bidders: "*",
            // '*' means all bidders
            filter: "include"
          }
        },
        enabledBidders: function () {
          var arr = [];
          CONFIG.forEachAdapter(function (adapterID) {
            var adapterName = CONFIG.getAdapterNameForAlias(adapterID) || adapterID;
            if (arr.indexOf(adapterName) == -1) {
              arr.push(adapterName);
            }
          });
          return arr;
        }(),
        syncDelay: 2000,
        //todo: default is 3000 write image pixels 5 seconds after the auction
        aliasSyncEnabled: true
      };
    
      // removeIf(removeUserIdRelatedCode)
      if (CONFIG.isUserIdModuleEnabled()) {
        prebidConfig["userSync"]["userIds"] = util.getUserIdConfiguration();
      }
      // endRemoveIf(removeUserIdRelatedCode)
    }
    
    exports.assignUserSyncConfig = assignUserSyncConfig;
    function assignGdprConfigIfRequired(prebidConfig) {
      if (CONFIG.getGdpr()) {
        if (!prebidConfig["consentManagement"]) {
          prebidConfig["consentManagement"] = {};
        }
        prebidConfig["consentManagement"]['gdpr'] = {
          cmpApi: CONFIG.getCmpApi(),
          timeout: CONFIG.getGdprTimeout(),
          allowAuctionWithoutConsent: CONFIG.getAwc(),
          // Auction without consent
          defaultGdprScope: true
        };
      }
    }
    exports.assignGdprConfigIfRequired = assignGdprConfigIfRequired;
    function assignCcpaConfigIfRequired(prebidConfig) {
      if (CONFIG.getCCPA()) {
        if (!prebidConfig["consentManagement"]) {
          prebidConfig["consentManagement"] = {};
        }
        prebidConfig["consentManagement"]["usp"] = {
          cmpApi: CONFIG.getCCPACmpApi(),
          timeout: CONFIG.getCCPATimeout()
        };
      }
    }
    exports.assignCcpaConfigIfRequired = assignCcpaConfigIfRequired;
    function assignCurrencyConfigIfRequired(prebidConfig) {
      if (CONFIG.getAdServerCurrency()) {
        // get AdServer currency from Config
        // Log in console 
        util.log(CONSTANTS.MESSAGES.M26 + CONFIG.getAdServerCurrency());
        prebidConfig["currency"] = {
          "adServerCurrency": CONFIG.getAdServerCurrency(),
          "granularityMultiplier": CONFIG.getGranularityMultiplier()
        };
      }
    }
    exports.assignCurrencyConfigIfRequired = assignCurrencyConfigIfRequired;
    function assignSchainConfigIfRequired(prebidConfig) {
      if (CONFIG.isSchainEnabled()) {
        prebidConfig["schain"] = CONFIG.getSchainObject();
      }
    }
    exports.assignSchainConfigIfRequired = assignSchainConfigIfRequired;
    function configureBidderAliasesIfAvailable() {
      if (util.isFunction(window[pbNameSpace].aliasBidder)) {
        CONFIG.forEachBidderAlias(function (alias) {
          window[pbNameSpace].aliasBidder(CONF.alias[alias], alias);
        });
      } else {
        util.logWarning("PreBid js aliasBidder method is not available");
        return;
      }
    }
    exports.configureBidderAliasesIfAvailable = configureBidderAliasesIfAvailable;
    function enablePrebidPubMaticAnalyticIfRequired() {
      if (isPrebidPubMaticAnalyticsEnabled && util.isFunction(window[pbNameSpace].enableAnalytics)) {
        window[pbNameSpace].enableAnalytics({
          provider: "pubmatic",
          options: {
            publisherId: CONFIG.getPublisherId(),
            profileId: CONFIG.getProfileID(),
            profileVersionId: CONFIG.getProfileDisplayVersionID(),
            identityOnly: CONFIG.isUserIdModuleEnabled() ? 1 : 0
          }
        });
      }
    }
    exports.enablePrebidPubMaticAnalyticIfRequired = enablePrebidPubMaticAnalyticIfRequired;
    function throttleAdapter(randomNumber, adapterID) {
      return !(randomNumber >= CONFIG.getAdapterThrottle(adapterID));
    }
    exports.throttleAdapter = throttleAdapter;
    function generateAdUnitsArray(activeSlots, impressionID) {
      var adUnits = {}; // create ad-units for prebid
      var randomNumberBelow100 = util.getRandomNumberBelow100();
      CONFIG.forEachAdapter(function (adapterID, adapterConfig) {
        // Assumption: all partners are running through PreBid,
        //				if we add any new parent-adapter, then code changes will be required
        /* istanbul ignore else */
        if (adapterID !== refThis.parentAdapterID) {
          // If we will be using PrebidServerBidAdapatar then we need to check throttling for 
          // serverEnabled partners at client-side
          /* istanbul ignore if */
          if (CONFIG.usePBSAdapter() == true && CONFIG.isServerSideAdapter(adapterID)) {
            if (refThis.throttleAdapter(randomNumberBelow100, adapterID) == false) {
              refThis.generateConfig(adapterID, adapterConfig, activeSlots, adUnits, impressionID);
            } else {
              util.log(adapterID + CONSTANTS.MESSAGES.M2);
            }
          } else {
            // serverSideEabled: we do not want to throttle them at client-side
            /* istanbul ignore if */
            if (CONFIG.isServerSideAdapter(adapterID) || refThis.throttleAdapter(randomNumberBelow100, adapterID) == false) {
              refThis.generateConfig(adapterID, adapterConfig, activeSlots, adUnits, impressionID);
            } else {
              util.log(adapterID + CONSTANTS.MESSAGES.M2);
            }
          }
        }
      });
    
      // adUnits is object create array from it
      var adUnitsArray = [];
      for (var code in adUnits) {
        /* istanbul ignore else */
        if (util.isOwnProperty(adUnits, code)) {
          adUnitsArray.push(adUnits[code]);
        }
      }
      return adUnitsArray;
    }
    exports.generateAdUnitsArray = generateAdUnitsArray;
    function generateConfig(adapterID, adapterConfig, activeSlots, adUnits, impressionID) {
      util.forEachOnObject(activeSlots, function (j, slot) {
        bidManager.setCallInitTime(slot.getDivID(), adapterID);
      });
      refThis.generatePbConf(adapterID, adapterConfig, activeSlots, adUnits, impressionID);
    }
    exports.generateConfig = generateConfig;
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    function addOnBidResponseHandler() {
      if (util.isFunction(window[pbNameSpace].onEvent)) {
        if (!onEventAdded) {
          window[pbNameSpace].onEvent('bidResponse', refThis.pbBidStreamHandler);
          onEventAdded = true;
        }
      } else {
        util.logWarning("PreBid js onEvent method is not available");
        return;
      }
    }
    exports.addOnBidResponseHandler = addOnBidResponseHandler;
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    function addOnAuctionEndHandler() {
      if (util.isFunction(window[pbNameSpace].onEvent)) {
        if (!onAuctionEndEventAdded) {
          window[pbNameSpace].onEvent('auctionEnd', refThis.pbAuctionEndHandler);
          onAuctionEndEventAdded = true;
        }
      } else {
        util.logWarning("PreBid js onEvent method is not available");
        return;
      }
    }
    exports.addOnAuctionEndHandler = addOnAuctionEndHandler;
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    function addOnBidRequestHandler() {
      if (util.isFunction(window[pbNameSpace].onEvent)) {
        window[pbNameSpace].onEvent('bidRequested', refThis.pbBidRequestHandler);
      } else {
        util.logWarning("PreBid js onEvent method is not available");
        return;
      }
    }
    exports.addOnBidRequestHandler = addOnBidRequestHandler;
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    function setPrebidConfig() {
      if (util.isFunction(window[pbNameSpace].setConfig) || typeof window[pbNameSpace].setConfig == "function") {
        var prebidConfig = {
          debug: util.isDebugLogEnabled(),
          cache: {
            url: CONSTANTS.CONFIG.CACHE_URL + CONSTANTS.CONFIG.CACHE_PATH,
            ignoreBidderCacheKey: true
          },
          bidderSequence: "random",
          disableAjaxTimeout: CONFIG.getDisableAjaxTimeout(),
          enableSendAllBids: CONFIG.getSendAllBidsStatus(),
          targetingControls: {
            alwaysIncludeDeals: true
          },
          testGroupId: parseInt(window.PWT.testGroupId || 0)
        };
        if (CONFIG.getPriceGranularity()) {
          prebidConfig["priceGranularity"] = CONFIG.getPriceGranularity();
        }
        if (isPrebidPubMaticAnalyticsEnabled === true) {
          prebidConfig['instreamTracking'] = {
            enabled: true
          };
        }
        window.PWT.ssoEnabled = CONFIG.isSSOEnabled() || false;
        refThis.getFloorsConfiguration(prebidConfig);
        refThis.assignUserSyncConfig(prebidConfig);
        refThis.assignGdprConfigIfRequired(prebidConfig);
        refThis.assignCcpaConfigIfRequired(prebidConfig);
        refThis.assignCurrencyConfigIfRequired(prebidConfig);
        refThis.assignSchainConfigIfRequired(prebidConfig);
        refThis.assignSingleRequestConfigForBidders(prebidConfig);
        refThis.assignPackagingInventoryConfig(prebidConfig);
        // if usePBSAdapter is 1 then add s2sConfig
        if (CONFIG.usePBSAdapter()) {
          refThis.gets2sConfig(prebidConfig);
        }
        // Check for yahoossp bidder and add property {mode: 'all'} to setConfig
        refThis.checkForYahooSSPBidder(prebidConfig);
        // Adding a hook for publishers to modify the Prebid Config we have generated
        util.handleHook(CONSTANTS.HOOKS.PREBID_SET_CONFIG, [prebidConfig]);
        //todo: stop supporting this hook let pubs use pbjs.requestBids hook
        // do not set any config below this line as we are executing the hook above
    
        window[pbNameSpace].setConfig(prebidConfig);
      } else {
        util.logWarning("PreBidJS setConfig method is not available");
      }
    }
    exports.setPrebidConfig = setPrebidConfig;
    function realignPubmaticAdapters() {
      if (CONF.adapters && CONF.adapters["pubmatic"]) {
        var pubmaticAdpater = {
          "pubmatic": CONF.adapters["pubmatic"]
        };
        CONF.adapters = Object.assign(pubmaticAdpater, CONF.adapters);
      }
    }
    exports.realignPubmaticAdapters = realignPubmaticAdapters;
    function gets2sConfig(prebidConfig) {
      var bidderParams = {};
      var s2sBidders = CONFIG.getServerEnabledAdaptars();
      for (var key in CONF.alias) {
        defaultAliases[key] = CONF.alias[key];
      }
      var pubmaticAndAliases = CONFIG.getPubMaticAndAlias(s2sBidders);
      if (pubmaticAndAliases.length) {
        pubmaticAndAliases.forEach(function (bidder) {
          bidderParams[bidder] = {};
        });
      }
      prebidConfig["s2sConfig"] = {
        accountId: CONFIG.getPublisherId(),
        adapter: CONSTANTS.PBSPARAMS.adapter,
        enabled: true,
        bidders: s2sBidders,
        endpoint: CONSTANTS.PBSPARAMS.endpoint,
        syncEndpoint: CONSTANTS.PBSPARAMS.syncEndpoint,
        timeout: CONFIG.getTimeoutForPBSRequest(),
        secure: 1,
        // request needs secure assets pass 1
        extPrebid: {
          aliases: defaultAliases,
          bidderparams: bidderParams,
          targeting: {
            pricegranularity: CONFIG.getPriceGranularity()
          },
          isPrebidPubMaticAnalyticsEnabled: CONFIG.isPrebidPubMaticAnalyticsEnabled(),
          isUsePrebidKeysEnabled: CONFIG.isUsePrebidKeysEnabled(),
          macros: CONFIG.createMacros()
        }
      };
      // adding support for marketplace
      if (!!CONFIG.getMarketplaceBidders()) {
        prebidConfig["s2sConfig"]["allowUnknownBidderCodes"] = true;
        prebidConfig["s2sConfig"]["extPrebid"]["alternatebiddercodes"] = {
          enabled: true,
          bidders: {
            pubmatic: {
              enabled: true,
              allowedbiddercodes: CONFIG.getMarketplaceBidders()
            }
          }
        };
      }
    }
    exports.gets2sConfig = gets2sConfig;
    function getFloorsConfiguration(prebidConfig) {
      if (CONFIG.isFloorPriceModuleEnabled() == true && CONFIG.getFloorSource() !== CONSTANTS.COMMON.EXTERNAL_FLOOR_WO_CONFIG) {
        prebidConfig["floors"] = {
          enforcement: {
            enforceJS: CONFIG.getFloorType()
          },
          auctionDelay: CONFIG.getFloorAuctionDelay(),
          endpoint: {
            url: CONFIG.getFloorJsonUrl()
          },
          additionalSchemaFields: {
            browser: util.getBrowserDetails,
            platform_id: util.getPltForFloor
          }
        };
      }
    }
    exports.getFloorsConfiguration = getFloorsConfiguration;
    function checkForYahooSSPBidder(prebidConfig) {
      var isYahooAlias = false;
      var isYahooSSP = CONF.adapters.hasOwnProperty(CONSTANTS.YAHOOSSP);
      if (!isYahooSSP) {
        for (var bidder in CONF.alias) {
          if (CONFIG.getAdapterNameForAlias(bidder) == CONSTANTS.YAHOOSSP) {
            isYahooAlias = true;
          }
        }
      }
      if (isYahooSSP || isYahooAlias) {
        prebidConfig[CONSTANTS.YAHOOSSP] = {
          mode: "all"
        };
      }
    }
    exports.checkForYahooSSPBidder = checkForYahooSSPBidder;
    function assignPackagingInventoryConfig(prebidConfig) {
      prebidConfig["viewabilityScoreGeneration"] = {
        enabled: true
      };
    }
    exports.assignPackagingInventoryConfig = assignPackagingInventoryConfig;
    function getPbjsAdServerTargetingConfig() {
      // Todo: Handle send-all bids feature enabled case
      //		we will need to add bidder specific keys?? do we?
      // todo: refer constants for key names
      /*
          Todo: 
              what if we do not add a handler for some keys? do we need to add handler to all if we want to add for one?
              does custom keys do not get used in send-all-bids?
              do we always need to update the prebid targeting keys config in?
              what keys in prebid can be re-used?
      */
      return [
      //todo: what abt hb_deal, hb_uuid(video?), hb_cache_id(video?), hb_cache_host(video?) ?
      {
        key: "pwtpid",
        //hb_bidder
        val: function (bidResponse) {
          return bidResponse.bidderCode;
        }
      }, {
        key: "pwtsid",
        //hb_adid
        val: function (bidResponse) {
          return bidResponse.adId;
        }
      }, {
        key: "pwtecp",
        //hb_pb
        val: function (bidResponse) {
          // return bidResponse.pbMg;
          return (bidResponse.cpm || 0).toFixed(CONSTANTS.COMMON.BID_PRECISION);
        }
      }, {
        key: 'pwtsz',
        //hb_size
        val: function (bidResponse) {
          return bidResponse.size;
        }
      }, {
        key: 'hb_source',
        //hb_source // we do not want it, so send empty, suppressEmptyKeys feature will prevent it being passed
        // do not change it in prebid.js project constants file
        val: function (bidResponse) {
          // return bidResponse.source;
          return '';
        }
      }, {
        key: 'pwtplt',
        //hb_format
        val: function (bidResponse) {
          // return bidResponse.mediaType;
          return bidResponse.mediaType == "video" && bidResponse.videoCacheKey ? CONSTANTS.PLATFORM_VALUES.VIDEO : bidResponse.native ? CONSTANTS.PLATFORM_VALUES.NATIVE : CONSTANTS.PLATFORM_VALUES.DISPLAY;
        }
      }, {
        key: 'pwtdid',
        // hb_deal
        val: function (bidResponse) {
          // todo: do we want to concat dealchannel as well?
          return bidResponse.dealId || '';
        }
      }, {
        key: 'pwtdeal',
        // hb_deal
        val: function (bidResponse) {
          // todo: do we want to concat dealchannel as well?
          if (bidResponse.dealId) {
            bidResponse.dealChannel = bidResponse.dealChannel || "PMP";
            return bidResponse.dealChannel + CONSTANTS.COMMON.DEAL_KEY_VALUE_SEPARATOR + bidResponse.dealId + CONSTANTS.COMMON.DEAL_KEY_VALUE_SEPARATOR + bidResponse.adId;
          }
          return '';
        }
      }, {
        key: 'pwtbst',
        // our custom
        val: function (bidResponse) {
          return 1;
        }
      }, {
        key: 'pwtpubid',
        // custom
        val: function (bidResponse) {
          return CONFIG.getPublisherId();
        }
      }, {
        key: 'pwtprofid',
        // custom
        val: function (bidResponse) {
          return CONFIG.getProfileID();
        }
      }, {
        key: 'pwtverid',
        // custom
        val: function (bidResponse) {
          // todo: empty value?
          return CONFIG.getProfileDisplayVersionID();
        }
      }, {
        key: 'pwtcid',
        // custom
        val: function (bidResponse) {
          // todo: empty value?
          return bidResponse.mediaType == "video" && bidResponse.videoCacheKey ? bidResponse.videoCacheKey : "";
        }
      }, {
        key: 'pwtcurl',
        // custom
        val: function (bidResponse) {
          // todo: empty value?	
          return bidResponse.mediaType == "video" && bidResponse.videoCacheKey ? CONSTANTS.CONFIG.CACHE_URL : "";
        }
      }, {
        key: 'pwtcpath',
        // custom
        val: function (bidResponse) {
          // todo: empty value?
          return bidResponse.mediaType == "video" && bidResponse.videoCacheKey ? CONSTANTS.CONFIG.CACHE_PATH : "";
        }
      }, {
        key: 'pwtuuid',
        // custom
        val: function (bidResponse) {
          // todo: empty value?
          return "";
        }
      }];
    }
    exports.getPbjsAdServerTargetingConfig = getPbjsAdServerTargetingConfig;
    function setPbjsBidderSettingsIfRequired() {
      if (isPrebidPubMaticAnalyticsEnabled === false) {
        return;
      }
      window[pbNameSpace].bidderSettings = {
        'standard': {
          'suppressEmptyKeys': true // this boolean flag can be used to avoid sending those empty values to the ad server.
        }
      };
    
      if (CONFIG.isUsePrebidKeysEnabled() === false) {
        window[pbNameSpace].bidderSettings['standard']['adserverTargeting'] = getPbjsAdServerTargetingConfig();
      }
    
      // adding bidder level settings
      CONFIG.forEachAdapter(function (adapterID) {
        if (window[pbNameSpace].bidderSettings.hasOwnProperty(adapterID) === false) {
          window[pbNameSpace].bidderSettings[adapterID] = {};
          // adding marketplace params
          if (adapterID === "pubmatic" && !!CONFIG.getMarketplaceBidders()) {
            window[pbNameSpace].bidderSettings[adapterID]['allowAlternateBidderCodes'] = true;
            window[pbNameSpace].bidderSettings[adapterID]['allowedAlternateBidderCodes'] = CONFIG.getMarketplaceBidders();
          }
          // adding bidCpmAdjustment			
          window[pbNameSpace].bidderSettings[adapterID]['bidCpmAdjustment'] = function (bidCpm, bid) {
            return window.parseFloat((bidCpm * CONFIG.getAdapterRevShare(adapterID)).toFixed(CONSTANTS.COMMON.BID_PRECISION));
          };
        }
      });
    }
    exports.setPbjsBidderSettingsIfRequired = setPbjsBidderSettingsIfRequired;
    function pbjsBidsBackHandler(bidResponses, activeSlots) {
      util.log("In PreBid bidsBackHandler with bidResponses: ");
      util.log(bidResponses);
      setTimeout(window[pbNameSpace].triggerUserSyncs, 10);
      //TODO: this blockk is used only for analytics enabled thus it should be covered in callback function?
      //		callback function behaviour will be different for different controllers?
      //			diff behaviour can be managed in respective controller code
      //		making the callback related code changes will be good to manage respective code	
      // we may not request bids for all slots from Prebid if we do not find mapping for a slot thus looping on activeSlots
      function setPossibleBidRecieved() {
        util.forEachOnArray(activeSlots, function (i, activeSlot) {
          bidManager.setAllPossibleBidsReceived(activeSlot.getDivID());
        });
      }
      if (CONFIG.getAdServerCurrency()) {
        //Added timeout for issue in GPT should execute dfp as soon as all bids are available
        setTimeout(setPossibleBidRecieved, 300);
      } else {
        setPossibleBidRecieved();
      }
    }
    exports.pbjsBidsBackHandler = pbjsBidsBackHandler;
    
    // this function will be called by controllers, 
    // will take care of setting the config as it is configured thru UI
    function initPbjsConfig() {
      if (!window[pbNameSpace]) {
        // todo: move this code owt.js
        util.logError("PreBid js is not loaded");
        return;
      }
      window[pbNameSpace].logging = util.isDebugLogEnabled();
      refThis.realignPubmaticAdapters();
      refThis.setPrebidConfig();
      refThis.configureBidderAliasesIfAvailable();
      refThis.enablePrebidPubMaticAnalyticIfRequired();
      refThis.setPbjsBidderSettingsIfRequired();
    }
    exports.initPbjsConfig = initPbjsConfig;
    function fetchBids(activeSlots) {
      var impressionID = util.generateUUID();
      // todo: 
      // 	Accept a call back function, pass it from controllers only if pbjs-analytics is enabled
      //		if possible try to use the callback for all cases
      //  TRY not make many changes in GPT controller
    
      /* istanbul ignore else */
      if (!window[pbNameSpace]) {
        // todo: move this code owt.js
        util.logError("PreBid js is not loaded");
        return;
      }
    
      // calling some bid-manager functions to reset, and set new sizes
      // todo: can be moved to a function
      util.forEachOnArray(activeSlots, function (key, slot) {
        var divID = slot.getDivID();
        bidManager.resetBid(divID, impressionID);
        bidManager.setSizes(divID, util.generateSlotNamesFromPattern(slot, "_W_x_H_"));
      });
    
      // todo: this is the function that basically puts bidder params in all adUnits, expose it separately
      var adUnitsArray = refThis.generateAdUnitsArray(activeSlots, impressionID);
    
      /* istanbul ignore else */
      if (adUnitsArray.length > 0 && window[pbNameSpace]) {
        try {
          /* With prebid 2.0.0 it has started using FunHooks library which provides
             proxy object instead of wrapper function by default so in case of safari and IE 
             below check of util gives us Object instead of function hence return false and does
             not work on safari and ie. Introduced one more check of typeof to check for function.
             This if code is just safe check and may be removed in near future.
          */
          /* istanbul ignore else */
    
          if (util.isFunction(window[pbNameSpace].requestBids) || typeof window[pbNameSpace].requestBids == "function") {
            // Adding a hook for publishers to modify the adUnits we are passing to Prebid
            util.handleHook(CONSTANTS.HOOKS.PREBID_REQUEST_BIDS, [adUnitsArray]);
    
            // removeIf(removeLegacyAnalyticsRelatedCode)
            if (isPrebidPubMaticAnalyticsEnabled === false) {
              // we do not want this call when we have PrebidAnalytics enabled
              refThis.addOnBidResponseHandler();
              refThis.addOnBidRequestHandler();
              refThis.addOnAuctionEndHandler();
            }
            // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
            window[pbNameSpace].removeAdUnit();
            window[pbNameSpace].addAdUnits(adUnitsArray);
            window[pbNameSpace].requestBids({
              bidsBackHandler: function (bidResponses) {
                refThis.pbjsBidsBackHandler(bidResponses, activeSlots);
              },
              timeout: CONFIG.getTimeout() - CONSTANTS.CONFIG.TIMEOUT_ADJUSTMENT
            });
          } else {
            util.log("PreBid js requestBids function is not available");
            return;
          }
        } catch (e) {
          util.logError("Error occured in calling PreBid.");
          util.logError(e);
        }
      }
    }
    
    /* start-test-block */
    exports.fetchBids = fetchBids;
    /* end-test-block */
    
    // returns the highest bid and its key value pairs
    function getBid(divID) {
      var wb = window[pbNameSpace].getHighestCpmBids([divID])[0] || null;
      if (wb) {
        wb.adHtml = wb.ad;
        wb.adapterID = wb.bidder;
        wb.netEcpm = wb.cpm;
        wb.grossEcpm = wb.originalCpm;
      }
      var outputObj = {
        wb: wb,
        kvp: window[pbNameSpace].getAdserverTargetingForAdUnitCode([divID]) || null
      };
      if (isPrebidPubMaticAnalyticsEnabled && outputObj.kvp['pwtdeal']) {
        delete outputObj.kvp['pwtdeal']; // Check for null object && usePrebidAnalyticsAdapter 
      }
    
      return outputObj;
    }
    exports.getBid = getBid;
    
    /***/ }),
    
    /***/ "./src_new/bid.js":
    /*!************************!*\
      !*** ./src_new/bid.js ***!
      \************************/
    /*! no static exports found */
    /***/ (function(module, exports, __webpack_require__) {
    
    var CONFIG = __webpack_require__(/*! ./config.js */ "./src_new/config.js");
    var CONSTANTS = __webpack_require__(/*! ./constants.js */ "./src_new/constants.js");
    var UTIL = __webpack_require__(/*! ./util.js */ "./src_new/util.js");
    function Bid(adapterID, kgpv) {
      this.adapterID = adapterID;
      this.kgpv = kgpv;
      this.bidID = UTIL.getUniqueIdentifierStr();
      this.grossEcpm = 0; // one given by bidder
      this.netEcpm = 0; // one after bid adjustment
      this.defaultBid = 0;
      this.adHtml = "";
      this.adUrl = "";
      this.height = 0;
      this.width = 0;
      this.creativeID = ""; //todo, is it needed ?
      this.keyValuePairs = {};
      this.isPostTimeout = false;
      this.receivedTime = 0;
      this.isServerSide = CONFIG.isServerSideAdapter(adapterID) ? 1 : 0;
      this.dealID = "";
      this.dealChannel = "";
      this.isWinningBid = false;
      this.status = 0;
      this.serverSideResponseTime = 0;
      this.mi = undefined;
      this.originalCpm = 0;
      this.originalCurrency = "";
      this.analyticsGrossCpm = 0;
      this.analyticsNetCpm = 0;
      this.native = undefined;
      this.adFormat = undefined;
      this.regexPattern = undefined;
      this.cacheUUID = undefined;
      this.sspID = "";
      this.vastUrl = undefined;
      this.vastCache = undefined;
      this.renderer = undefined;
      this.pbBid = undefined;
    }
    var getNetECPM = function (grossEcpm, adapterID) {
      return window.parseFloat((grossEcpm * CONFIG.getAdapterRevShare(adapterID)).toFixed(CONSTANTS.COMMON.BID_PRECISION));
    };
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.setServerSideResponseTime = function (ssResponseTime) {
      this.serverSideResponseTime = ssResponseTime;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.getServerSideResponseTime = function () {
      return this.serverSideResponseTime;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.getServerSideStatus = function () {
      return this.isServerSide;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    // should be always removed; not in use at all
    Bid.prototype.setServerSideStatus = function (isServerSide) {
      this.isServerSide = isServerSide;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    Bid.prototype.getAdapterID = function () {
      return this.adapterID;
    };
    Bid.prototype.getBidID = function () {
      return this.bidID;
    };
    
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.setGrossEcpm = function (ecpm, origCurrency, displayCurrency, bidStatus) {
      /* istanbul ignore else */
      if (ecpm === null) {
        UTIL.log(CONSTANTS.MESSAGES.M10);
        UTIL.log(this);
        return this;
      }
      /* istanbul ignore else */
      if (UTIL.isString(ecpm)) {
        ecpm = ecpm.replace(/\s/g, "");
        /* istanbul ignore else */
        if (ecpm.length === 0) {
          UTIL.log(CONSTANTS.MESSAGES.M20);
          UTIL.log(this);
          return this;
        }
        ecpm = window.parseFloat(ecpm);
      }
    
      /* istanbul ignore else */
      if (window.isNaN(ecpm)) {
        UTIL.log(CONSTANTS.MESSAGES.M11 + ecpm);
        UTIL.log(this);
        return this;
      }
      if (CONFIG.getAdServerCurrency() && origCurrency && displayCurrency && (UTIL.isFunction(window[CONSTANTS.COMMON.PREBID_NAMESPACE].convertCurrency) || typeof window[CONSTANTS.COMMON.PREBID_NAMESPACE].convertCurrency == "function")) {
        ecpm = window[CONSTANTS.COMMON.PREBID_NAMESPACE].convertCurrency(ecpm, origCurrency, displayCurrency);
      }
      ecpm = window.parseFloat(ecpm.toFixed(CONSTANTS.COMMON.BID_PRECISION));
      this.grossEcpm = ecpm;
      this.netEcpm = bidStatus == CONSTANTS.BID_STATUS.BID_REJECTED ? 0 : getNetECPM(this.grossEcpm, this.getAdapterID());
      return this;
    };
    // removeIf(removeLegacyAnalyticsRelatedCode)
    
    Bid.prototype.getGrossEcpm = function (forAnalytics) {
      // Check config if currency module is enabled.
      if (CONFIG.getAdServerCurrency() && this.analyticsGrossCpm && forAnalytics) {
        return this.analyticsGrossCpm;
      }
      return this.grossEcpm;
    };
    Bid.prototype.getNetEcpm = function (forAnalytics) {
      if (CONFIG.getAdServerCurrency() && this.analyticsNetCpm && forAnalytics) {
        return this.analyticsNetCpm;
      }
      return this.netEcpm;
    };
    Bid.prototype.setDefaultBidStatus = function (status) {
      this.defaultBid = status;
      return this;
    };
    Bid.prototype.getDefaultBidStatus = function () {
      return this.defaultBid;
    };
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.setAdHtml = function (adHtml) {
      this.adHtml = adHtml;
      this.setAdFormat(adHtml);
      return this;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    // should be always removed; not in use at all
    Bid.prototype.getAdHtml = function () {
      return this.adHtml;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.setAdUrl = function (adUrl) {
      this.adUrl = adUrl;
      return this;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    // should be always removed; not in use at all
    Bid.prototype.getAdUrl = function () {
      return this.adUrl;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.setHeight = function (height) {
      this.height = height;
      return this;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    Bid.prototype.getHeight = function () {
      return this.height;
    };
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.setWidth = function (width) {
      this.width = width;
      return this;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    Bid.prototype.getWidth = function () {
      return this.width;
    };
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.getKGPV = function (isActualValueRequired, mediaType) {
      if (!isActualValueRequired && this.regexPattern) {
        return this.regexPattern;
      }
      if (this.adFormat == CONSTANTS.FORMAT_VALUES.VIDEO || mediaType == CONSTANTS.FORMAT_VALUES.VIDEO) {
        return UTIL.getUpdatedKGPVForVideo(this.kgpv, CONSTANTS.FORMAT_VALUES.VIDEO);
      }
      return this.kgpv;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.setKeyValuePair = function (key, value) {
      // max length of key is restricted to 20 characters
      this.keyValuePairs[key.substr(0, 20)] = value;
      return this;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.getKeyValuePairs = function () {
      return this.keyValuePairs;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    Bid.prototype.setPostTimeoutStatus = function () {
      this.isPostTimeout = true;
      return this;
    };
    Bid.prototype.getPostTimeoutStatus = function () {
      return this.isPostTimeout;
    };
    Bid.prototype.setReceivedTime = function (receivedTime) {
      this.receivedTime = receivedTime;
      return this;
    };
    Bid.prototype.getReceivedTime = function () {
      return this.receivedTime;
    };
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.setDealID = function (dealID) {
      /* istanbul ignore else */
      if (dealID) {
        this.dealID = dealID;
        this.dealChannel = this.dealChannel || "PMP";
        this.setKeyValuePair(CONSTANTS.COMMON.DEAL_KEY_FIRST_PART + this.adapterID, this.dealChannel + CONSTANTS.COMMON.DEAL_KEY_VALUE_SEPARATOR + this.dealID + CONSTANTS.COMMON.DEAL_KEY_VALUE_SEPARATOR + this.bidID);
      }
      return this;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.getDealID = function () {
      return this.dealID;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.setDealChannel = function (dealChannel) {
      /* istanbul ignore else */
      if (this.dealID && dealChannel) {
        this.dealChannel = dealChannel;
        this.setKeyValuePair(CONSTANTS.COMMON.DEAL_KEY_FIRST_PART + this.adapterID, this.dealChannel + CONSTANTS.COMMON.DEAL_KEY_VALUE_SEPARATOR + this.dealID + CONSTANTS.COMMON.DEAL_KEY_VALUE_SEPARATOR + this.bidID);
      }
      return this;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.getDealChannel = function () {
      return this.dealChannel;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.setWinningBidStatus = function () {
      this.isWinningBid = true;
      return this;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.getWinningBidStatus = function () {
      return this.isWinningBid;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.setStatus = function (status) {
      this.status = status;
      return this;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.getStatus = function () {
      return this.status;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.setSendAllBidsKeys = function () {
      this.setKeyValuePair(CONSTANTS.WRAPPER_TARGETING_KEYS.BID_ID + '_' + this.adapterID, this.bidID);
      this.setKeyValuePair(CONSTANTS.WRAPPER_TARGETING_KEYS.BID_STATUS + '_' + this.adapterID, this.getNetEcpm() > 0 ? 1 : 0);
      this.setKeyValuePair(CONSTANTS.WRAPPER_TARGETING_KEYS.BID_ECPM + '_' + this.adapterID, this.getNetEcpm().toFixed(CONSTANTS.COMMON.BID_PRECISION));
      this.setKeyValuePair(CONSTANTS.WRAPPER_TARGETING_KEYS.BID_SIZE + '_' + this.adapterID, this.width + 'x' + this.height);
      if (this.native) {
        var keyValues = this.keyValuePairs;
        var globalThis = this;
        UTIL.forEachOnObject(keyValues, function (key, value) {
          if (key.indexOf("native") >= 0) {
            globalThis.setKeyValuePair(key + "_" + globalThis.adapterID, value);
          }
        });
      }
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.setMi = function (mi) {
      this.mi = mi;
      return this;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.getMi = function (partnerName) {
      if (UTIL.isUndefined(this.mi)) {
        this.mi = window.matchedimpressions && window.matchedimpressions[partnerName];
      }
      return this.mi;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode) 
    Bid.prototype.setOriginalCpm = function (originalCpm) {
      this.originalCpm = window.parseFloat(originalCpm.toFixed(CONSTANTS.COMMON.BID_PRECISION));
      return this;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.getOriginalCpm = function () {
      return this.originalCpm;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.setOriginalCurrency = function (originalCurrency) {
      this.originalCurrency = originalCurrency;
      return this;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.getOriginalCurrency = function () {
      return this.originalCurrency;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.setAnalyticsCpm = function (analyticsCpm, bidStatus) {
      this.analyticsGrossCpm = window.parseFloat(analyticsCpm.toFixed(CONSTANTS.COMMON.BID_PRECISION));
      this.analyticsNetCpm = bidStatus == CONSTANTS.BID_STATUS.BID_REJECTED ? 0 : getNetECPM(this.analyticsGrossCpm, this.getAdapterID());
      return this;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    // should be always removed; not in use at all
    Bid.prototype.getAnalyticsCpm = function () {
      return this.analyticsGrossCpm;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.getNative = function () {
      return this.native;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.setNative = function (native) {
      this.native = native;
      return this;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.getAdFormat = function () {
      return this.adFormat;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.setAdFormat = function (ad, format) {
      this.adFormat = format || UTIL.getAdFormatFromBidAd(ad);
      return this;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    // should be always removed; not in use at all
    Bid.prototype.getRegexPattern = function () {
      return this.regexPattern;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    Bid.prototype.setRegexPattern = function (pattern) {
      this.regexPattern = pattern;
      return this;
    };
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    // should be always removed; not in use at all
    Bid.prototype.getcacheUUID = function () {
      return this.cacheUUID;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.setcacheUUID = function (cacheUUID) {
      this.cacheUUID = cacheUUID;
      if (!this.adFormat) {
        this.adFormat = CONSTANTS.FORMAT_VALUES.VIDEO;
      }
      return this;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.getsspID = function () {
      return this.sspID;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.setsspID = function (sspID) {
      this.sspID = sspID;
      return this;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.setRenderer = function (renderer) {
      if (!UTIL.isEmptyObject(renderer)) {
        this.renderer = renderer;
      }
      return this;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    // should be always removed; not in use at all
    Bid.prototype.getRenderer = function () {
      return this.renderer;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.setVastCache = function (vastCache) {
      if (UTIL.isString(vastCache)) {
        this.vastCache = vastCache;
      }
      return this;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    // should be always removed; not in use at all
    Bid.prototype.getVastCache = function () {
      return this.vastCache;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.setVastUrl = function (vastUrl) {
      if (UTIL.isString(vastUrl)) {
        this.vastUrl = vastUrl;
      }
      return this;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    // should be always removed; not in use at all
    Bid.prototype.getVastUrl = function () {
      return this.vastUrl;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    // should be always removed; not in use at all
    Bid.prototype.setVastXml = function (xml) {
      if (UTIL.isString(xml)) {
        this.vastXml = xml;
      }
      return this;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    // should be always removed; not in use at all
    Bid.prototype.getVastXml = function () {
      return this.vastXml;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.setPbBid = function (pbbid) {
      this.pbbid = pbbid;
      return this;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    Bid.prototype.getPbBid = function () {
      return this.pbbid;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    // This function is used to update the bid in case of video bid
    // this should only be called if bid is video so that there is no discrepancy in tracker and logger for bid Id
    Bid.prototype.updateBidId = function (slotID) {
      if (window.PWT.bidMap[slotID] && window.PWT.bidMap[slotID].adapters && Object.keys(window.PWT.bidMap[slotID].adapters).length > 0) {
        var bidId = window.PWT.bidMap[slotID].adapters[this.adapterID].bids[Object.keys(window.PWT.bidMap[slotID].adapters[this.adapterID].bids)[0]].bidID;
        if (bidId && this.adFormat == CONSTANTS.FORMAT_VALUES.VIDEO) {
          this.bidID = bidId;
        }
      } else {
        UTIL.logWarning("Error in Updating BidId. It might be possible singleImpressionEnabled is false");
        console.warn("Setup for video might not be correct. Try setting up Optimize MultiSize AdSlot to true."); // eslint-disable-line no-console
      }
    
      return this;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    /* start-test-block */
    module.exports.Bid = Bid;
    /* end-test-block */
    
    exports.createBid = function (adapterID, kgpv) {
      return new Bid(adapterID, kgpv);
    };
    
    //todo:
    // add validations
    
    /***/ }),
    
    /***/ "./src_new/bidManager.js":
    /*!*******************************!*\
      !*** ./src_new/bidManager.js ***!
      \*******************************/
    /*! no static exports found */
    /***/ (function(module, exports, __webpack_require__) {
    
    var CONFIG = __webpack_require__(/*! ./config.js */ "./src_new/config.js");
    var CONSTANTS = __webpack_require__(/*! ./constants.js */ "./src_new/constants.js");
    var util = __webpack_require__(/*! ./util.js */ "./src_new/util.js");
    // var GDPR = require("./gdpr.js");
    var bmEntry = __webpack_require__(/*! ./bmEntry.js */ "./src_new/bmEntry.js");
    var refThis = this;
    var storedObject;
    var frequencyDepth;
    const PREFIX = 'PROFILE_AUCTION_INFO_';
    function createBidEntry(divID) {
      // TDD, i/o : done
      /* istanbul ignore else */
      if (!util.isOwnProperty(window.PWT.bidMap, divID)) {
        window.PWT.bidMap[divID] = bmEntry.createBMEntry(divID);
      }
    }
    
    /* start-test-block */
    exports.createBidEntry = createBidEntry;
    /* end-test-block */
    
    exports.setSizes = function (divID, slotSizes) {
      // TDD, i/o : done
      refThis.createBidEntry(divID);
      window.PWT.bidMap[divID].setSizes(slotSizes);
    };
    exports.setCallInitTime = function (divID, adapterID) {
      // TDD, i/o : done
      refThis.createBidEntry(divID);
      window.PWT.bidMap[divID].setAdapterEntry(adapterID);
    };
    exports.setAllPossibleBidsReceived = function (divID) {
      window.PWT.bidMap[divID].setAllPossibleBidsReceived();
    };
    exports.setBidFromBidder = function (divID, bidDetails) {
      // TDD done
    
      var bidderID = bidDetails.getAdapterID();
      var bidID = bidDetails.getBidID();
      var bidMapEntry = window.PWT.bidMap[divID];
      /* istanbul ignore else */
      if (!util.isOwnProperty(window.PWT.bidMap, divID)) {
        util.logWarning("BidManager is not expecting bid for " + divID + ", from " + bidderID);
        return;
      }
      var isPostTimeout = bidMapEntry.getCreationTime() + CONFIG.getTimeout() < bidDetails.getReceivedTime() ? true : false,
        latency = bidDetails.getReceivedTime() - bidMapEntry.getCreationTime();
      refThis.createBidEntry(divID);
      util.log("BdManagerSetBid: divID: " + divID + ", bidderID: " + bidderID + ", ecpm: " + bidDetails.getGrossEcpm() + ", size: " + bidDetails.getWidth() + "x" + bidDetails.getHeight() + ", postTimeout: " + isPostTimeout + ", defaultBid: " + bidDetails.getDefaultBidStatus());
      /* istanbul ignore else */
      if (isPostTimeout === true /*&& !bidDetails.isServerSide*/) {
        bidDetails.setPostTimeoutStatus();
      }
      var lastBidID = bidMapEntry.getLastBidIDForAdapter(bidderID);
      if (lastBidID != "") {
        var lastBid = bidMapEntry.getBid(bidderID, lastBidID),
          //todo: what if the lastBid is null
          lastBidWasDefaultBid = lastBid.getDefaultBidStatus() === 1,
          lastBidWasErrorBid = lastBid.getDefaultBidStatus() === -1;
        if (lastBidWasDefaultBid || !isPostTimeout || lastBidWasErrorBid) {
          /* istanbul ignore else */
          if (lastBidWasDefaultBid) {
            util.log(CONSTANTS.MESSAGES.M23 + bidderID);
          }
          if (lastBidWasDefaultBid || lastBid.getNetEcpm() < bidDetails.getNetEcpm() || lastBidWasErrorBid) {
            util.log(CONSTANTS.MESSAGES.M12 + lastBid.getNetEcpm() + CONSTANTS.MESSAGES.M13 + bidDetails.getNetEcpm() + CONSTANTS.MESSAGES.M14 + bidderID);
            refThis.storeBidInBidMap(divID, bidderID, bidDetails, latency);
          } else {
            util.log(CONSTANTS.MESSAGES.M12 + lastBid.getNetEcpm() + CONSTANTS.MESSAGES.M15 + bidDetails.getNetEcpm() + CONSTANTS.MESSAGES.M16 + bidderID);
          }
        } else {
          util.log(CONSTANTS.MESSAGES.M17);
        }
      } else {
        util.log(CONSTANTS.MESSAGES.M18 + bidderID);
        refThis.storeBidInBidMap(divID, bidderID, bidDetails, latency);
      }
      if (isPostTimeout) {
        //explicitly trigger user syncs since its a post timeout bid
        setTimeout(window[CONSTANTS.COMMON.PREBID_NAMESPACE].triggerUserSyncs, 10);
      }
    };
    function storeBidInBidMap(slotID, adapterID, theBid, latency) {
      // TDD, i/o : done
    
      // Adding a hook for publishers to modify the bid we have to store
      // we should not call the hook for defaultbids and post-timeout bids
      // Here slotID, adapterID, and latency are read-only and theBid can be modified
      // if(theBid.getDefaultBidStatus() === 0 && theBid.getPostTimeoutStatus() === false){
      // 	util.handleHook(CONSTANTS.HOOKS.BID_RECEIVED, [slotID, adapterID, theBid, latency]);
      // }
    
      window.PWT.bidMap[slotID].setNewBid(adapterID, theBid);
      window.PWT.bidIdMap[theBid.getBidID()] = {
        s: slotID,
        a: adapterID
      };
    
      /* istanbul ignore else */
      if (theBid.getDefaultBidStatus() === 0 && theBid.adapterID !== "pubmaticServer") {
        util.vLogInfo(slotID, {
          type: "bid",
          bidder: adapterID + (CONFIG.getBidPassThroughStatus(adapterID) !== 0 ? '(Passthrough)' : ''),
          bidDetails: theBid,
          latency: latency,
          s2s: CONFIG.isServerSideAdapter(adapterID),
          adServerCurrency: util.getCurrencyToDisplay()
        });
      }
    }
    
    /* start-test-block */
    exports.storeBidInBidMap = storeBidInBidMap;
    /* end-test-block */
    
    function resetBid(divID, impressionID) {
      // TDD, i/o : done
      util.vLogInfo(divID, {
        type: "hr"
      });
      delete window.PWT.bidMap[divID];
      refThis.createBidEntry(divID);
      window.PWT.bidMap[divID].setImpressionID(impressionID);
    }
    
    /* start-test-block */
    exports.resetBid = resetBid;
    /* end-test-block */
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    function createMetaDataKey(pattern, bmEntry, keyValuePairs) {
      var output = "",
        validBidCount = 0,
        partnerCount = 0,
        macros = CONSTANTS.METADATA_MACROS,
        macroRegexFlag = "g";
      util.forEachOnObject(bmEntry.adapters, function (adapterID, adapterEntry) {
        if (adapterEntry.getLastBidID() != "") {
          // If pubmaticServerBidAdapter then don't increase partnerCount
          adapterID !== "pubmaticServer" && partnerCount++;
          util.forEachOnObject(adapterEntry.bids, function (bidID, theBid) {
            // Description-> adapterID == "pubmatic" && theBid.netEcpm == 0 this check is put because from pubmaticBidAdapter in prebid we are
            // passing zero bid when there are no bid under timout for latency reports and this caused issue to have zero bids in pwtm key
            // so put this check which will not log zero bids for pubmatic. Note : From prebid 1.x onwards we do not get zero bids in case of no bids.
            if (theBid.getDefaultBidStatus() == 1 || theBid.getPostTimeoutStatus() == 1 || theBid.getGrossEcpm() == 0) {
              return;
            }
            validBidCount++;
            output += replaceMetaDataMacros(pattern, theBid);
          });
        }
      });
      if (output.length == 0) {
        output = pattern;
      }
      output = output.replace(new RegExp(macros.BID_COUNT, macroRegexFlag), validBidCount);
      output = output.replace(new RegExp(macros.PARTNER_COUNT, macroRegexFlag), partnerCount);
      keyValuePairs[CONSTANTS.WRAPPER_TARGETING_KEYS.META_DATA] = encodeURIComponent(output);
    }
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    /* start-test-block */
    exports.createMetaDataKey = createMetaDataKey;
    /* end-test-block */
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    function replaceMetaDataMacros(pattern, theBid) {
      var macros = CONSTANTS.METADATA_MACROS,
        macroRegexFlag = "g";
      return pattern.replace(new RegExp(macros.PARTNER, macroRegexFlag), theBid.getAdapterID()).replace(new RegExp(macros.WIDTH, macroRegexFlag), theBid.getWidth()).replace(new RegExp(macros.HEIGHT, macroRegexFlag), theBid.getHeight()).replace(new RegExp(macros.GROSS_ECPM, macroRegexFlag), theBid.getGrossEcpm()).replace(new RegExp(macros.NET_ECPM, macroRegexFlag), theBid.getNetEcpm());
    }
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    /* start-test-block */
    exports.replaceMetaDataMacros = replaceMetaDataMacros;
    /* end-test-block */
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    function auctionBids(bmEntry) {
      // TDD, i/o : done
      var winningBid = null,
        keyValuePairs = {};
      util.forEachOnObject(bmEntry.adapters, function (adapterID, adapterEntry) {
        var obj = refThis.auctionBidsCallBack(adapterID, adapterEntry, keyValuePairs, winningBid);
        winningBid = obj.winningBid;
        keyValuePairs = obj.keyValuePairs;
      });
    
      // removeIf(removeLegacyAnalyticsRelatedCode)
      if (CONFIG.getMataDataPattern() !== null) {
        createMetaDataKey(CONFIG.getMataDataPattern(), bmEntry, keyValuePairs);
      }
      // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
      return {
        wb: winningBid,
        kvp: keyValuePairs
      };
    }
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    /* start-test-block */
    exports.auctionBids = auctionBids;
    /* end-test-block */
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeNativeRelatedCode)
    function updateNativeTargtingKeys(keyValuePairs) {
      for (var key in keyValuePairs) {
        if (key.indexOf("native") >= 0 && key.split("_").length === 3) {
          delete keyValuePairs[key];
        }
      }
    }
    // endRemoveIf(removeNativeRelatedCode)
    
    // removeIf(removeNativeRelatedCode)
    /* start-test-block */
    exports.updateNativeTargtingKeys = updateNativeTargtingKeys;
    /* end-test-block */
    // endRemoveIf(removeNativeRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    function auctionBidsCallBack(adapterID, adapterEntry, keyValuePairs, winningBid) {
      // TDD, i/o : done
      var refThis = this;
      if (adapterEntry.getLastBidID() != "") {
        util.forEachOnObject(adapterEntry.bids, function (bidID, theBid) {
          // do not consider post-timeout bids
          /* istanbul ignore else */
          if (theBid.getPostTimeoutStatus() === true) {
            return {
              winningBid: winningBid,
              keyValuePairs: keyValuePairs
            };
          }
    
          /* istanbul ignore else */
          if (theBid.getDefaultBidStatus() !== 1 && CONFIG.getSendAllBidsStatus() == 1) {
            theBid.setSendAllBidsKeys();
          }
          if (winningBid !== null) {
            if (winningBid.getNetEcpm() < theBid.getNetEcpm()) {
              // i.e. the current bid is the winning bid, so remove the native keys from keyValuePairs
              // removeIf(removeNativeRelatedCode)
              refThis.updateNativeTargtingKeys(keyValuePairs);
              // endRemoveIf(removeNativeRelatedCode)
            } else {
              // i.e. the current bid is not the winning bid, so remove the native keys from theBid.keyValuePairs
              var bidKeyValuePairs = theBid.getKeyValuePairs();
              // removeIf(removeNativeRelatedCode)
              refThis.updateNativeTargtingKeys(bidKeyValuePairs);
              // endRemoveIf(removeNativeRelatedCode)
              theBid.keyValuePairs = bidKeyValuePairs;
            }
          }
          util.copyKeyValueObject(keyValuePairs, theBid.getKeyValuePairs());
    
          /* istanbul ignore else */
          if (CONFIG.getBidPassThroughStatus(adapterID) !== 0) {
            return {
              winningBid: winningBid,
              keyValuePairs: keyValuePairs
            };
          }
          if (winningBid == null) {
            winningBid = theBid;
          } else if (winningBid.getNetEcpm() < theBid.getNetEcpm()) {
            winningBid = theBid;
          }
        });
        return {
          winningBid: winningBid,
          keyValuePairs: keyValuePairs
        };
      } else {
        return {
          winningBid: winningBid,
          keyValuePairs: keyValuePairs
        };
      }
    }
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    /* start-test-block */
    exports.auctionBidsCallBack = auctionBidsCallBack;
    /* end-test-block */
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    exports.getBid = function (divID) {
      // TDD, i/o : done
    
      var winningBid = null;
      var keyValuePairs = null;
      /* istanbul ignore else */
      if (util.isOwnProperty(window.PWT.bidMap, divID)) {
        var data = refThis.auctionBids(window.PWT.bidMap[divID]);
        winningBid = data.wb;
        keyValuePairs = data.kvp;
        window.PWT.bidMap[divID].setAnalyticEnabled(); //Analytics Enabled
    
        if (winningBid && winningBid.getNetEcpm() > 0) {
          winningBid.setStatus(1);
          winningBid.setWinningBidStatus();
          util.vLogInfo(divID, {
            type: "win-bid",
            bidDetails: winningBid,
            adServerCurrency: util.getCurrencyToDisplay()
          });
        } else {
          util.vLogInfo(divID, {
            type: "win-bid-fail"
          });
        }
      }
      return {
        wb: winningBid,
        kvp: keyValuePairs
      };
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    exports.getBidById = function (bidID) {
      // TDD, i/o : done
      /* istanbul ignore else */
      if (!util.isOwnProperty(window.PWT.bidIdMap, bidID)) {
        util.log(CONSTANTS.MESSAGES.M25 + bidID);
        return null;
      }
      var divID = window.PWT.bidIdMap[bidID].s;
      var adapterID = window.PWT.bidIdMap[bidID].a;
    
      /* istanbul ignore else */
      if (util.isOwnProperty(window.PWT.bidMap, divID)) {
        util.log("BidID: " + bidID + ", DivID: " + divID + CONSTANTS.MESSAGES.M19 + adapterID);
        var theBid = window.PWT.bidMap[divID].getBid(adapterID, bidID);
        /* istanbul ignore else */
        if (theBid == null) {
          return null;
        }
        return {
          bid: theBid,
          slotid: divID
        };
      }
      util.log(CONSTANTS.MESSAGES.M25 + bidID);
      return null;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    exports.displayCreative = function (theDocument, bidID) {
      // TDD, i/o : done
      storedObject = localStorage.getItem(PREFIX + window.location.hostname);
      var bidDetails = refThis.getBidById(bidID);
      /* istanbul ignore else */
      if (bidDetails) {
        var theBid = bidDetails.bid,
          divID = bidDetails.slotid;
        util.displayCreative(theDocument, theBid);
        util.vLogInfo(divID, {
          type: 'disp',
          adapter: theBid.getAdapterID()
        });
        refThis.executeMonetizationPixel(divID, theBid);
        // Check if browsers local storage has auction related data and update impression served count accordingly.
        var frequencyDepth = JSON.parse(localStorage.getItem(PREFIX + window.location.hostname)) || {};
        if (frequencyDepth !== null && frequencyDepth.slotLevelFrquencyDepth) {
          frequencyDepth.slotLevelFrquencyDepth[frequencyDepth.codeAdUnitMap[divID]].impressionServed = frequencyDepth.slotLevelFrquencyDepth[frequencyDepth.codeAdUnitMap[divID]].impressionServed + 1;
          frequencyDepth.impressionServed = frequencyDepth.impressionServed + 1;
        }
        localStorage.setItem(PREFIX + window.location.hostname, JSON.stringify(frequencyDepth));
      }
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    exports.executeAnalyticsPixel = function () {
      // TDD, i/o : done
      storedObject = localStorage.getItem(PREFIX + window.location.hostname);
      frequencyDepth = storedObject !== null ? JSON.parse(storedObject) : {};
      var outputObj = {
          s: []
        },
        pubId = CONFIG.getPublisherId(),
        // gdprData = GDPR.getUserConsentDataFromLS(),
        // consentString = "",
        pixelURL = CONFIG.getAnalyticsPixelURL(),
        impressionIDMap = {} // impID => slots[]
      ;
      /* istanbul ignore else */
      if (!pixelURL) {
        return;
      }
      pixelURL = CONSTANTS.COMMON.PROTOCOL + pixelURL + "pubid=" + pubId;
      outputObj[CONSTANTS.CONFIG.PUBLISHER_ID] = CONFIG.getPublisherId();
      outputObj[CONSTANTS.LOGGER_PIXEL_PARAMS.TIMEOUT] = "" + CONFIG.getTimeout();
      outputObj[CONSTANTS.LOGGER_PIXEL_PARAMS.PAGE_URL] = window.decodeURIComponent(util.metaInfo.pageURL);
      outputObj[CONSTANTS.LOGGER_PIXEL_PARAMS.PAGE_DOMAIN] = util.metaInfo.pageDomain;
      outputObj[CONSTANTS.LOGGER_PIXEL_PARAMS.TIMESTAMP] = util.getCurrentTimestamp();
      outputObj[CONSTANTS.CONFIG.PROFILE_ID] = CONFIG.getProfileID();
      outputObj[CONSTANTS.CONFIG.PROFILE_VERSION_ID] = CONFIG.getProfileDisplayVersionID();
      outputObj['ih'] = CONFIG.isUserIdModuleEnabled() ? 1 : 0;
      outputObj["bm"] = refThis.getBrowser();
      outputObj["tgid"] = function () {
        var testGroupId = parseInt(PWT.testGroupId || 0);
        if (testGroupId <= 15 && testGroupId >= 0) {
          return testGroupId;
        }
        return 0;
      }();
      if (Object.keys(frequencyDepth).length) {
        outputObj["tpv"] = frequencyDepth.pageView;
        outputObj["trc"] = frequencyDepth.slotCnt;
        outputObj["tbs"] = frequencyDepth.bidServed;
        outputObj["tis"] = frequencyDepth.impressionServed;
        outputObj["lip"] = frequencyDepth.lip;
      }
    
      // As discussed we won't be seding gdpr data to logger
      // if (CONFIG.getGdpr()) {
      // 	consentString = gdprData && gdprData.c ? encodeURIComponent(gdprData.c) : "";
    
      // 	outputObj[CONSTANTS.CONFIG.GDPR_CONSENT] = gdprData && gdprData.g;
      // 	outputObj[CONSTANTS.CONFIG.CONSENT_STRING] = consentString;
    
      // 	pixelURL += "&gdEn=" + (CONFIG.getGdpr() ? 1 : 0);
      // }
    
      util.forEachOnObject(window.PWT.bidMap, function (slotID, bmEntry) {
        refThis.analyticalPixelCallback(slotID, bmEntry, impressionIDMap);
      });
      util.forEachOnObject(impressionIDMap, function (impressionID, slots) {
        /* istanbul ignore next */
        /* istanbul ignore else */
        if (slots.length > 0) {
          outputObj.s = slots;
          outputObj[CONSTANTS.COMMON.IMPRESSION_ID] = window.encodeURIComponent(impressionID);
          if (CONFIG.isFloorPriceModuleEnabled()) {
            var _floorData = window.PWT.floorData[outputObj[CONSTANTS.COMMON.IMPRESSION_ID]];
            outputObj["fmv"] = _floorData.floorRequestData ? _floorData.floorRequestData.modelVersion || undefined : undefined, outputObj["ft"] = _floorData.floorResponseData ? _floorData.floorResponseData.enforcements.enforceJS == false ? 0 : 1 : undefined;
          }
          outputObj.psl = slots.psl;
          outputObj.dvc = {
            "plt": util.getDevicePlatform()
          };
          // (new window.Image()).src = pixelURL + "&json=" + window.encodeURIComponent(JSON.stringify(outputObj));
          util.ajaxRequest(pixelURL, function () {}, "json=" + window.encodeURIComponent(JSON.stringify(outputObj)), {
            contentType: "application/x-www-form-urlencoded",
            // as per https://inside.pubmatic.com:8443/confluence/pages/viewpage.action?spaceKey=Products&title=POST+support+for+logger+in+Wrapper-tracker
            withCredentials: true
          });
        }
      });
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    exports.executeMonetizationPixel = function (slotID, theBid) {
      // TDD, i/o : done
      var pixelURL = util.generateMonetizationPixel(slotID, theBid);
      if (!pixelURL) {
        return;
      }
      refThis.setImageSrcToPixelURL(pixelURL);
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    function getAdUnitSizes(bmEntry) {
      var _adapter = Object.keys(bmEntry.adapters).filter(function (adapter) {
        if (Object.keys(bmEntry.adapters[adapter].bids).filter(function (bid) {
          if (!!bmEntry.adapters[adapter].bids[bid].isWinningBid && bmEntry.adapters[adapter].bids[bid].adFormat === "native") return bmEntry.adapters[adapter].bids[bid];
        }).length == 1) return adapter;
      });
      if (!!_adapter.length) {
        return ["1x1"];
      }
      return bmEntry.getSizes();
    }
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    /* start-test-block */
    exports.getAdUnitSizes = getAdUnitSizes;
    /* end-test-block */
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    function getAdUnitInfo(slotId) {
      return window.PWT.adUnits[slotId] || slotId;
    }
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    /* start-test-block */
    exports.getAdUnitInfo = getAdUnitInfo;
    /* end-test-block */
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    function getAdUnitAdFormats(mediaTypes) {
      var af = !!mediaTypes ? Object.keys(mediaTypes).map(function (mediatype) {
        return CONSTANTS.MEDIATYPE[mediatype.toUpperCase()];
      }).filter(function (mtype) {
        return mtype != null;
      }) : [];
      return af || [];
    }
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    /* start-test-block */
    exports.getAdUnitAdFormats = getAdUnitAdFormats;
    /* end-test-block */
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    function getAdDomain(bidResponse) {
      if (bidResponse.meta && bidResponse.meta.advertiserDomains && bidResponse.meta.advertiserDomains.length > 0) {
        var adomain = bidResponse.meta.advertiserDomains[0];
        if (adomain) {
          try {
            var hostname = new URL(adomain);
            return hostname.hostname.replace('www.', '');
          } catch (e) {
            util.log("Adomain URL (Not a proper URL):" + adomain);
            return adomain.split('/')[0].replace('www.', '');
          }
        }
      }
    }
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // Returns property from localstorages slotlevel object
    exports.getSlotLevelFrequencyDepth = function (frequencyDepth, prop, adUnit) {
      var freqencyValue;
      if (Object.keys(frequencyDepth).length && frequencyDepth.slotLevelFrquencyDepth) {
        freqencyValue = frequencyDepth.slotLevelFrquencyDepth[adUnit] && frequencyDepth.slotLevelFrquencyDepth[adUnit][prop];
      }
      return freqencyValue;
    };
    /**
     * Prepare meta object to pass in logger call
     * @param {*} meta 
     */
    function getMetadata(meta) {
      if (!meta || util.isEmptyObject(meta)) return;
      const metaObj = {};
      if (meta.networkId) metaObj.nwid = meta.networkId;
      if (meta.advertiserId) metaObj.adid = meta.advertiserId;
      if (meta.networkName) metaObj.nwnm = meta.networkName;
      if (meta.primaryCatId) metaObj.pcid = meta.primaryCatId;
      if (meta.advertiserName) metaObj.adnm = meta.advertiserName;
      if (meta.agencyId) metaObj.agid = meta.agencyId;
      if (meta.agencyName) metaObj.agnm = meta.agencyName;
      if (meta.brandId) metaObj.brid = meta.brandId;
      if (meta.brandName) metaObj.brnm = meta.brandName;
      if (meta.dchain) metaObj.dc = meta.dchain;
      if (meta.demandSource) metaObj.ds = meta.demandSource;
      if (meta.secondaryCatIds) metaObj.scids = meta.secondaryCatIds;
      if (util.isEmptyObject(metaObj)) return;
      return metaObj;
    }
    exports.getMetadata = getMetadata;
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    function analyticalPixelCallback(slotID, bmEntry, impressionIDMap) {
      // TDD, i/o : done
      storedObject = localStorage.getItem(PREFIX + window.location.hostname);
      var frequencyDepth = storedObject !== null ? JSON.parse(storedObject) : {};
      var usePBSAdapter = CONFIG.usePBSAdapter();
      var startTime = bmEntry.getCreationTime() || 0;
      var pslTime = usePBSAdapter && window.pbsLatency ? 0 : undefined;
      var impressionID = bmEntry.getImpressionID();
      var adUnitInfo = refThis.getAdUnitInfo(slotID);
      var latencyValue = {};
      const isAnalytics = true; // this flag is required to get grossCpm and netCpm in dollars instead of adserver currency
      /* istanbul ignore else */
      if (bmEntry.getAnalyticEnabledStatus() && !bmEntry.getExpiredStatus()) {
        var slotObject = {
          "sn": slotID,
          "sz": refThis.getAdUnitSizes(bmEntry),
          "au": adUnitInfo.adUnitId || slotID,
          "fskp": window.PWT.floorData ? window.PWT.floorData[impressionID] ? window.PWT.floorData[impressionID].floorRequestData ? window.PWT.floorData[impressionID].floorRequestData.skipped == false ? 0 : 1 : undefined : undefined : undefined,
          "mt": refThis.getAdUnitAdFormats(adUnitInfo.mediaTypes),
          "ps": [],
          "bs": refThis.getSlotLevelFrequencyDepth(frequencyDepth, 'bidServed', adUnitInfo.adUnitId),
          "is": refThis.getSlotLevelFrequencyDepth(frequencyDepth, 'impressionServed', adUnitInfo.adUnitId),
          "rc": refThis.getSlotLevelFrequencyDepth(frequencyDepth, 'slotCnt', adUnitInfo.adUnitId),
          "vw": frequencyDepth && frequencyDepth.viewedSlot && frequencyDepth.viewedSlot[adUnitInfo.adUnitId],
          "rf": window.PWT.newAdUnits ? window.PWT.newAdUnits[impressionID] ? window.PWT.newAdUnits[impressionID][slotID] ? window.PWT.newAdUnits[impressionID][slotID]['pubmaticAutoRefresh'] ? window.PWT.newAdUnits[impressionID][slotID]['pubmaticAutoRefresh']['isRefreshed'] ? 1 : 0 : 0 : 0 : 0 : 0
        };
        bmEntry.setExpired();
        impressionIDMap[impressionID] = impressionIDMap[impressionID] || [];
        util.forEachOnObject(bmEntry.adapters, function (adapterID, adapterEntry) {
          /* istanbul ignore else */
          if (CONFIG.getBidPassThroughStatus(adapterID) == 1) {
            return;
          }
          util.forEachOnObject(adapterEntry.bids, function (bidID, theBid) {
            if (usePBSAdapter) {
              // In PrebidServerBidAdapater we are capturing start and end time of request
              // fetching these values here to calculate psl time for logger call
              latencyValue = window.pbsLatency && window.pbsLatency[impressionID];
              if (latencyValue && latencyValue['endTime'] && latencyValue['startTime']) {
                pslTime = latencyValue['endTime'] - latencyValue['startTime'];
              }
              // When we use PrebidServerBidAdapter we do not get seatbid for zero bid / no bid partners 
              // as we need to log PubMatic partner in logger will be changing db = 0. 
              if ((adapterID === "pubmatic" || adapterID === "pubmatic2") && util.isOwnProperty(window.partnersWithoutErrorAndBids, impressionID) && window.partnersWithoutErrorAndBids[impressionID].includes(adapterID)) {
                theBid.defaultBid = 0;
              } else if (util.isOwnProperty(window.partnersWithoutErrorAndBids, impressionID) && window.partnersWithoutErrorAndBids[impressionID].includes(adapterID) && CONFIG.getAdapterNameForAlias(adapterID).includes('pubmatic')) {
                theBid.defaultBid = 0;
              }
            }
            var endTime = theBid.getReceivedTime();
            if (adapterID === "pubmaticServer") {
              if (util.isOwnProperty(window.PWT.owLatency, impressionID) && util.isOwnProperty(window.PWT.owLatency[impressionID], "startTime") && util.isOwnProperty(window.PWT.owLatency[impressionID], "endTime")) {
                pslTime = window.PWT.owLatency[impressionID].endTime - window.PWT.owLatency[impressionID].startTime;
              } else {
                pslTime = 0;
                util.log("Logging pubmaticServer latency as 0 for impressionID: " + impressionID);
              }
              util.log("PSL logging: time logged for id " + impressionID + " is " + pslTime);
              return;
            }
            if (CONFIG.getAdapterMaskBidsStatus(adapterID) == 1) {
              if (theBid.getWinningBidStatus() === false) {
                return;
              }
            }
            /* if serverside adapter and
                             db == 0 and
                             getServerSideResponseTime returns -1, it means that server responded with error code 1/2/6
                             hence do not add entry in logger.
                             keeping the check for responseTime on -1 since there could be a case where:
                    ss status = 1, db status = 0, and responseTime is 0, but error code is 4, i,e. no bid. And for error code 4,
                    we want to log the data not skip it.
                          */
            if (theBid.getServerSideStatus()) {
              if (theBid.getDefaultBidStatus() === -1 && theBid.getServerSideResponseTime() === -1) {
                return;
              }
            }
            // Logic : if adapter is pubmatic and bid falls under two condition :
            /**
             *  1.timeout zero bids
             *  2.no response from translator
             * Then we don't log it for pubmatic
             * Reason : Logging timeout zero bids causing reports to show more zero in comparision to other bidders
             * Originally we started logging this for latency purposes.
             * Future Scope : Remove below check to log with appt. value(s)
            */
            /*istanbul ignore else*/
            if ((adapterID === "pubmatic" || adapterID === "pubmatic2") && (theBid.getDefaultBidStatus() || theBid.getPostTimeoutStatus() && theBid.getGrossEcpm(isAnalytics) == 0)) {
              return;
            }
            var pbbid = theBid.getPbBid();
    
            //todo: take all these key names from constants
            slotObject["ps"].push({
              "pn": CONFIG.getAdapterNameForAlias(adapterID),
              "bc": adapterID,
              "bidid": pbbid && pbbid.prebidBidId ? pbbid.prebidBidId : bidID,
              "origbidid": bidID,
              "db": theBid.getDefaultBidStatus(),
              "kgpv": theBid.getKGPV(),
              "kgpsv": theBid.getKGPV(true),
              "psz": theBid.getWidth() + "x" + theBid.getHeight(),
              "eg": theBid.getGrossEcpm(isAnalytics),
              "en": theBid.getNetEcpm(isAnalytics),
              "di": theBid.getDealID(),
              "dc": theBid.getDealChannel(),
              "l1": theBid.getServerSideStatus() ? theBid.getServerSideResponseTime() : endTime - startTime,
              "l2": 0,
              "adv": pbbid ? getAdDomain(pbbid) || undefined : undefined,
              "ss": theBid.getServerSideStatus(),
              "t": theBid.getPostTimeoutStatus() === false ? 0 : 1,
              "wb": theBid.getWinningBidStatus() === true ? 1 : 0,
              "mi": theBid.getServerSideStatus() ? theBid.getMi(adapterID) : undefined,
              "af": theBid.getAdFormat(),
              "ocpm": CONFIG.getAdServerCurrency() ? theBid.getOriginalCpm() : theBid.getGrossEcpm(),
              "ocry": CONFIG.getAdServerCurrency() ? theBid.getOriginalCurrency() : CONSTANTS.COMMON.ANALYTICS_CURRENCY,
              "piid": theBid.getsspID(),
              "frv": theBid.getServerSideStatus() ? undefined : pbbid ? pbbid.floorData ? pbbid.floorData.floorRuleValue : undefined : undefined,
              "md": pbbid ? refThis.getMetadata(pbbid.meta) : undefined
            });
          });
        });
        impressionIDMap[impressionID].push(slotObject);
        // special handling when all media types are disabled for adunit and
        // if we are using PrebidServerBidAdapter with 
        if (usePBSAdapter && CONFIG.getServerEnabledAdaptars().length && pslTime == undefined && !window.pbsLatency) {
          pslTime = 0;
        }
        if (pslTime !== undefined) {
          impressionIDMap[impressionID].psl = pslTime;
        }
      }
    }
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    /* start-test-block */
    exports.analyticalPixelCallback = analyticalPixelCallback;
    /* end-test-block */
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    // todo: using removeLegacyAnalyticsRelatedCode will make this function unavailable with PBJS analytics, 
    //			i assume we will not be using this function for Native when PBJS analytics is enabled
    /**
     * function which takes url and creates an image and executes them
     * used to execute trackers
     * @param {*} pixelURL
     * @param {*} useProtocol
     * @returns
     */
    exports.setImageSrcToPixelURL = function (pixelURL, useProtocol) {
      // TDD, i/o : done
      var img = new window.Image();
      if (useProtocol != undefined && !useProtocol) {
        img.src = pixelURL;
        return;
      }
      if (String(pixelURL).trim().substring(0, 8) != CONSTANTS.COMMON.PROTOCOL) {
        pixelURL = CONSTANTS.COMMON.PROTOCOL + pixelURL;
      }
      img.src = pixelURL;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    exports.getAllPartnersBidStatuses = function (bidMaps, divIds) {
      var status = true;
      util.forEachOnArray(divIds, function (key, divId) {
        // OLD APPROACH: check if we have got bids per bidder for each slot
        // bidMaps[divId] && util.forEachOnObject(bidMaps[divId].adapters, function (adapterID, adapter) {
        // 	util.forEachOnObject(adapter.bids, function (bidId, theBid) {
        // 		status = status && (theBid.getDefaultBidStatus() === 0);
        // 	});
        // });
        // NEW APPROACH: check allPossibleBidsReceived flag which is set when pbjs.requestBids->bidsBackHandler is executed
        if (bidMaps[divId]) {
          status = status && bidMaps[divId].hasAllPossibleBidsReceived() === true;
        }
      });
      return status;
    };
    
    // removeIf(removeNativeRelatedCode)
    /**
     * This function is used to execute trackers on event
     * in case of native. On click of native create element
     * @param {*} event
     */
    exports.loadTrackers = function (event) {
      var bidId = util.getBidFromEvent(event);
      window.parent.postMessage(JSON.stringify({
        pwt_type: "3",
        pwt_bidID: bidId,
        pwt_origin: CONSTANTS.COMMON.PROTOCOL + window.location.hostname,
        pwt_action: "click"
      }), "*");
    };
    // endRemoveIf(removeNativeRelatedCode)
    
    // removeIf(removeNativeRelatedCode)
    /**
     * function takes bidID and post a message to parent pwt.js to execute monetization pixels.
     * @param {*} bidID
     */
    exports.executeTracker = function (bidID) {
      window.parent.postMessage(JSON.stringify({
        pwt_type: "3",
        pwt_bidID: bidID,
        pwt_origin: CONSTANTS.COMMON.PROTOCOL + window.location.hostname,
        pwt_action: "imptrackers"
      }), "*");
    };
    // endRemoveIf(removeNativeRelatedCode)
    
    // removeIf(removeNativeRelatedCode)
    /**
     * based on action it executes either the clickTrackers or
     * impressionTrackers and javascriptTrackers.
     * Javascript trackers is a valid html, urls already wrapped in script tagsand its guidelines can be found at
     * iab spec document.
     * @param {*} bidDetails
     * @param {*} action
     */
    exports.fireTracker = function (bidDetails, action) {
      var trackers;
      if (action === "click") {
        trackers = bidDetails["native"] && bidDetails["native"].clickTrackers;
      } else if (action === "imptrackers") {
        trackers = bidDetails["native"] && bidDetails["native"].impressionTrackers;
        if (bidDetails['native'] && bidDetails['native'].javascriptTrackers) {
          var iframe = util.createInvisibleIframe();
          /* istanbul ignore else */
          if (!iframe) {
            throw {
              message: 'Failed to create invisible frame for native javascript trackers'
            };
          }
          /* istanbul ignore else */
          if (!iframe.contentWindow) {
            throw {
              message: 'Unable to access frame window for native javascript trackers'
            };
          }
          window.document.body.appendChild(iframe);
          iframe.contentWindow.document.open();
          iframe.contentWindow.document.write(bidDetails['native'].javascriptTrackers);
          iframe.contentWindow.document.close();
        }
      }
      (trackers || []).forEach(function (url) {
        refThis.setImageSrcToPixelURL(url, false);
      });
    };
    // endRemoveIf(removeNativeRelatedCode)
    
    // this function generates all satndard key-value pairs for a given bid and setup, set these key-value pairs in an object
    // todo: write unit test cases
    // removeIf(removeLegacyAnalyticsRelatedCode)
    exports.setStandardKeys = function (winningBid, keyValuePairs) {
      if (winningBid) {
        keyValuePairs[CONSTANTS.WRAPPER_TARGETING_KEYS.BID_ID] = winningBid.getBidID();
        keyValuePairs[CONSTANTS.WRAPPER_TARGETING_KEYS.BID_STATUS] = winningBid.getStatus();
        keyValuePairs[CONSTANTS.WRAPPER_TARGETING_KEYS.BID_ECPM] = winningBid.getNetEcpm().toFixed(CONSTANTS.COMMON.BID_PRECISION);
        var dealID = winningBid.getDealID();
        if (dealID) {
          keyValuePairs[CONSTANTS.WRAPPER_TARGETING_KEYS.BID_DEAL_ID] = dealID;
        }
        keyValuePairs[CONSTANTS.WRAPPER_TARGETING_KEYS.BID_ADAPTER_ID] = winningBid.getAdapterID();
        keyValuePairs[CONSTANTS.WRAPPER_TARGETING_KEYS.PUBLISHER_ID] = CONFIG.getPublisherId();
        keyValuePairs[CONSTANTS.WRAPPER_TARGETING_KEYS.PROFILE_ID] = CONFIG.getProfileID();
        keyValuePairs[CONSTANTS.WRAPPER_TARGETING_KEYS.PROFILE_VERSION_ID] = CONFIG.getProfileDisplayVersionID();
        keyValuePairs[CONSTANTS.WRAPPER_TARGETING_KEYS.BID_SIZE] = winningBid.width + 'x' + winningBid.height;
        keyValuePairs[CONSTANTS.WRAPPER_TARGETING_KEYS.PLATFORM_KEY] = winningBid.getAdFormat() == CONSTANTS.FORMAT_VALUES.VIDEO && winningBid.getcacheUUID() ? CONSTANTS.PLATFORM_VALUES.VIDEO : winningBid.getNative() ? CONSTANTS.PLATFORM_VALUES.NATIVE : CONSTANTS.PLATFORM_VALUES.DISPLAY;
        if (winningBid.getAdFormat() == CONSTANTS.FORMAT_VALUES.VIDEO && winningBid.getcacheUUID()) {
          keyValuePairs[CONSTANTS.WRAPPER_TARGETING_KEYS.CACHE_PATH] = CONSTANTS.CONFIG.CACHE_PATH;
          keyValuePairs[CONSTANTS.WRAPPER_TARGETING_KEYS.CACHE_URL] = CONSTANTS.CONFIG.CACHE_URL;
          keyValuePairs[CONSTANTS.WRAPPER_TARGETING_KEYS.CACHE_ID] = winningBid.getcacheUUID();
        }
      } else {
        util.logWarning('Not generating key-value pairs as invalid winningBid object passed. WinningBid: ');
        util.logWarning(winningBid);
      }
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    exports.getBrowser = function () {
      var regExBrowsers = CONSTANTS.REGEX_BROWSERS;
      var browserMapping = CONSTANTS.BROWSER_MAPPING;
      var userAgent = navigator.userAgent;
      var browserName = userAgent == null ? -1 : 0;
      if (userAgent) {
        for (var i = 0; i < regExBrowsers.length; i++) {
          if (userAgent.match(regExBrowsers[i])) {
            browserName = browserMapping[i];
            break;
          }
        }
      }
      return browserName;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    /***/ }),
    
    /***/ "./src_new/bmEntry.js":
    /*!****************************!*\
      !*** ./src_new/bmEntry.js ***!
      \****************************/
    /*! no static exports found */
    /***/ (function(module, exports, __webpack_require__) {
    
    var CONSTANTS = __webpack_require__(/*! ./constants.js */ "./src_new/constants.js");
    var util = __webpack_require__(/*! ./util.js */ "./src_new/util.js");
    var AdapterEntry = __webpack_require__(/*! ./adapterEntry */ "./src_new/adapterEntry.js").AdapterEntry;
    function BMEntry(name) {
      this.name = name;
      this.sizes = [];
      this.adapters = {};
      this.creationTime = util.getCurrentTimestampInMs();
      this.impressionID = "";
      this.analyticsEnabled = false;
      this.expired = false;
      this.allPossibleBidsReceived = false; // Boolean: this flag will be set to true when Prebid has received all possible bids and Prebid has executed "bidsBackHandler" of pbjs.requestBids
    }
    
    BMEntry.prototype.setExpired = function () {
      this.expired = true;
      return this;
    };
    BMEntry.prototype.getExpiredStatus = function () {
      return this.expired;
    };
    BMEntry.prototype.setAnalyticEnabled = function () {
      this.analyticsEnabled = true;
      return this;
    };
    BMEntry.prototype.getAnalyticEnabledStatus = function () {
      return this.analyticsEnabled;
    };
    BMEntry.prototype.setNewBid = function (adapterID, theBid) {
      /* istanbul ignore else */
      if (!util.isOwnProperty(this.adapters, adapterID)) {
        /* istanbul ignore next */
        this.adapters[adapterID] = new AdapterEntry(adapterID);
      }
      /* istanbul ignore next */
      this.adapters[adapterID].setNewBid(theBid);
    };
    BMEntry.prototype.getBid = function (adapterID, bidID) {
      /* istanbul ignore else */
      if (util.isOwnProperty(this.adapters, adapterID)) {
        return this.adapters[adapterID].getBid(bidID);
      }
    };
    BMEntry.prototype.getName = function () {
      return this.name;
    };
    BMEntry.prototype.getCreationTime = function () {
      return this.creationTime;
    };
    BMEntry.prototype.setImpressionID = function (value) {
      this.impressionID = value;
      return this;
    };
    BMEntry.prototype.getImpressionID = function () {
      return this.impressionID;
    };
    BMEntry.prototype.setSizes = function (sizes) {
      this.sizes = sizes;
      return this;
    };
    BMEntry.prototype.getSizes = function () {
      return this.sizes;
    };
    BMEntry.prototype.setAdapterEntry = function (adapterID) {
      /* istanbul ignore else */
      if (!util.isOwnProperty(this.adapters, adapterID)) {
        this.adapters[adapterID] = new AdapterEntry(adapterID);
        util.log(CONSTANTS.MESSAGES.M4 + this.name + " " + adapterID + " " + this.adapters[adapterID].getCallInitiatedTime());
      }
      return this;
    };
    BMEntry.prototype.getLastBidIDForAdapter = function (adapterID) {
      /* istanbul ignore else */
      if (util.isOwnProperty(this.adapters, adapterID)) {
        return this.adapters[adapterID].getLastBidID();
      }
      return "";
    };
    BMEntry.prototype.setAllPossibleBidsReceived = function () {
      this.allPossibleBidsReceived = true;
      return this;
    };
    BMEntry.prototype.hasAllPossibleBidsReceived = function () {
      return this.allPossibleBidsReceived;
    };
    
    /* start-test-block */
    module.exports.BMEntry = BMEntry;
    /* end-test-block */
    
    exports.createBMEntry = function (name) {
      return new BMEntry(name);
    };
    
    /***/ }),
    
    /***/ "./src_new/conf.js":
    /*!*************************!*\
      !*** ./src_new/conf.js ***!
      \*************************/
    /*! no static exports found */
    /***/ (function(module, exports) {
    
    exports.pwt = {
        pid: "61738",
        gcv: "172",
        pdvid: "1",
        pubid: "5890",
        dataURL: "t.pubmatic.com/wl?",
        winURL: "t.pubmatic.com/wt?",
        owv: "parmodule_1",
        pbv: "v4.43.0",
        reduceCodeSize: "1",
        metaDataPattern: 0,
        sendAllBids: "0",
        adserver: "CUSTOM",
        gdpr: "0",
        cmp: 0,
        gdprTimeout: 0,
        awc: 0,
        platform: "display",
        refreshInterval: 0,
        priceGranularity: 0,
        adServerCurrency: 0,
        singleImpression: "1",
        identityEnabled: "0",
        identityConsumers: 0,
        ccpa: "0",
        ccpaCmpApi: 0,
        ccpaTimeout: 0,
        sChain: "0",
        sChainObj: 0,
        auTimeout: "5000",
        t: "5000",
        ssTimeout: 0,
        prebidObjName: 0,
        pubAnalyticsAdapter: "1",
        usePBJSKeys: "0",
        abTestEnabled: "0",
        testGroupSize: 0,
        testType: 0,
        granularityMultiplier: 0,
        floorPriceModuleEnabled: "0",
        floorSource: 0,
        floorAuctionDelay: 0,
        jsonUrl: 0,
        rev_share: 0,
        timeout: 0,
        throttle: 0,
        serverSideEnabled: 0,
        video: 0,
        "in-app": 0,
        autoRefreshAdslots: 0,
        adPodsEnabled: 0,
        videoLengths: 0,
        videoLengthMatching: 0,
        ssoEnabled: "0"
    };
    
    // singleImpression is used to enable feature of sending single impression for multiple size ad slot earlier there were multiple impression for multiple sizes
    
    //below is the config for test purpose only
    exports.testConfigDetails = {
      "testGroupSize": 99
    };
    //below is the config for test purpose only
    exports.test_pwt = {
      "t": 5000
    };
    exports.adapters = {
        pubmatic: {
            publisherId: "5890",
            kgp: "_AU_@_W_x_H_:_AUI_",
            sk: "true",
            rev_share: "0.0",
            timeout: 0,
            throttle: "100",
            pt: 0,
            serverSideEnabled: "0",
            amp: 0,
            video: 0,
            "in-app": 0,
            display: 0
        }
    };
    exports.identityPartners = {
      pubCommonId: {
        name: "pubCommonId",
        "storage.type": "cookie",
        "storage.name": "_myPubCommonId",
        "storage.expires": "1825"
      },
      identityLink: {
        name: "identityLink",
        "params.pid": "23",
        "storage.type": "cookie",
        "params.loadAts": "true",
        // or false// boolean default is false,
        "params.placementID": "23",
        "params.storageType": "localstorage",
        "params.detectionType": "scrapeAndUrl",
        "params.urlParameter": "eparam",
        "params.cssSelectors": ["input[type=text]", "input[type=email]"],
        "params.logging": "info",
        "storage.name": "somenamevalue",
        "storage.expires": "60"
      },
      criteo: {
        name: "criteo"
      },
      unifiedId: {
        name: "unifiedId",
        "params.url": "https://match.adsrvr.org/track/rid?ttd_pid=PubMatic&fmt=json",
        "storage.type": "cookie",
        "storage.name": "_myUnifiedId",
        "storage.expires": "1825"
      }
    };
    
    /// AD UNIT AU1
    // Read Config File and Get Video Config
    // 1. Video Config is available 
    // 2. Check if Defaut Video is Enabled or not
    // 3. Generate Config of slot based on KGP of Default Video it would be _AU_ // AU1
    // 4. Loop on slotConfig for that generated slot config in pt.3
    // 5. DIV1 -> Apply based on condtions (enabled,)
    // 6. DIV5 -> It will increase Latency 
    
    exports.slotConfig = {
        configPattern: "_AU_",
        config: {
            "/43743431/QAVideo": {
                banner: {
                    enabled: !0
                },
                video: {
                  partnerConfig: {
                        pubmatic: {
                            outstreamAU: "renderer_test_pubmatic"
                        }
                    },
                    config: {
                        battr: [6, 7],
                        skipafter: 15,
                        maxduration: 50,
                        context: "outstream",
                        playerSize: [640, 480],
                        skip: 1,
                        connectiontype: [1, 2, 6],
                        skipmin: 10,
                        minduration: 10,
                        mimes: ["video/mp4", "video/x-flv"],
                        plcmt:1
                    },
                    enabled: !0
                }
            }
        }
    };
    
    /***/ }),
    
    /***/ "./src_new/config.js":
    /*!***************************!*\
      !*** ./src_new/config.js ***!
      \***************************/
    /*! no static exports found */
    /***/ (function(module, exports, __webpack_require__) {
    
    var config = __webpack_require__(/*! ./conf.js */ "./src_new/conf.js");
    var CONSTANTS = __webpack_require__(/*! ./constants.js */ "./src_new/constants.js");
    var util = __webpack_require__(/*! ./util.js */ "./src_new/util.js");
    var refThis = null;
    refThis = this;
    refThis[CONSTANTS.COMMON.OWVERSION] = config[CONSTANTS.CONFIG.COMMON][CONSTANTS.COMMON.OWVERSION];
    refThis[CONSTANTS.COMMON.PBVERSION] = config[CONSTANTS.CONFIG.COMMON][CONSTANTS.COMMON.PBVERSION];
    exports.getPublisherId = function () {
      return util.trim(config.pwt.pubid) || "0";
    };
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    exports.getMataDataPattern = function () {
      if (util.isString(config[CONSTANTS.CONFIG.COMMON][CONSTANTS.CONFIG.META_DATA_PATTERN])) {
        return config[CONSTANTS.CONFIG.COMMON][CONSTANTS.CONFIG.META_DATA_PATTERN];
      }
      return null;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    exports.getSendAllBidsStatus = function () {
      return window.parseInt(config[CONSTANTS.CONFIG.COMMON][CONSTANTS.CONFIG.SEND_ALL_BIDS]) || 0;
    };
    exports.getTimeout = function () {
      return window.parseInt(config.pwt.t) || 1000;
    };
    exports.getDisableAjaxTimeout = function () {
      var pwt = config.pwt;
      if (util.isOwnProperty(pwt, CONSTANTS.CONFIG.DISABLE_AJAX_TIMEOUT)) {
        return true == config.pwt.disableAjaxTimeout;
      }
      return true;
    };
    exports.getAdapterRevShare = function (adapterID) {
      var adapterConfig = config.adapters;
      if (util.isOwnProperty(adapterConfig[adapterID], CONSTANTS.CONFIG.REV_SHARE)) {
        return 1 - window.parseFloat(adapterConfig[adapterID][CONSTANTS.CONFIG.REV_SHARE]) / 100;
      }
      return 1;
    };
    exports.getAdapterThrottle = function (adapterID) {
      var adapterConfig = config.adapters;
      if (util.isOwnProperty(adapterConfig[adapterID], CONSTANTS.CONFIG.THROTTLE)) {
        return 100 - window.parseFloat(adapterConfig[adapterID][CONSTANTS.CONFIG.THROTTLE]);
      }
      return 0;
    };
    exports.isServerSideAdapter = function (adapterID) {
      var adapterConfig = config.adapters;
      /* istanbul ignore else */
      if (adapterConfig[adapterID] && util.isOwnProperty(adapterConfig[adapterID], CONSTANTS.CONFIG.SERVER_SIDE_ENABLED)) {
        return window.parseInt(adapterConfig[adapterID][CONSTANTS.CONFIG.SERVER_SIDE_ENABLED]) === 1;
      }
      return false;
    };
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    exports.getAdapterMaskBidsStatus = function (adapterID) {
      var adapterConfig = config.adapters;
      var tempSettings = {
        'audienceNetwork': 1
      };
      if (util.isOwnProperty(tempSettings, adapterID)) {
        return tempSettings[adapterID];
      }
      if (util.isOwnProperty(adapterConfig[adapterID], CONSTANTS.CONFIG.MASK_BIDS)) {
        return window.parseInt(adapterConfig[adapterID][CONSTANTS.CONFIG.MASK_BIDS]) || 0;
      }
      return 0;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // TODO: do we need this feature?
    exports.getBidPassThroughStatus = function (adapterID) {
      var adapterConfig = config.adapters;
      if (util.isOwnProperty(adapterConfig[adapterID], CONSTANTS.CONFIG.BID_PASS_THROUGH)) {
        return window.parseInt(adapterConfig[adapterID][CONSTANTS.CONFIG.BID_PASS_THROUGH]);
      }
      return 0;
    };
    exports.getProfileID = function () {
      return util.trim(config.pwt[CONSTANTS.CONFIG.PROFILE_ID]) || "0";
    };
    exports.getProfileDisplayVersionID = function () {
      return util.trim(config.pwt[CONSTANTS.CONFIG.PROFILE_VERSION_ID]) || "0";
    };
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    exports.getAnalyticsPixelURL = function () {
      return config.pwt[CONSTANTS.CONFIG.LOGGER_URL] || false;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    exports.getMonetizationPixelURL = function () {
      return config.pwt[CONSTANTS.CONFIG.TRACKER_URL] || false;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    exports.forEachAdapter = function (callback) {
      util.forEachOnObject(config.adapters, callback);
    };
    function addPrebidAdapter() {
      var preBidAdapter = CONSTANTS.COMMON.PARENT_ADAPTER_PREBID;
      if (!util.isOwnProperty(config.adapters, preBidAdapter)) {
        var adapterConfig = {};
        adapterConfig[CONSTANTS.CONFIG.REV_SHARE] = "0.0";
        adapterConfig[CONSTANTS.CONFIG.THROTTLE] = "100";
        adapterConfig[CONSTANTS.CONFIG.KEY_GENERATION_PATTERN] = "_DIV_";
        adapterConfig[CONSTANTS.CONFIG.KEY_LOOKUP_MAP] = {};
        config.adapters[preBidAdapter] = adapterConfig;
      }
    }
    exports.getGdpr = function () {
      var gdpr = config[CONSTANTS.CONFIG.COMMON][CONSTANTS.CONFIG.GDPR_CONSENT] || CONSTANTS.CONFIG.DEFAULT_GDPR_CONSENT;
      return gdpr === "1";
    };
    exports.getCmpApi = function () {
      return config[CONSTANTS.CONFIG.COMMON][CONSTANTS.CONFIG.GDPR_CMPAPI] || CONSTANTS.CONFIG.DEFAULT_GDPR_CMPAPI;
    };
    exports.getGdprTimeout = function () {
      var gdprTimeout = config[CONSTANTS.CONFIG.COMMON][CONSTANTS.CONFIG.GDPR_TIMEOUT];
      return gdprTimeout ? window.parseInt(gdprTimeout) : CONSTANTS.CONFIG.DEFAULT_GDPR_TIMEOUT;
    };
    exports.getAwc = function () {
      var awc = config[CONSTANTS.CONFIG.COMMON][CONSTANTS.CONFIG.GDPR_AWC] || CONSTANTS.CONFIG.DEFAULT_GDPR_AWC;
      return awc === "1";
    };
    
    /* start-test-block */
    exports.addPrebidAdapter = addPrebidAdapter;
    /* end-test-block */
    
    exports.initConfig = function () {
      refThis.updateABTestConfig();
      refThis.addPrebidAdapter();
      var ignoreAdapterLevelParams = {};
      util.forEachOnObject(CONSTANTS.CONFIG, function (key, value) {
        ignoreAdapterLevelParams[value] = "";
      });
      util.forEachOnObject(config.adapters, function (adapterID, adapterConfig) {
        var adapterLevelParams = {};
        util.forEachOnObject(adapterConfig, function (key, value) {
          if (!util.isOwnProperty(ignoreAdapterLevelParams, key)) {
            adapterLevelParams[key] = value;
          }
        });
        util.forEachOnObject(adapterConfig[CONSTANTS.CONFIG.KEY_LOOKUP_MAP], function (kgpv, slotLevelParams) {
          util.forEachOnObject(adapterLevelParams, function (key, value) {
            slotLevelParams[key] = value;
          });
        });
        if (adapterID != "pubmatic" && adapterID != "pubmatic2") {
          util.forEachOnObject(adapterConfig[CONSTANTS.CONFIG.REGEX_KEY_LOOKUP_MAP], function (kgpv, slotLevelParams) {
            util.forEachOnObject(adapterLevelParams, function (key, value) {
              if (util.isOwnProperty(slotLevelParams, "rx_config")) {
                slotLevelParams["rx_config"][key] = value;
              }
            });
          });
        }
      });
    };
    
    /* Native Configuration */
    
    exports.getNativeConfiguration = function () {
      return config[CONSTANTS.COMMON.NATIVE_MEDIA_TYPE_CONFIG];
    };
    exports.getAdServerCurrency = function () {
      return config[CONSTANTS.CONFIG.COMMON][CONSTANTS.COMMON.AD_SERVER_CURRENCY];
    };
    exports.isSingleImpressionSettingEnabled = function () {
      return parseInt(config[CONSTANTS.CONFIG.COMMON][CONSTANTS.COMMON.SINGLE_IMPRESSION] || CONSTANTS.CONFIG.DEFAULT_SINGLE_IMPRESSION);
    };
    exports.isUserIdModuleEnabled = function () {
      return parseInt(config[CONSTANTS.CONFIG.COMMON][CONSTANTS.COMMON.ENABLE_USER_ID] || CONSTANTS.CONFIG.DEFAULT_USER_ID_MODULE);
    };
    exports.getIdentityPartners = function () {
      return config[CONSTANTS.COMMON.IDENTITY_PARTNERS];
    };
    exports.isIdentityOnly = function () {
      return parseInt(config[CONSTANTS.CONFIG.COMMON][CONSTANTS.COMMON.IDENTITY_ONLY] || CONSTANTS.CONFIG.DEFAULT_IDENTITY_ONLY);
    };
    exports.getIdentityConsumers = function () {
      return (config[CONSTANTS.CONFIG.COMMON][CONSTANTS.COMMON.IDENTITY_CONSUMERS] || "").toLowerCase();
    };
    exports.getSlotConfiguration = function () {
      return config[CONSTANTS.COMMON.SLOT_CONFIG];
    };
    exports.getAdServer = function () {
      return config[CONSTANTS.COMMON.ADSERVER];
    };
    exports.getCCPA = function () {
      var ccpa = config[CONSTANTS.CONFIG.COMMON][CONSTANTS.CONFIG.CCPA_CONSENT] || CONSTANTS.CONFIG.DEFAULT_CCPA_CONSENT;
      return ccpa === "1";
    };
    exports.getCCPACmpApi = function () {
      return config[CONSTANTS.CONFIG.COMMON][CONSTANTS.CONFIG.CCPA_CMPAPI] || CONSTANTS.CONFIG.DEFAULT_CCPA_CMPAPI;
    };
    exports.getCCPATimeout = function () {
      var ccpaTimeout = config[CONSTANTS.CONFIG.COMMON][CONSTANTS.CONFIG.CCPA_TIMEOUT];
      return ccpaTimeout ? window.parseInt(ccpaTimeout) : CONSTANTS.CONFIG.DEFAULT_CCPA_TIMEOUT;
    };
    exports.getSchainObject = function () {
      return config[CONSTANTS.CONFIG.COMMON][CONSTANTS.COMMON.SCHAINOBJECT] || {};
    };
    exports.isSchainEnabled = function () {
      return window.parseInt(config[CONSTANTS.CONFIG.COMMON][CONSTANTS.COMMON.SCHAIN]) || 0;
    };
    exports.isFloorPriceModuleEnabled = function () {
      return window.parseInt(config[CONSTANTS.CONFIG.COMMON][CONSTANTS.CONFIG.FLOOR_PRICE_MODULE_ENABLED]) === 1;
    };
    exports.getFloorSource = function () {
      return config[CONSTANTS.CONFIG.COMMON][CONSTANTS.CONFIG.FLOOR_SOURCE];
    };
    exports.getFloorJsonUrl = function () {
      return config[CONSTANTS.CONFIG.COMMON][CONSTANTS.CONFIG.FLOOR_JSON_URL];
    };
    
    // It will return the auctionDelay specified in conf.js or else default is 100
    exports.getFloorAuctionDelay = function () {
      var auctionDelay = config[CONSTANTS.CONFIG.COMMON][CONSTANTS.CONFIG.FLOOR_AUCTION_DELAY];
      return auctionDelay ? window.parseInt(auctionDelay) : CONSTANTS.CONFIG.DEFAULT_FLOOR_AUCTION_DELAY;
    };
    
    // It will return the floorType specified in conf.js or else default is true
    exports.getFloorType = function () {
      return config[CONSTANTS.CONFIG.COMMON][CONSTANTS.CONFIG.FLOOR_ENFORCE_JS] && config[CONSTANTS.CONFIG.COMMON][CONSTANTS.CONFIG.FLOOR_ENFORCE_JS].toLowerCase() === CONSTANTS.COMMON.HARD_FLOOR ? true : false;
    };
    exports.isPrebidPubMaticAnalyticsEnabled = function () {
      // note: not using window.parseInt as this function is also used in build.sh that runs in NodeJS environment
      return parseInt(config[CONSTANTS.CONFIG.COMMON][CONSTANTS.CONFIG.ENABLE_PB_PM_ANALYTICS]) === 1;
    };
    exports.isUsePrebidKeysEnabled = function () {
      // note: not using window.parseInt as this function is also used in build.sh that runs in NodeJS environment
      return parseInt(config[CONSTANTS.CONFIG.COMMON][CONSTANTS.CONFIG.USE_PREBID_KEYS]) === 1;
    };
    exports.PBJS_NAMESPACE = config[CONSTANTS.CONFIG.COMMON][CONSTANTS.COMMON.PBJS_NAMESPACE] || "pbjs";
    
    exports.getPriceGranularity = function () {
      return config[CONSTANTS.CONFIG.COMMON][CONSTANTS.COMMON.PRICE_GRANULARITY] || null;
    };
    exports.getGranularityMultiplier = function () {
      return parseFloat(config[CONSTANTS.CONFIG.COMMON][CONSTANTS.COMMON.GRANULARITY_MULTIPLIER]) || 1;
    };
    exports.isAbTestEnabled = function () {
      return parseInt(config[CONSTANTS.CONFIG.COMMON][CONSTANTS.CONFIG.AB_TEST_ENABLED]) === 1;
    };
    exports.getTestPWTConfig = function () {
      return config[CONSTANTS.COMMON.TEST_PWT] || {};
    };
    exports.getTestGroupDetails = function () {
      return config[CONSTANTS.COMMON.TEST_GROUP_DETAILS] || {};
    };
    exports.getTestPartnerConfig = function () {
      return config[CONSTANTS.COMMON.TEST_PARTNER] || {};
    };
    exports.getTestIdentityPartners = function () {
      return config[CONSTANTS.COMMON.TEST_IDENTITY_PARTNER] || {};
    };
    exports.updateABTestConfig = function () {
      if (refThis.isAbTestEnabled()) {
        var randomNumberBelow100 = util.getRandomNumberBelow100();
        var testGroupDetails = refThis.getTestGroupDetails();
        // if Random number is smaller than the test group size then test config will be applied 
        if (testGroupDetails && testGroupDetails.testGroupSize && randomNumberBelow100 < testGroupDetails.testGroupSize) {
          refThis.updatePWTConfig();
          config.adapters = refThis.updatePartnerConfig(refThis.getTestPartnerConfig(), config.adapters);
          if (refThis.getTestIdentityPartners() && refThis.getIdentityPartners()) {
            if (Object.keys(refThis.getTestIdentityPartners()).length > 0 && Object.keys(refThis.getIdentityPartners()).length == 0) {
              util.log(CONSTANTS.MESSAGES.M31, JSON.stringify(refThis.getTestIdentityPartners()));
              config.identityPartners = refThis.getTestIdentityPartners();
            } else if (Object.keys(refThis.getTestIdentityPartners()).length == 0 && Object.keys(refThis.getIdentityPartners()).length > 0) {
              util.log(CONSTANTS.MESSAGES.M31, JSON.stringify({}));
              config.identityPartners = {};
            } else {
              config.identityPartners = refThis.updatePartnerConfig(refThis.getTestIdentityPartners(), refThis.getIdentityPartners());
            }
          }
          window.PWT.testGroupId = 1;
        }
      }
    };
    exports.updatePWTConfig = function () {
      var testConfig = refThis.getTestPWTConfig();
      if (testConfig && Object.keys(testConfig).length > 0) {
        util.log(CONSTANTS.MESSAGES.M30, JSON.stringify(testConfig));
        for (var key in testConfig) {
          if (config[CONSTANTS.CONFIG.COMMON][key]) {
            config[CONSTANTS.CONFIG.COMMON][key] = testConfig[key];
          }
        }
        //TODO: Uncomment Below code after updating phatomjs or using chrome headless 
        // Object.assign(config[CONSTANTS.CONFIG.COMMON], testConfig);
      }
    };
    
    exports.updatePartnerConfig = function (testConfig, controlConfig) {
      if (testConfig && controlConfig && Object.keys(testConfig).length > 0 && Object.keys(controlConfig).length > 0) {
        util.log(CONSTANTS.MESSAGES.M31, JSON.stringify(testConfig));
        for (var key in testConfig) {
          if (util.isOwnProperty(testConfig, key) && util.isObject(testConfig[key])) {
            if (Object.keys(testConfig[key]).length == 0 && controlConfig[key] && Object.keys(controlConfig[key]).length > 0) {
              testConfig[key] = controlConfig[key];
            } else if (Object.keys(testConfig[key]).length > 0 && controlConfig[key] && Object.keys(controlConfig[key]).length > 0) {
              testConfig[key] = refThis.getMergedConfig(testConfig[key], controlConfig[key]);
            }
          }
        }
        window.PWT.testGroupId = 1;
        return testConfig;
      } else {
        // since only one test type can be enabled other type of test config will be empty if other test config is enabled and hence return control config
        return controlConfig;
      }
    };
    exports.getTestGroupDetails = function () {
      return config[CONSTANTS.COMMON.TEST_GROUP_DETAILS] || {};
    };
    // This will keep toObject config as is and only merge objects common in both from and toobject 
    exports.getMergedConfig = function (toObject, fromObject) {
      for (var key in fromObject) {
        if (!Object.prototype.hasOwnProperty.call(toObject, key)) {
          if (util.isObject(fromObject[key]) || util.isArray(fromObject[key])) {
            toObject[key] = JSON.parse(JSON.stringify(fromObject[key]));
          } else {
            toObject[key] = fromObject[key];
          }
        }
      }
      return toObject;
    };
    exports.forEachBidderAlias = function (callback) {
      util.forEachOnObject(config.alias, callback);
    };
    exports.getAdapterNameForAlias = function (aliasName) {
      if (config.alias && config.alias[aliasName]) {
        return config.alias[aliasName];
      }
      return aliasName;
    };
    exports.isSSOEnabled = function () {
      return parseInt(config[CONSTANTS.CONFIG.COMMON][CONSTANTS.CONFIG.SSO_ENABLED]) === 1;
    };
    exports.getServerEnabledAdaptars = function () {
      var s2sBidders = Object.keys(config.adapters).filter(function (adapter) {
        if (config.adapters[adapter]["serverSideEnabled"] == "1") {
          return adapter;
        }
      });
      return s2sBidders;
    };
    exports.getTimeoutForPBSRequest = function () {
      var ssTimeOut = parseInt(config.pwt.ssTimeout);
      var maxTimeout = CONSTANTS.TIMEOUT_CONFIG.MaxTimeout;
      var minTimeout = CONSTANTS.TIMEOUT_CONFIG.MinTimeout;
      if (ssTimeOut >= minTimeout && ssTimeOut <= maxTimeout) {
        return ssTimeOut;
      } else if (ssTimeOut >= minTimeout) {
        return maxTimeout;
      }
      return minTimeout;
    };
    exports.getPubMaticAndAlias = function (s2sBidders) {
      var pubMaticaliases = s2sBidders.filter(function (adapter) {
        if (config.alias && config.alias[adapter] && config.alias[adapter].includes("pubmatic") || adapter.includes("pubmatic")) {
          return adapter;
        }
      });
      return pubMaticaliases;
    };
    exports.usePBSAdapter = function () {
      if (config.pwt.usePBSAdapter == "1") {
        return true;
      }
      return false;
    };
    exports.createMacros = function () {
      return {
        "[PLATFORM]": util.getDevicePlatform().toString(),
        "[PROFILE_ID]": refThis.getProfileID().toString(),
        "[PROFILE_VERSION]": refThis.getProfileDisplayVersionID().toString()
      };
    };
    exports.getMarketplaceBidders = function () {
      return config.pwt.marketplaceBidders ? config.pwt.marketplaceBidders.split(',') : false;
    };
    
    /***/ }),
    
    /***/ "./src_new/constants.js":
    /*!******************************!*\
      !*** ./src_new/constants.js ***!
      \******************************/
    /*! no static exports found */
    /***/ (function(module, exports) {
    
    //todo:
    // remove unnecessary constants
    
    exports.COMMON = {
      "BID_PRECISION": 2,
      "DEAL_KEY_FIRST_PART": "pwtdeal_",
      "DEAL_KEY_VALUE_SEPARATOR": "_-_",
      "PREBID_PREFIX": "PB_",
      "CONFIG": "config",
      "DIV_ID": "divID",
      "PARAMS": "params",
      "SIZES": "sizes",
      "HEIGHT": "height",
      "WIDTH": "width",
      "SLOTS": "slots",
      "KEY_GENERATION_PATTERN_VALUE": "kgpv",
      "KEY_VALUE_PAIRS": "kvp",
      "IMPRESSION_ID": "iid",
      "PARENT_ADAPTER_PREBID": "prebid",
      "ANALYTICS_CURRENCY": "USD",
      "NATIVE_MEDIA_TYPE_CONFIG": "nativeConfig",
      "NATIVE_ONLY": "nativeOnly",
      "OW_CLICK_NATIVE": "openwrap-native-click",
      "BID_ID": "owbidid",
      "AD_SERVER_CURRENCY": "adServerCurrency",
      "SINGLE_IMPRESSION": "singleImpression",
      "PREBID_NAMESPACE": "owpbjs",
      "IH_NAMESPACE": "ihowpbjs",
      "ENABLE_USER_ID": "identityEnabled",
      "IDENTITY_PARTNERS": "identityPartners",
      "IDENTITY_CONSUMERS": "identityConsumers",
      "IDENTITY_ONLY": "identityOnly",
      "PREBID": "prebid",
      "PROTOCOL": "https://",
      "SLOT_CONFIG": "slotConfig",
      "DEFAULT": "default",
      "MCONF_REGEX": "regex",
      "ADSERVER": "adserver",
      "OWVERSION": "owv",
      "PBVERSION": "pbv",
      "SCHAINOBJECT": "sChainObj",
      "SCHAIN": "sChain",
      "PBJS_NAMESPACE": "prebidObjName",
      "TEST_GROUP_DETAILS": "testConfigDetails",
      "TEST_PWT": "test_pwt",
      "PRICE_GRANULARITY": "priceGranularity",
      "GRANULARITY_MULTIPLIER": "granularityMultiplier",
      "TEST_PARTNER": "test_adapters",
      "REDUCE_CODE_SIZE": "reduceCodeSize",
      "TEST_IDENTITY_PARTNER": "test_identityPartners",
      "IH_ANALYTICS_ADAPTER_EXPIRY": "ihAnalyticsAdapterExpiry",
      "IH_ANALYTICS_ADAPTER_DEFAULT_EXPIRY": 7,
      "EXTERNAL_FLOOR_WO_CONFIG": "External Floor w/o Config",
      "HARD_FLOOR": "hard"
    };
    exports.CONFIG = {
      "GLOBAL": "global",
      "ADAPTERS": "adapters",
      "COMMON": "pwt",
      "TIMEOUT": "t",
      "KEY_GENERATION_PATTERN": "kgp",
      "REGEX_KEY_GENERATION_PATTERN": "kgp_rx",
      "REGEX_KEY_LOOKUP_MAP": "klm_rx",
      "KEY_LOOKUP_MAP": "klm",
      "SERVER_SIDE_KEY": "sk",
      "PUBLISHER_ID": "pubid",
      "PROFILE_ID": "pid",
      "PROFILE_VERSION_ID": "pdvid",
      "LOGGER_URL": "dataURL",
      "TRACKER_URL": "winURL",
      "REV_SHARE": "rev_share",
      "THROTTLE": "throttle",
      "BID_PASS_THROUGH": "pt",
      "GLOBAL_KEY_VALUE": "gkv",
      "MASK_BIDS": "maksBids",
      "META_DATA_PATTERN": "metaDataPattern",
      "SEND_ALL_BIDS": "sendAllBids",
      "SERVER_SIDE_ENABLED": "serverSideEnabled",
      "GDPR_CONSENT": "gdpr",
      "CONSENT_STRING": "cns",
      "GDPR_CMPAPI": "cmpApi",
      "GDPR_TIMEOUT": "gdprTimeout",
      "GDPR_AWC": "awc",
      "DEFAULT_GDPR_CMPAPI": "iab",
      "DEFAULT_GDPR_TIMEOUT": 10000,
      "DEFAULT_GDPR_AWC": "0",
      "DEFAULT_SINGLE_IMPRESSION": "0",
      "DEFAULT_USER_ID_MODULE": "0",
      "DEFAULT_IDENTITY_ONLY": "0",
      "DEFAULT_GDPR_CONSENT": "0",
      "DISABLE_AJAX_TIMEOUT": "disableAjaxTimeout",
      "CCPA_CONSENT": "ccpa",
      "CCPA_CMPAPI": "ccpaCmpApi",
      "CCPA_TIMEOUT": "ccpaTimeout",
      "DEFAULT_CCPA_CMPAPI": "iab",
      "DEFAULT_CCPA_TIMEOUT": 10000,
      "CACHE_PATH": "/cache",
      "CACHE_URL": "https://ow.pubmatic.com",
      "VIDEO_PARAM": "video",
      "ENABLE_PB_PM_ANALYTICS": "pubAnalyticsAdapter",
      "FLOOR_PRICE_MODULE_ENABLED": "floorPriceModuleEnabled",
      "FLOOR_AUCTION_DELAY": "floorAuctionDelay",
      "DEFAULT_FLOOR_AUCTION_DELAY": 100,
      "FLOOR_JSON_URL": "jsonUrl",
      "FLOOR_ENFORCE_JS": "floorType",
      "DEFAULT_FLOOR_ENFORCE_JS": true,
      "USE_PREBID_KEYS": "usePBJSKeys",
      "AB_TEST_ENABLED": "abTestEnabled",
      "TIMEOUT_ADJUSTMENT": 50,
      "SSO_ENABLED": "ssoEnabled",
      "FLOOR_SOURCE": "floorSource"
    };
    exports.METADATA_MACROS = {
      "WIDTH": "_W_",
      "HEIGHT": "_H_",
      "PARTNER": "_P_",
      "GROSS_ECPM": "_GE_",
      "NET_ECPM": "_NE_",
      "BID_COUNT": "_BC_",
      "PARTNER_COUNT": "_PC_"
    };
    exports.MACROS = {
      "WIDTH": "_W_",
      "HEIGHT": "_H_",
      "AD_UNIT_ID": "_AU_",
      "AD_UNIT_INDEX": "_AUI_",
      "INTEGER": "_I_",
      "DIV": "_DIV_"
    };
    exports.SLOT_STATUS = {
      "CREATED": 0,
      "PARTNERS_CALLED": 1,
      "TARGETING_ADDED": 2,
      "DISPLAYED": 3
    };
    exports.WRAPPER_TARGETING_KEYS = {
      "BID_ID": "pwtsid",
      "BID_STATUS": "pwtbst",
      "BID_ECPM": "pwtecp",
      "BID_DEAL_ID": "pwtdid",
      "BID_ADAPTER_ID": "pwtpid",
      "BID_SIZE": "pwtsz",
      "PUBLISHER_ID": "pwtpubid",
      "PROFILE_ID": "pwtprofid",
      "PROFILE_VERSION_ID": "pwtverid",
      "META_DATA": "pwtm",
      "PLATFORM_KEY": "pwtplt",
      "USER_IDS": "pwtuid",
      "CACHE_ID": "pwtcid",
      "CACHE_URL": "pwtcurl",
      "CACHE_PATH": "pwtcpath"
    };
    exports.IGNORE_PREBID_KEYS = {
      "hb_bidder": 1,
      "hb_adid": 1,
      "hb_pb": 1,
      "hb_size": 1,
      "hb_deal": 1,
      "hb_uuid": 1,
      "hb_cache_host": 1,
      "hb_cache_id": 1,
      "hb_adomain": 1
    };
    
    //todo: mention all params here and use accordigly
    exports.LOGGER_PIXEL_PARAMS = {
      "TIMESTAMP": "tst",
      "PAGE_URL": "purl",
      "PAGE_DOMAIN": "orig",
      "TIMEOUT": "to"
    };
    exports.MESSAGES = {
      "M1": ": In fetchbids.",
      "M2": ": Throttled.",
      "M3": ": adapter must implement the fetchBids() function.",
      "M4": "BidManager: entry ",
      "M5": ": Callback.",
      "M6": "bidAlreadExists : ",
      "M7": ": Exiting from fetchBids.",
      "M8": ". Config not found, ignored.",
      // "M9": ". Config ignored.",
      "M10": "Bid is rejected as ecpm is NULL.",
      "M11": "Bid is rejected as ecpm is NaN: ",
      "M12": "Existing bid ecpm: ",
      "M13": ", is lower than new bid ecpm ",
      "M14": ", so we are replacing bid from partner ",
      "M15": ", is greater than new bid ecpm ",
      "M16": ", so we are not replacing bid from partner ",
      "M17": "Post timeout bid, ignored.",
      "M18": "Bid is selected for partner ",
      "M19": ": Found winning adapterID: ",
      "M20": "Bid is rejected as ecpm is empty string.",
      "M21": ": error in respose handler.",
      "M22": "Bid is rejected as ecpm is <= 0.",
      "M23": "Existing bid is default-bid with zero ecpm, thus replacing it with the new bid from partner ",
      "M24": "Passsed argument is not a bidAdaptor",
      "M25": "Bid details not found for bidID: ",
      "M26": "Currency Module is Activated. Ad Server Currency is: ",
      "M27": "Invalid regex pattern ",
      "M28": "Unable to match regex pattern as kgpv length is not 3",
      "M29": "Unable to parse Partner configuration",
      "M30": "AB Test Enabled With Config",
      "M31": "AB Test Enabled With Partner Config",
      "M32": "Invalid MediaConfig regex pattern : ",
      IDENTITY: {
        M1: "Unable to get User Id from OpenIdentity",
        M2: "Setting UserIds to EB ",
        M3: "Unable to parse User ID configuration",
        M4: "User Id Configuration Sent to prebid ",
        M5: "Identity only enabled, no need to process. Calling Original function ",
        M6: " function is not available. Make sure userId module is included."
      }
    };
    exports.PLATFORM_VALUES = {
      "DISPLAY": "display",
      "NATIVE": "native",
      "VIDEO": "video"
    };
    exports.FORMAT_VALUES = {
      "BANNER": "banner",
      "VIDEO": "video",
      "NATIVE": "native",
      "OTHER": "other"
    };
    exports.HOOKS = {
      "PREBID_SET_CONFIG": "HookForPrebidSetConfig",
      "PREBID_REQUEST_BIDS": "HookForPrebidRequestBids",
      "BID_RECEIVED": "HookForBidReceived",
      "POST_AUCTION_KEY_VALUES": "HookForPostAuctionKeyValues"
    };
    exports.SRA_ENABLED_BIDDERS = {
      "rubicon": 1,
      "improvedigital": 2
    };
    exports.EXCLUDE_IDENTITY_PARAMS = ["rev_share", "timeout", "throttle"];
    exports.TOLOWERCASE_IDENTITY_PARAMS = ["storage.type"];
    exports.JSON_VALUE_KEYS = ["params.clientIdentifier"];
    exports.AD_SERVER = {
      "DFP": "DFP",
      "CUSTOM": "CUSTOM"
    };
    exports.SPECIAL_CASE_ID_PARTNERS = {
      "intentIqId": {
        "params.partner": "number"
      },
      "sharedId": {
        "params.syncTime": "number"
      },
      "id5Id": {
        "params.partner": "number"
      },
      "parrableId": {
        "params.timezoneFilter.allowedZones": "array"
      },
      "imuid": {
        "params.cid": "number"
      },
      "identityLink": {
        "storage.refreshInSeconds": "number"
      },
      "merkleId": {
        "params.ssp_ids": "array"
      },
      "liveIntentId": {
        "params.requestedAttributesOverrides": "customObject"
      }
    }; //list of ID partners for whom special handling of datatype is required
    
    exports.ID_PARTNERS_CUSTOM_VALUES = {
      "id5Id": [{
        "key": "params.provider",
        "value": "pubmatic-identity-hub"
      }],
      "identityLink": [{
        "key": "storage.refreshInSeconds",
        "value": "1800"
      }]
    };
    exports.EXCLUDE_PARTNER_LIST = ['pubProvidedId'];
    exports.MEDIATYPE = {
      BANNER: 0,
      VIDEO: 1,
      NATIVE: 2
    };
    exports.BID_STATUS = {
      BID_REJECTED: "bidRejected"
    };
    // Add list of PubMatic aliases here.
    exports.PUBMATIC_ALIASES = ["pubmatic2"];
    exports.PBSPARAMS = {
      adapter: "prebidServer",
      endpoint: "https://ow.pubmatic.com/pbs/openrtb2/auction",
      syncEndpoint: "https://ow.pubmatic.com/cookie_sync/?sec=1"
    };
    exports.TIMEOUT_CONFIG = {
      MaxTimeout: 500,
      MinTimeout: 200
    };
    exports.DEFAULT_ALIASES = {
      adg: "adgeneration",
      districtm: "appnexus",
      districtmDMX: "dmx",
      pubmatic2: "pubmatic"
    };
    exports.YAHOOSSP = "yahoossp";
    exports.REGEX_BROWSERS = [/\b(?:crmo|crios)\/([\w\.]+)/i, /edg(?:e|ios|a)?\/([\w\.]+)/i, /(opera mini)\/([-\w\.]+)/i, /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i, /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i, /opios[\/ ]+([\w\.]+)/i, /\bopr\/([\w\.]+)/i, /(kindle)\/([\w\.]+)/i, /(lunascape)[\/ ]?([\w\.]*)/i, /(maxthon)[\/ ]?([\w\.]*)/i, /(netfront)[\/ ]?([\w\.]*)/i, /(jasmine)[\/ ]?([\w\.]*)/i, /(blazer)[\/ ]?([\w\.]*)/i, /(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i, /(ba?idubrowser)[\/ ]?([\w\.]+)/i, /(?:ms|\()(ie) ([\w\.]+)/i, /(flock)\/([-\w\.]+)/i, /(rockmelt)\/([-\w\.]+)/i, /(midori)\/([-\w\.]+)/i, /(epiphany)\/([-\w\.]+)/i, /(silk)\/([-\w\.]+)/i, /(skyfire)\/([-\w\.]+)/i, /(ovibrowser)\/([-\w\.]+)/i, /(bolt)\/([-\w\.]+)/i, /(iron)\/([-\w\.]+)/i, /(vivaldi)\/([-\w\.]+)/i, /(iridium)\/([-\w\.]+)/i, /(phantomjs)\/([-\w\.]+)/i, /(bowser)\/([-\w\.]+)/i, /(quark)\/([-\w\.]+)/i, /(qupzilla)\/([-\w\.]+)/i, /(falkon)\/([-\w\.]+)/i, /(rekonq)\/([-\w\.]+)/i, /(puffin)\/([-\w\.]+)/i, /(brave)\/([-\w\.]+)/i, /(whale)\/([-\w\.]+)/i, /(qqbrowserlite)\/([-\w\.]+)/i, /(qq)\/([-\w\.]+)/i, /(duckduckgo)\/([-\w\.]+)/i, /(weibo)__([\d\.]+)/i, /(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i, /microm.+\bqbcore\/([\w\.]+)/i, /\bqbcore\/([\w\.]+).+microm/i, /micromessenger\/([\w\.]+)/i, /konqueror\/([\w\.]+)/i, /trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i, /yabrowser\/([\w\.]+)/i, /(avast|avg)\/([\w\.]+)/i, /\bfocus\/([\w\.]+)/i, /\bopt\/([\w\.]+)/i, /coc_coc\w+\/([\w\.]+)/i, /dolfin\/([\w\.]+)/i, /coast\/([\w\.]+)/i, /miuibrowser\/([\w\.]+)/i, /fxios\/([-\w\.]+)/i, /\bqihu|(qi?ho?o?|360)browser/i, /(oculus)browser\/([\w\.]+)/i, /(samsung)browser\/([\w\.]+)/i, /(sailfish)browser\/([\w\.]+)/i, /(huawei)browser\/([\w\.]+)/i, /(comodo_dragon)\/([\w\.]+)/i, /(electron)\/([\w\.]+) safari/i, /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i, /m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i, /(metasr)[\/ ]?([\w\.]+)/i, /(lbbrowser)/i, /\[(linkedin)app\]/i, /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i, /safari (line)\/([\w\.]+)/i, /\b(line)\/([\w\.]+)\/iab/i, /(chromium|instagram)[\/ ]([-\w\.]+)/i, /\bgsa\/([\w\.]+) .*safari\//i, /headlesschrome(?:\/([\w\.]+)| )/i, / wv\).+(chrome)\/([\w\.]+)/i, /droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i, /(chrome|chromium|crios)\/v?([\w\.]+)/i, /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i, /version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i, /version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i, /webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i, /(navigator|netscape\d?)\/([-\w\.]+)/i, /mobile vr; rv:([\w\.]+)\).+firefox/i, /ekiohf.+(flow)\/([\w\.]+)/i, /(swiftfox)/i, /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i, /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i, /(firefox)\/([\w\.]+)/i, /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i, /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i, /(links) \(([\w\.]+)/i];
    exports.BROWSER_MAPPING = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90];
    
    /***/ }),
    
    /***/ "./src_new/controllers/custom.js":
    /*!***************************************!*\
      !*** ./src_new/controllers/custom.js ***!
      \***************************************/
    /*! no static exports found */
    /***/ (function(module, exports, __webpack_require__) {
    
    var CONFIG = __webpack_require__(/*! ../config.js */ "./src_new/config.js");
    var CONSTANTS = __webpack_require__(/*! ../constants.js */ "./src_new/constants.js");
    var util = __webpack_require__(/*! ../util.js */ "./src_new/util.js");
    var bidManager = __webpack_require__(/*! ../bidManager.js */ "./src_new/bidManager.js");
    // var GDPR = require("../gdpr.js");
    var SLOT = __webpack_require__(/*! ../slot.js */ "./src_new/slot.js");
    var prebid = __webpack_require__(/*! ../adapters/prebid.js */ "./src_new/adapters/prebid.js");
    var isPrebidPubMaticAnalyticsEnabled = CONFIG.isPrebidPubMaticAnalyticsEnabled();
    var usePrebidKeys = CONFIG.isUsePrebidKeysEnabled();
    
    //ToDo: add a functionality / API to remove extra added wrpper keys
    var wrapperTargetingKeys = {}; // key is div id
    /* start-test-block */
    exports.wrapperTargetingKeys = wrapperTargetingKeys;
    /* end-test-block */
    
    //ToDo: is this required in first phase?
    var slotSizeMapping = {}; // key is div id
    /* start-test-block */
    exports.slotSizeMapping = slotSizeMapping;
    /* end-test-block */
    
    var windowReference = null;
    var refThis = this;
    function setWindowReference(win) {
      if (util.isObject(win)) {
        windowReference = win;
      }
    }
    /* start-test-block */
    exports.setWindowReference = setWindowReference;
    /* end-test-block */
    
    function getWindowReference() {
      return windowReference;
    }
    /* start-test-block */
    exports.getWindowReference = getWindowReference;
    /* end-test-block */
    
    function getAdUnitIndex(currentGoogleSlot) {
      // TDD, i/o : done
      var index = 0;
      try {
        var adUnitIndexString = currentGoogleSlot.getSlotId().getId().split("_");
        index = parseInt(adUnitIndexString[adUnitIndexString.length - 1]);
      } catch (ex) {} // eslint-disable-line no-empty
      return index;
    }
    /* start-test-block */
    exports.getAdUnitIndex = getAdUnitIndex;
    /* end-test-block */
    
    // ToDo: this function may not be needed
    function defineWrapperTargetingKey(key) {
      /* istanbul ignore else */
      if (!util.isObject(refThis.wrapperTargetingKeys)) {
        refThis.wrapperTargetingKeys = {};
      }
      refThis.wrapperTargetingKeys[key] = "";
    }
    
    /* start-test-block */
    exports.defineWrapperTargetingKey = defineWrapperTargetingKey;
    /* end-test-block */
    
    function defineWrapperTargetingKeys(object) {
      var output = {};
      util.forEachOnObject(object, function (key, value) {
        output[value] = "";
      });
      return output;
    }
    /* start-test-block */
    exports.defineWrapperTargetingKeys = defineWrapperTargetingKeys;
    /* end-test-block */
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    function initSafeFrameListener(theWindow) {
      if (!theWindow.PWT.safeFrameMessageListenerAdded) {
        util.addMessageEventListenerForSafeFrame(theWindow);
        theWindow.PWT.safeFrameMessageListenerAdded = true;
      }
    }
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    /* start-test-block */
    exports.initSafeFrameListener = initSafeFrameListener;
    /* end-test-block */
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    function validateAdUnitObject(anAdUnitObject) {
      if (!util.isObject(anAdUnitObject)) {
        util.logError("An AdUnitObject should be an object", anAdUnitObject);
        return false;
      }
      if (!util.isString(anAdUnitObject.code)) {
        util.logError("An AdUnitObject should have a property named code and it should be a string", anAdUnitObject);
        return false;
      }
      if (!util.isString(anAdUnitObject.divId)) {
        util.logError("An AdUnitObject should have a property named divId and it should be a string", anAdUnitObject);
        return false;
      }
      if (!util.isString(anAdUnitObject.adUnitId)) {
        util.logError("An AdUnitObject should have a property named adUnitId and it should be a string", anAdUnitObject);
        return false;
      }
      if (!util.isString(anAdUnitObject.adUnitIndex)) {
        util.logError("An AdUnitObject should have a property named adUnitIndex and it should be a string", anAdUnitObject);
        return false;
      }
      if (!util.isObject(anAdUnitObject.mediaTypes)) {
        util.logError("An AdUnitObject should have a property named mediaTypes and it should be an object", anAdUnitObject);
        return false;
      }
      if (!util.isObject(anAdUnitObject.mediaTypes.banner) && !util.isObject(anAdUnitObject.mediaTypes.native) && !util.isObject(anAdUnitObject.mediaTypes.video)) {
        util.logError("An anAdUnitObject.mediaTypes should atleast have a property named banner or native or video and it should be an object", anAdUnitObject);
        return false;
      }
      if (util.isObject(anAdUnitObject.mediaTypes.banner) && !util.isArray(anAdUnitObject.mediaTypes.banner.sizes)) {
        util.logError("An anAdUnitObject.mediaTypes.banner should have a property named sizes and it should be an array", anAdUnitObject);
        return false;
      }
      return true;
    }
    /* start-test-block */
    exports.validateAdUnitObject = validateAdUnitObject;
    /* end-test-block */
    
    function getAdSlotSizesArray(anAdUnitObject) {
      //ToDo: need to habdle fluid sizes
      // ToDo: for now supporting only banner sizes, need to support native as well
      if (anAdUnitObject && anAdUnitObject.mediaTypes) {
        if (anAdUnitObject.mediaTypes.banner && util.isArray(anAdUnitObject.mediaTypes.banner.sizes)) {
          return anAdUnitObject.mediaTypes.banner.sizes;
        }
        //TODO : Confirm about the below configuration and correct if needed
        // Commenting below code to remove custom handling of sizes and will be handled using adSlot.sizes
        // Uncommenting and making behaviour same as to have player size or w and h as mandatory.
        if (anAdUnitObject.mediaTypes.video) {
          if (!util.isArray(anAdUnitObject.mediaTypes.video.playerSize) && !(anAdUnitObject.mediaTypes.video.w && anAdUnitObject.mediaTypes.video.h)) {
            util.logError("For slot video playersize or w,h is not defined and may not request bids from SSP for this slot. " + JSON.stringify(anAdUnitObject));
            return [];
          }
        }
        if (anAdUnitObject.mediaTypes.native || anAdUnitObject.mediaTypes.video) {
          return anAdUnitObject.sizes;
        }
        //TODO : Also handle native only configuration
      }
    
      return [];
    }
    /* start-test-block */
    exports.getAdSlotSizesArray = getAdSlotSizesArray;
    /* end-test-block */
    
    function findWinningBidAndGenerateTargeting(divId) {
      var data;
      if (isPrebidPubMaticAnalyticsEnabled === true) {
        data = prebid.getBid(divId);
        //todo: we might need to change some proprty names in wb (from PBJS)
      } else {
        // removeIf(removeLegacyAnalyticsRelatedCode)
        data = bidManager.getBid(divId);
        // endRemoveIf(removeLegacyAnalyticsRelatedCode)
      }
    
      var winningBid = data.wb || null;
      var keyValuePairs = data.kvp || null;
      var ignoreTheseKeys = !usePrebidKeys ? CONSTANTS.IGNORE_PREBID_KEYS : {};
    
      // removeIf(removeLegacyAnalyticsRelatedCode)
      /* istanbul ignore else*/
      if (isPrebidPubMaticAnalyticsEnabled === false && winningBid && winningBid.getNetEcpm() > 0) {
        bidManager.setStandardKeys(winningBid, keyValuePairs);
      }
      // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
      // attaching keyValuePairs from adapters
      util.forEachOnObject(keyValuePairs, function (key) {
        // if winning bid is not pubmatic then remove buyId targeting key. Ref : UOE-5277
        /* istanbul ignore else*/
        if (util.isOwnProperty(ignoreTheseKeys, key) || util.isOwnProperty({
          "pwtpb": 1
        }, key) || winningBid && winningBid.adapterID !== "pubmatic" && util.isOwnProperty({
          "hb_buyid_pubmatic": 1,
          "pwtbuyid_pubmatic": 1
        }, key)) {
          delete keyValuePairs[key];
        } else {
          refThis.defineWrapperTargetingKey(key);
        }
      });
      var wb = null;
      if (winningBid) {
        wb = {};
        wb.adHtml = winningBid.adHtml;
        wb.adapterID = winningBid.adapterID;
        wb.grossEcpm = winningBid.grossEcpm;
        wb.netEcpm = winningBid.netEcpm;
        wb.height = winningBid.height;
        wb.width = winningBid.width;
      }
      return {
        wb: wb,
        kvp: keyValuePairs
      };
    }
    
    /* start-test-block */
    exports.findWinningBidAndGenerateTargeting = findWinningBidAndGenerateTargeting;
    /* end-test-block */
    
    function origCustomServerExposedAPI(arrayOfAdUnits, callbackFunction) {
      //GDPR.getUserConsentDataFromCMP(); // Commenting this as GDPR will be handled by Prebid and we won't be seding GDPR info to tracker and logger
    
      if (!util.isArray(arrayOfAdUnits)) {
        util.error("First argument to PWT.requestBids API, arrayOfAdUnits is mandatory and it should be an array.");
        callbackFunction(arrayOfAdUnits);
        return;
      }
      if (!util.isFunction(callbackFunction)) {
        util.error("Second argument to PWT.requestBids API, callBackFunction is mandatory and it should be a function.");
        return;
      }
      var qualifyingSlots = [];
      var mapOfDivToCode = {};
      var qualifyingSlotDivIds = [];
      util.forEachOnArray(arrayOfAdUnits, function (index, anAdUnitObject) {
        if (refThis.validateAdUnitObject(anAdUnitObject)) {
          // returns true for valid adUnit
          var dmSlotName = anAdUnitObject.code;
          var slot = SLOT.createSlot(dmSlotName);
          window.PWT.adUnits = window.PWT.adUnits || {};
          window.PWT.adUnits[dmSlotName] = anAdUnitObject;
          // IMPORTANT:: bidManager stores all data at divId level but in custom controller, divId is not mandatory.
          // so we woll set value of code to divId if divId is not present
          // also we will pass array of divId to the bidManager.getAllPartnersBidStatuses API 
          slot.setDivID(anAdUnitObject.divId || dmSlotName);
          slot.setPubAdServerObject(anAdUnitObject);
          slot.setAdUnitID(anAdUnitObject.adUnitId || "");
          slot.setAdUnitIndex(anAdUnitObject.adUnitIndex || 0);
          slot.setSizes(refThis.getAdSlotSizesArray(anAdUnitObject));
          qualifyingSlots.push(slot);
          mapOfDivToCode[slot.getDivID()] = slot.getName();
          qualifyingSlotDivIds.push(slot.getDivID());
          util.createVLogInfoPanel(slot.getDivID(), slot.getSizes());
        }
      });
      if (qualifyingSlots.length == 0) {
        util.error("There are no qualifyingSlots, so not calling bidders.");
        callbackFunction(arrayOfAdUnits);
        return;
      }
    
      // new approach without adapter-managers
      prebid.fetchBids(qualifyingSlots);
      var posTimeoutTime = Date.now() + CONFIG.getTimeout(); // post timeout condition
      var intervalId = window.setInterval(function () {
        // todo: can we move this code to a function?
        if (bidManager.getAllPartnersBidStatuses(window.PWT.bidMap, qualifyingSlotDivIds) || Date.now() >= posTimeoutTime) {
          clearInterval(intervalId);
          // removeIf(removeLegacyAnalyticsRelatedCode)
          if (isPrebidPubMaticAnalyticsEnabled === false) {
            // after some time call fire the analytics pixel
            setTimeout(function () {
              bidManager.executeAnalyticsPixel();
            }, 2000);
          }
          // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
          var winningBids = {}; // object:: { code : response bid or just key value pairs }
          // we should loop on qualifyingSlotDivIds to avoid confusion if two parallel calls are fired to our PWT.requestBids 
          util.forEachOnArray(qualifyingSlotDivIds, function (index, divId) {
            var code = mapOfDivToCode[divId];
            winningBids[code] = refThis.findWinningBidAndGenerateTargeting(divId);
            // we need to delay the realignment as we need to do it post creative rendering :)
            // delaying by 1000ms as creative rendering may tke time
            setTimeout(util.realignVLogInfoPanel, 1000, divId);
          });
    
          // for each adUnit in arrayOfAdUnits find the winningBids, we need to return this updated arrayOfAdUnits
          util.forEachOnArray(arrayOfAdUnits, function (index, anAdUnitObject) {
            if (winningBids.hasOwnProperty(anAdUnitObject.code)) {
              anAdUnitObject.bidData = winningBids[anAdUnitObject.code];
            }
          });
          callbackFunction(arrayOfAdUnits);
        }
      }, 10); // check every 10 milliseconds if we have all bids or timeout has been happened.
    }
    
    /* start-test-block */
    exports.origCustomServerExposedAPI = origCustomServerExposedAPI;
    /* end-test-block */
    
    /*
        Input: 
            arrayOfAdUnits
                [
                    anAdUnitObject
                    {
                        code: "some-pub-friendly-unique-name", // mandatory
                        divId: "div-id-where-slot-will-render", // mandatory
                        adUnitId: "ad_unit-id-from-DFP", // mandatory
                        adUnitIndex: "ad-unit-index", // necessary in case of PubMatic, can be derrived by our code by simply incrementing used adUnitIds
                        mediaTypes: { // mandatory
                            banner: { // mandatory in first phase? or atleast one type of mediaTypes should be present
                                sizes: [ [300, 250], [300, 300] ] // array of sizes
                            }
                        }
                    }
                ]
            callbackFunction
                a function that accepts response
    */
    function customServerExposedAPI(arrayOfAdUnits, callbackFunction) {
      if (!!window.PWT.isSyncAuction) {
        refThis.origCustomServerExposedAPI(arrayOfAdUnits, callbackFunction);
      } else {
        setTimeout(function () {
          refThis.origCustomServerExposedAPI(arrayOfAdUnits, callbackFunction);
        }, 0);
      }
    }
    /* start-test-block */
    exports.customServerExposedAPI = customServerExposedAPI;
    /* end-test-block */
    
    /*
        this function will generate the required config for our APIs
        Input:
            Expects an array of GoogleTagSlots
        Output:
            array of object in required format
    */
    function generateConfForGPT(arrayOfGPTSlots) {
      var gptConfArray = [];
      if (!util.isArray(arrayOfGPTSlots)) {
        util.error("first argument to generateConfForGPT should be an array");
        return gptConfArray;
      }
      util.forEachOnArray(arrayOfGPTSlots, function (index, googleSlot) {
        var adUnitId = "";
        var adUnitIndex = "";
        var divId = "";
        var sizes = [];
        var code = "";
        if (util.isObject(googleSlot)) {
          if (util.isFunction(googleSlot.getAdUnitPath)) {
            adUnitId = googleSlot.getAdUnitPath();
          }
          if (util.isFunction(googleSlot.getSlotId)) {
            var slotID = googleSlot.getSlotId();
            adUnitIndex = "" + refThis.getAdUnitIndex(googleSlot);
    
            // TODO: move to GPT specific code to small functions
            /* istanbul ignore else */
            if (slotID && util.isFunction(slotID.getDomId)) {
              divId = slotID.getDomId();
              code = divId;
            }
          }
          if (util.isFunction(googleSlot.getSizes)) {
            /*
                The DFP API, googleSlot.getSizes(window.innerWidth, window.innerHeight) upon passing the two arguments, returns applied sizes as per size-mapping.
             */
            util.forEachOnArray(googleSlot.getSizes(window.innerWidth, window.innerHeight), function (index, sizeObj) {
              /* istanbul ignore else  */
              if (util.isFunction(sizeObj.getWidth) && util.isFunction(sizeObj.getHeight)) {
                sizes.push([sizeObj.getWidth(), sizeObj.getHeight()]);
              } else {
                util.log(divId + ", size object does not have getWidth and getHeight method. Ignoring: ");
                util.log(sizeObj);
              }
            });
          }
        }
        gptConfArray.push({
          code: code,
          divId: divId,
          adUnitId: adUnitId,
          adUnitIndex: adUnitIndex,
          mediaTypes: util.getAdUnitConfig(sizes, googleSlot).mediaTypeObject,
          sizes: sizes
        });
      });
      return gptConfArray;
    }
    /* start-test-block */
    exports.generateConfForGPT = generateConfForGPT;
    /* end-test-block */
    
    function addKeyValuePairsToGPTSlots(arrayOfAdUnits) {
      if (!util.isArray(arrayOfAdUnits)) {
        util.error("array is expected");
      }
      var arrayOfGPTSlots = [];
      if (util.isObject(window.googletag) && util.isFunction(window.googletag.pubads)) {
        arrayOfGPTSlots = window.googletag.pubads().getSlots();
      }
      var mapOfDivIdToGoogleSlot = {};
      util.forEachOnArray(arrayOfGPTSlots, function (index, googleSlot) {
        if (util.isFunction(googleSlot.getSlotId)) {
          var slotID = googleSlot.getSlotId();
          if (slotID && util.isFunction(slotID.getDomId)) {
            mapOfDivIdToGoogleSlot[slotID.getDomId()] = googleSlot;
          } else {
            util.error("slotID.getDomId is not a function");
          }
        } else {
          util.error("googleSlot.getSlotId is not a function");
        }
      });
      util.forEachOnArray(arrayOfAdUnits, function (index, adUnit) {
        if (util.isOwnProperty(mapOfDivIdToGoogleSlot, adUnit.divId)) {
          var googleSlot = mapOfDivIdToGoogleSlot[adUnit.divId];
          if (util.isObject(adUnit) && util.isObject(adUnit.bidData) && util.isObject(adUnit.bidData.kvp)) {
            util.forEachOnObject(adUnit.bidData.kvp, function (key, value) {
              googleSlot.setTargeting(key, [value]);
            });
          }
        } else {
          util.error("GPT-Slot not found for divId: " + adUnit.divId);
        }
      });
    }
    /* start-test-block */
    exports.addKeyValuePairsToGPTSlots = addKeyValuePairsToGPTSlots;
    /* end-test-block */
    
    function removeKeyValuePairsFromGPTSlots(arrayOfGPTSlots) {
      //ToDo: need some fail-safe validations/checks
      /* istanbul ignore else */
      util.forEachOnArray(arrayOfGPTSlots, function (index, currentGoogleSlot) {
        var targetingMap = {};
        if (util.isFunction(currentGoogleSlot.getTargetingKeys)) {
          util.forEachOnArray(currentGoogleSlot.getTargetingKeys(), function (index, key) {
            targetingMap[key] = currentGoogleSlot.getTargeting(key);
          });
        }
        // now clear all targetings
        if (util.isFunction(currentGoogleSlot.clearTargeting)) {
          currentGoogleSlot.clearTargeting();
        }
        // now set all settings from backup
        util.forEachOnObject(targetingMap, function (key, value) {
          if (!util.isOwnProperty(refThis.wrapperTargetingKeys, key)) {
            if (util.isFunction(currentGoogleSlot.setTargeting)) {
              currentGoogleSlot.setTargeting(key, value);
            }
          }
        });
      });
    }
    
    /* start-test-block */
    exports.removeKeyValuePairsFromGPTSlots = removeKeyValuePairsFromGPTSlots;
    /* end-test-block */
    
    exports.init = function (win) {
      CONFIG.initConfig();
      if (util.isObject(win)) {
        refThis.setWindowReference(win);
    
        // removeIf(removeLegacyAnalyticsRelatedCode)
        refThis.initSafeFrameListener(win);
        // endRemoveIf(removeLegacyAnalyticsRelatedCode)
        prebid.initPbjsConfig();
        win.PWT.requestBids = refThis.customServerExposedAPI;
        win.PWT.generateConfForGPT = refThis.generateConfForGPT;
        win.PWT.addKeyValuePairsToGPTSlots = addKeyValuePairsToGPTSlots;
        win.PWT.removeKeyValuePairsFromGPTSlots = removeKeyValuePairsFromGPTSlots;
        refThis.wrapperTargetingKeys = refThis.defineWrapperTargetingKeys(CONSTANTS.WRAPPER_TARGETING_KEYS);
        return true;
      } else {
        return false;
      }
    };
    
    /***/ }),
    
    /***/ "./src_new/owt.js":
    /*!************************!*\
      !*** ./src_new/owt.js ***!
      \************************/
    /*! no static exports found */
    /***/ (function(module, exports, __webpack_require__) {
    
    var util = __webpack_require__(/*! ./util.js */ "./src_new/util.js");
    var controller = __webpack_require__(/*! ./controllers/custom.js */ "./src_new/controllers/custom.js");
    var bidManager = __webpack_require__(/*! ./bidManager.js */ "./src_new/bidManager.js");
    var CONSTANTS = __webpack_require__(/*! ./constants.js */ "./src_new/constants.js");
    var CONFIG = __webpack_require__(/*! ./config.js */ "./src_new/config.js");
    var ucTag = __webpack_require__(/*! prebid-universal-creative */ "./node_modules/prebid-universal-creative/dist/creative.js");
    var conf = __webpack_require__(/*! ./conf.js */ "./src_new/conf.js");
    var prebid = __webpack_require__(/*! ./adapters/prebid.js */ "./src_new/adapters/prebid.js");
    var metaInfo = util.getMetaInfo(window);
    window.PWT = window.PWT || {};
    window.PWT.bidMap = window.PWT.bidMap || {};
    window.PWT.bidIdMap = window.PWT.bidIdMap || {};
    window.PWT.adUnits = window.PWT.adUnits || {};
    window.PWT.floorData = window.PWT.floorData || {};
    window.PWT.isIframe = window.PWT.isIframe || metaInfo.isInIframe;
    window.PWT.protocol = window.PWT.protocol || metaInfo.protocol;
    window.PWT.secure = window.PWT.secure || metaInfo.secure;
    window.PWT.pageURL = window.PWT.pageURL || metaInfo.pageURL;
    window.PWT.refURL = window.PWT.refURL || metaInfo.refURL;
    window.PWT.isSafeFrame = window.PWT.isSafeFrame || false;
    window.PWT.safeFrameMessageListenerAdded = window.PWT.safeFrameMessageListenerAdded || false;
    window.PWT.isSyncAuction = window.PWT.isSyncAuction || false;
    // usingDifferentProfileVersion
    window.PWT.udpv = window.PWT.udpv || util.findQueryParamInURL(metaInfo.isIframe ? metaInfo.refURL : metaInfo.pageURL, "pwtv");
    util.findQueryParamInURL(metaInfo.isIframe ? metaInfo.refURL : metaInfo.pageURL, "pwtc") && util.enableDebugLog();
    util.findQueryParamInURL(metaInfo.isIframe ? metaInfo.refURL : metaInfo.pageURL, "pwtvc") && util.enableVisualDebugLog();
    var isPrebidPubMaticAnalyticsEnabled = CONFIG.isPrebidPubMaticAnalyticsEnabled();
    window.PWT.displayCreative = function (theDocument, bidID) {
      util.log("In displayCreative for: " + bidID);
      if (isPrebidPubMaticAnalyticsEnabled) {
        window[CONSTANTS.COMMON.PREBID_NAMESPACE].renderAd(theDocument, bidID);
      } else {
        // removeIf(removeLegacyAnalyticsRelatedCode)
        bidManager.displayCreative(theDocument, bidID);
        // endRemoveIf(removeLegacyAnalyticsRelatedCode)
      }
    };
    
    window.PWT.displayPMPCreative = function (theDocument, values, priorityArray) {
      util.log("In displayPMPCreative for: " + values);
      var bidID = util.getBididForPMP(values, priorityArray);
      if (bidID) {
        if (isPrebidPubMaticAnalyticsEnabled) {
          window[CONSTANTS.COMMON.PREBID_NAMESPACE].renderAd(theDocument, bidID);
        } else {
          // removeIf(removeLegacyAnalyticsRelatedCode)
          bidManager.displayCreative(theDocument, bidID);
          // endRemoveIf(removeLegacyAnalyticsRelatedCode)
        }
      }
    };
    
    window.PWT.sfDisplayCreative = function (theDocument, bidID) {
      util.log("In sfDisplayCreative for: " + bidID);
      ucTag = window.ucTag || {};
      this.isSafeFrame = true;
      ucTag = window.ucTag || {};
      if (isPrebidPubMaticAnalyticsEnabled) {
        ucTag.renderAd(theDocument, {
          adId: bidID,
          pubUrl: document.referrer
        });
      } else {
        window.parent.postMessage(JSON.stringify({
          pwt_type: "1",
          pwt_bidID: bidID,
          pwt_origin: CONSTANTS.COMMON.PROTOCOL + window.location.hostname
        }), "*");
      }
    };
    window.PWT.sfDisplayPMPCreative = function (theDocument, values, priorityArray) {
      util.log("In sfDisplayPMPCreative for: " + values);
      this.isSafeFrame = true;
      var bidID = util.getBididForPMP(values, priorityArray);
      if (bidID) {
        if (CONFIG.isPrebidPubMaticAnalyticsEnabled()) {
          ucTag.renderAd(theDocument, {
            adId: bidID,
            pubUrl: document.referrer
          });
        } else {
          window.parent.postMessage(JSON.stringify({
            pwt_type: "1",
            pwt_bidID: bidID,
            pwt_origin: CONSTANTS.COMMON.PROTOCOL + window.location.hostname
          }), "*");
        }
      }
    };
    
    // removeIf(removeNativeRelatedCode)
    window.PWT.initNativeTrackers = function (theDocument, bidID) {
      util.log("In startTrackers for: " + bidID);
      util.addEventListenerForClass(window, "click", CONSTANTS.COMMON.OW_CLICK_NATIVE, bidManager.loadTrackers);
      bidManager.executeTracker(bidID);
    };
    // endRemoveIf(removeNativeRelatedCode)
    
    window.PWT.getUserIds = function () {
      return util.getUserIds();
    };
    window.OWT = {
      notifyCount: 0,
      // To maintain the id which should be return after externalBidder registered
      externalBidderStatuses: {}
    };
    window.OWT.registerExternalBidders = function (divIds) {
      window.OWT.notifyCount++;
      util.forEachOnArray(divIds, function (key, divId) {
        util.log("registerExternalBidders: " + divId);
        window.OWT.externalBidderStatuses[divId] = {
          id: window.OWT.notifyCount,
          status: false
        };
      });
      return window.OWT.notifyCount;
    };
    window.OWT.notifyExternalBiddingComplete = function (notifyId) {
      util.forEachOnObject(window.OWT.externalBidderStatuses, function (key, obj) {
        if (obj && obj.id === notifyId) {
          util.log("notify externalBidding complete: " + key);
          window.OWT.externalBidderStatuses[key] = {
            id: obj.id,
            status: true
          };
        }
      });
    };
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    window.PWT.UpdateVastWithTracker = function (bid, vast) {
      return util.UpdateVastWithTracker(bid, vast);
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeInStreamRelatedCode)
    window.PWT.generateDFPURL = function (adUnit, cust_params) {
      var dfpurl = "";
      if (!adUnit || !util.isObject(adUnit)) {
        util.logError("An AdUnit should be an Object", adUnit);
      }
      if (adUnit.bidData && adUnit.bidData.wb && adUnit.bidData.kvp) {
        adUnit.bid = adUnit.bidData.wb;
        adUnit.bid["adserverTargeting"] = adUnit.bidData.kvp;
      } else {
        util.logWarning("No bid found for given adUnit");
      }
      var params = {
        adUnit: adUnit,
        params: {
          iu: adUnit.adUnitId,
          cust_params: cust_params,
          output: "vast"
        }
      };
      if (adUnit.bid) {
        params["bid"] = adUnit.bid;
      }
      dfpurl = window.owpbjs.adServers.dfp.buildVideoUrl(params);
      return dfpurl;
    };
    // endRemoveIf(removeInStreamRelatedCode)
    
    // removeIf(removeInStreamRelatedCode)
    window.PWT.getCustomParamsForDFPVideo = function (customParams, bid) {
      return util.getCustomParamsForDFPVideo(customParams, bid);
    };
    // endRemoveIf(removeInStreamRelatedCode)
    
    window.PWT.setAuctionTimeout = function (timeout) {
      if (!isNaN(timeout)) {
        util.log("updating aution timeout from: " + conf.pwt.t + " to: " + timeout);
        conf.pwt.t = timeout;
      }
    };
    window.PWT.versionDetails = util.getOWConfig();
    window.PWT.getAdapterNameForAlias = CONFIG.getAdapterNameForAlias;
    window.PWT.browserMapping = bidManager.getBrowser();
    controller.init(window);
    
    /***/ }),
    
    /***/ "./src_new/slot.js":
    /*!*************************!*\
      !*** ./src_new/slot.js ***!
      \*************************/
    /*! no static exports found */
    /***/ (function(module, exports, __webpack_require__) {
    
    var CONSTANTS = __webpack_require__(/*! ./constants.js */ "./src_new/constants.js");
    function Slot(name) {
      this.name = name;
      this.status = CONSTANTS.SLOT_STATUS.CREATED;
      this.divID = "";
      this.adUnitID = "";
      this.adUnitIndex = 0;
      this.sizes = [];
      this.keyValues = {};
      this.arguments = [];
      this.pubAdServerObject = null;
      this.displayFunctionCalled = false;
      this.refreshFunctionCalled = false;
    }
    Slot.prototype.getName = function () {
      return this.name;
    };
    Slot.prototype.setStatus = function (status) {
      //check is it a valid status
      this.status = status;
      return this;
    };
    Slot.prototype.getStatus = function () {
      return this.status;
    };
    Slot.prototype.setDivID = function (divID) {
      //check is it a valid divID, string
      this.divID = divID;
      return this;
    };
    Slot.prototype.getDivID = function () {
      return this.divID;
    };
    Slot.prototype.setAdUnitID = function (value) {
      //check is it a valid divID, string
      this.adUnitID = value;
      return this;
    };
    Slot.prototype.getAdUnitID = function () {
      return this.adUnitID;
    };
    Slot.prototype.setAdUnitIndex = function (value) {
      //check is it a valid divID, string or number 
      this.adUnitIndex = value;
      return this;
    };
    Slot.prototype.getAdUnitIndex = function () {
      return this.adUnitIndex;
    };
    Slot.prototype.setSizes = function (value) {
      //check is it a valid value, array
      this.sizes = value;
      return this;
    };
    Slot.prototype.getSizes = function () {
      return this.sizes;
    };
    Slot.prototype.setKeyValue = function (key, value) {
      //check is it a valid value, array
      this.keyValues[key] = value;
      return this;
    };
    Slot.prototype.setKeyValues = function (value) {
      //check is it a valid value, array
      this.keyValues = value;
      return this;
    };
    Slot.prototype.getkeyValues = function () {
      return this.keyValues;
    };
    Slot.prototype.setArguments = function (value) {
      //check is it a valid value, array
      this.arguments = value;
      return this;
    };
    Slot.prototype.getArguments = function () {
      return this.arguments;
    };
    Slot.prototype.setPubAdServerObject = function (value) {
      //check is it a valid value, array
      this.pubAdServerObject = value;
      return this;
    };
    Slot.prototype.getPubAdServerObject = function () {
      return this.pubAdServerObject;
    };
    Slot.prototype.setDisplayFunctionCalled = function (value) {
      this.displayFunctionCalled = value;
      return this;
    };
    Slot.prototype.isDisplayFunctionCalled = function () {
      return this.displayFunctionCalled;
    };
    Slot.prototype.setRefreshFunctionCalled = function (value) {
      this.refreshFunctionCalled = value;
      return this;
    };
    Slot.prototype.isRefreshFunctionCalled = function () {
      return this.refreshFunctionCalled;
    };
    Slot.prototype.updateStatusAfterRendering = function (isRefreshCalled) {
      this.status = CONSTANTS.SLOT_STATUS.DISPLAYED;
      this.arguments = [];
      if (isRefreshCalled) {
        this.refreshFunctionCalled = false;
      } else {
        this.displayFunctionCalled = false;
      }
    };
    
    /* start-test-block */
    module.exports.Slot = Slot;
    /* end-test-block */
    
    exports.createSlot = function (name) {
      return new Slot(name);
    };
    
    /***/ }),
    
    /***/ "./src_new/util.js":
    /*!*************************!*\
      !*** ./src_new/util.js ***!
      \*************************/
    /*! no static exports found */
    /***/ (function(module, exports, __webpack_require__) {
    
    //todo
    //  pageURL refURL protocol related functions
    // forEachOnArray
    var CONFIG = __webpack_require__(/*! ./config.js */ "./src_new/config.js");
    var CONSTANTS = __webpack_require__(/*! ./constants.js */ "./src_new/constants.js");
    var conf = __webpack_require__(/*! ./conf.js */ "./src_new/conf.js");
    var BID = __webpack_require__(/*! ./bid.js */ "./src_new/bid.js");
    var bidManager = __webpack_require__(/*! ./bidManager.js */ "./src_new/bidManager.js");
    var debugLogIsEnabled = false;
    
    /* start-test-block */
    exports.debugLogIsEnabled = debugLogIsEnabled;
    /* end-test-block */
    var visualDebugLogIsEnabled = false;
    
    /* start-test-block */
    exports.visualDebugLogIsEnabled = visualDebugLogIsEnabled;
    /* end-test-block */
    var typeArray = "Array";
    var typeString = "String";
    var typeFunction = "Function";
    var typeNumber = "Number";
    var toString = Object.prototype.toString;
    var refThis = this;
    refThis.idsAppendedToAdUnits = false;
    var mediaTypeConfigPerSlot = {};
    exports.mediaTypeConfig = mediaTypeConfigPerSlot;
    var pbNameSpace = parseInt(conf[CONSTANTS.CONFIG.COMMON][CONSTANTS.COMMON.IDENTITY_ONLY] || CONSTANTS.CONFIG.DEFAULT_IDENTITY_ONLY) ? CONSTANTS.COMMON.IH_NAMESPACE : CONSTANTS.COMMON.PREBID_NAMESPACE;
    exports.pbNameSpace = pbNameSpace;
    function isA(object, testForType) {
      return toString.call(object) === "[object " + testForType + "]";
    }
    
    /* start-test-block */
    exports.isA = isA;
    /* end-test-block */
    
    exports.isFunction = function (object) {
      return refThis.isA(object, typeFunction);
    };
    exports.isString = function (object) {
      return refThis.isA(object, typeString);
    };
    exports.isArray = function (object) {
      return refThis.isA(object, typeArray);
    };
    exports.isNumber = function (object) {
      return refThis.isA(object, typeNumber);
    };
    exports.isObject = function (object) {
      return typeof object === "object" && object !== null;
    };
    exports.isOwnProperty = function (theObject, proertyName) {
      /* istanbul ignore else */
      if (refThis.isObject(theObject) && theObject.hasOwnProperty) {
        return theObject.hasOwnProperty(proertyName);
      }
      return false;
    };
    exports.isUndefined = function (object) {
      return typeof object === "undefined";
    };
    exports.enableDebugLog = function () {
      refThis.debugLogIsEnabled = true;
    };
    exports.isDebugLogEnabled = function () {
      return refThis.debugLogIsEnabled;
    };
    exports.enableVisualDebugLog = function () {
      refThis.debugLogIsEnabled = true;
      refThis.visualDebugLogIsEnabled = true;
    };
    exports.isEmptyObject = function (object) {
      return refThis.isObject(object) && Object.keys(object).length === 0;
    };
    
    //todo: move...
    var constDebugInConsolePrependWith = "[OpenWrap] : ";
    var constErrorInConsolePrependWith = "[OpenWrap] : [Error]";
    exports.log = function (data) {
      if (refThis.debugLogIsEnabled && console && this.isFunction(console.log)) {
        // eslint-disable-line no-console
        if (this.isString(data)) {
          console.log(new Date().getTime() + " : " + constDebugInConsolePrependWith + data); // eslint-disable-line no-console
        } else {
          console.log(data); // eslint-disable-line no-console
        }
      }
    };
    
    exports.logError = function (data) {
      if (refThis.debugLogIsEnabled && console && this.isFunction(console.log)) {
        // eslint-disable-line no-console
        if (this.isString(data)) {
          console.error(new Date().getTime() + " : " + constDebugInConsolePrependWith + data); // eslint-disable-line no-console
        } else {
          console.error(data); // eslint-disable-line no-console
        }
      }
    };
    
    exports.logWarning = function (data) {
      if (refThis.debugLogIsEnabled && console && this.isFunction(console.log)) {
        // eslint-disable-line no-console
        if (this.isString(data)) {
          console.warn(new Date().getTime() + " : " + constDebugInConsolePrependWith + data); // eslint-disable-line no-console
        } else {
          console.warn(data); // eslint-disable-line no-console
        }
      }
    };
    
    exports.error = function (data) {
      console.log(new Date().getTime() + " : " + constErrorInConsolePrependWith, data); // eslint-disable-line no-console
    };
    
    exports.getCurrentTimestampInMs = function () {
      var date = new window.Date();
      return date.getTime();
    };
    exports.getCurrentTimestamp = function () {
      var date = new Date();
      return Math.round(date.getTime() / 1000);
    };
    var utilGetIncrementalInteger = function () {
      var count = 0;
      return function () {
        count++;
        return count;
      };
    }();
    
    /* start-test-block */
    exports.utilGetIncrementalInteger = utilGetIncrementalInteger;
    /* end-test-block */
    
    exports.getUniqueIdentifierStr = function () {
      return utilGetIncrementalInteger() + window.Math.random().toString(16).substr(2);
    };
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    exports.copyKeyValueObject = function (copyTo, copyFrom) {
      /* istanbul ignore else */
      if (refThis.isObject(copyTo) && refThis.isObject(copyFrom)) {
        var utilRef = refThis;
        refThis.forEachOnObject(copyFrom, function (key, value) {
          copyFrom[key] = utilRef.isArray(value) ? value : [value];
          if (utilRef.isOwnProperty(copyTo, key)) {
            // copyTo[key].push.apply(copyTo[key], value);
            if (!refThis.isArray(copyTo[key])) {
              var temp = copyTo[key];
              copyTo[key] = [temp];
            }
            copyTo[key].push(value);
          } else {
            copyTo[key] = [value];
          }
        });
      }
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    exports.getIncrementalInteger = function () {
      var count = 0;
      return function () {
        count++;
        return count;
      };
    }();
    exports.generateUUID = function () {
      var d = new window.Date().getTime(),
        // todo: this.pageURL ???
        url = window.decodeURIComponent(this.pageURL).toLowerCase().replace(/[^a-z,A-Z,0-9]/gi, ""),
        urlLength = url.length;
    
      //todo: uncomment it,  what abt performance
      //if(win.performance && this.isFunction(win.performance.now)){
      //    d += performance.now();
      //}
    
      var uuid = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx-zzzzz".replace(/[xyz]/g, function (c) {
        var r = (d + Math.random() * 16) % 16 | 0;
        d = Math.floor(d / 16);
        var op;
        switch (c) {
          case "x":
            op = r;
            break;
          case "z":
            op = url[Math.floor(Math.random() * urlLength)];
            break;
          default:
            op = r & 0x3 | 0x8;
        }
        return op.toString(16);
      });
      return uuid;
    };
    var macroRegexFlag = "g";
    var constCommonMacroForWidthRegExp = new RegExp(CONSTANTS.MACROS.WIDTH, macroRegexFlag);
    var constCommonMacroForHeightRegExp = new RegExp(CONSTANTS.MACROS.HEIGHT, macroRegexFlag);
    var constCommonMacroForAdUnitIDRegExp = new RegExp(CONSTANTS.MACROS.AD_UNIT_ID, macroRegexFlag);
    var constCommonMacroForAdUnitIndexRegExp = new RegExp(CONSTANTS.MACROS.AD_UNIT_INDEX, macroRegexFlag);
    var constCommonMacroForIntegerRegExp = new RegExp(CONSTANTS.MACROS.INTEGER, macroRegexFlag);
    var constCommonMacroForDivRegExp = new RegExp(CONSTANTS.MACROS.DIV, macroRegexFlag);
    exports.generateSlotNamesFromPattern = function (activeSlot, pattern, shouldCheckMappingForVideo, videoSlotName) {
      var slotNames = [],
        slotName,
        slotNamesObj = {},
        sizeArray,
        sizeArrayLength,
        i;
      /* istanbul ignore else */
      if (refThis.isObject(activeSlot) && refThis.isFunction(activeSlot.getSizes)) {
        sizeArray = activeSlot.getSizes();
        var divId = refThis.isFunction(activeSlot.getDivID) ? activeSlot.getDivID() : activeSlot.getSlotId().getDomId();
        if (shouldCheckMappingForVideo) {
          //TODO: remove below line and update above live for assigning sizeArray after remove phantom js and including chromeheadless
          // This adds an size 0x0 to sizes so that multiple kgpvs can be generated
          sizeArray = [].concat(activeSlot.getSizes());
          var config = refThis.mediaTypeConfig[divId];
          if (config && config.video) {
            sizeArray.unshift([0, 0]);
          }
        }
        sizeArrayLength = sizeArray.length;
        /* istanbul ignore else */
        if (sizeArrayLength > 0) {
          for (i = 0; i < sizeArrayLength; i++) {
            /* istanbul ignore else */
            if (sizeArray[i].length == 2 && sizeArray[i][0] && sizeArray[i][1] || sizeArray[i][0] == 0 && sizeArray[i][1] == 0 || refThis.isFunction(sizeArray[i].getWidth) && refThis.isFunction(sizeArray[i].getHeight)) {
              var adUnitId = refThis.isFunction(activeSlot.getAdUnitID) ? activeSlot.getAdUnitID() : activeSlot.getSlotId().getAdUnitPath();
              var divId = refThis.isFunction(activeSlot.getDivID) ? activeSlot.getDivID() : activeSlot.getSlotId().getDomId();
              var adUnitIndex = refThis.isFunction(activeSlot.getAdUnitIndex) ? activeSlot.getAdUnitIndex() : activeSlot.getSlotId().getId().split("_")[1];
              var width = sizeArray[i][0] == 0 ? 0 : sizeArray[i][0] || sizeArray[i].getWidth();
              var height = sizeArray[i][1] == 0 ? 0 : sizeArray[i][1] || sizeArray[i].getHeight();
              slotName = pattern;
              slotName = slotName.replace(constCommonMacroForAdUnitIDRegExp, adUnitId).replace(constCommonMacroForAdUnitIndexRegExp, adUnitIndex).replace(constCommonMacroForIntegerRegExp, refThis.getIncrementalInteger()).replace(constCommonMacroForDivRegExp, divId).replace(constCommonMacroForWidthRegExp, width).replace(constCommonMacroForHeightRegExp, height);
    
              // if size is 0x0 then we don't want to add it in slotNames since it will be looped in another function
              // we just want to check the config for 0x0 mapping hence updating it in videoSlotName
              /* istanbul ignore else */
              if (width == 0 && height == 0) {
                videoSlotName[0] = slotName;
                /* istanbul ignore else */
              } else if (!refThis.isOwnProperty(slotNamesObj, slotName)) {
                slotNamesObj[slotName] = "";
                slotNames.push(slotName);
              }
            }
          }
        }
      }
      return slotNames;
    };
    
    /**
     * todo:
     * 		if direct mapping is not found 
     * 		then look for regex mapping
     * 			separate function to handle regex mapping
     * 			kgp: "" // should be filled with whatever value
     * 			klm: {} // should be filled with records if required else leave it as an empty object {}
     * 			kgp_rx: "" // regex pattern
     * 			klm_rx: [
     * 				{
     * 					rx: "ABC123*",
     * 					rx_config: {} // here goes adapyter config
     * 				}, 
     * 
     * 				{
     * 					rx: "*",
     * 					rx_config: {}
     * 				}
     * 			]
     */
    
    /**
     *  Algo for Regex and Normal Flow
     * 1. Check for kgp key 
     *   a). If KGP is present for partner then proceed with old flow and no change in that
     *   b). If KGP is not present and kgp_rx is present it is regex flow and proceed with regex flow as below
     * 2. Regex Flow
     * 	a. Generate KGPV's with kgp as _AU_@_DIV_@_W_x_H_
     * 	b. Regex Match each KGPV with KLM_rx 
     * 	c. Get config for the partner 
     *     d. Send the config to prebid and log the same kgpv in logger
     * 
     * Special Case for Pubmatic
     *  1. In case of regex flow we will have hashed keys which will be sent to translator for matching
     *  2. These hashed keys could be same for multiple slot on the page and hence need to check how to send it to prebid for 
     *     identification in prebid resposne.
     */
    
    exports.forEachGeneratedKey = function (adapterID, adUnits, adapterConfig, impressionID, slotConfigMandatoryParams, activeSlots, handlerFunction, addZeroBids) {
      var activeSlotsLength = activeSlots.length,
        keyGenerationPattern = adapterConfig[CONSTANTS.CONFIG.KEY_GENERATION_PATTERN] || adapterConfig[CONSTANTS.CONFIG.REGEX_KEY_GENERATION_PATTERN] || "";
      /* istanbul ignore else */
      if (activeSlotsLength > 0 && keyGenerationPattern.length > 3) {
        refThis.forEachOnArray(activeSlots, function (i, activeSlot) {
          var videoSlotName = [];
          // We are passing videoSlotName because we don't want to update the sizes and just check for 0x0 config if video and banner is both enabeld
          var generatedKeys = refThis.generateSlotNamesFromPattern(activeSlot, keyGenerationPattern, true, videoSlotName);
          if (generatedKeys.length > 0) {
            refThis.callHandlerFunctionForMapping(adapterID, adUnits, adapterConfig, impressionID, slotConfigMandatoryParams, generatedKeys, activeSlot, handlerFunction, addZeroBids, keyGenerationPattern, videoSlotName);
          }
        });
      }
    };
    
    // private
    function callHandlerFunctionForMapping(adapterID, adUnits, adapterConfig, impressionID, slotConfigMandatoryParams, generatedKeys, activeSlot, handlerFunction, addZeroBids, keyGenerationPattern, videoSlotName) {
      var keyLookupMap = adapterConfig[CONSTANTS.CONFIG.KEY_LOOKUP_MAP] || adapterConfig[CONSTANTS.CONFIG.REGEX_KEY_LOOKUP_MAP] || null,
        kgpConsistsWidthAndHeight = keyGenerationPattern.indexOf(CONSTANTS.MACROS.WIDTH) >= 0 && keyGenerationPattern.indexOf(CONSTANTS.MACROS.HEIGHT) >= 0;
      var isRegexMapping = adapterConfig[CONSTANTS.CONFIG.REGEX_KEY_LOOKUP_MAP] ? true : false;
      var regexPattern = undefined;
      const adapterNameForAlias = CONFIG.getAdapterNameForAlias(adapterID);
      var isPubMaticAlias = CONSTANTS.PUBMATIC_ALIASES.indexOf(adapterNameForAlias) > -1 ? true : false;
      var regExMappingWithNoConfig = false;
      refThis.forEachOnArray(generatedKeys, function (j, generatedKey) {
        var keyConfig = null,
          callHandlerFunction = false,
          sizeArray = activeSlot.getSizes();
        if (keyLookupMap == null) {
          // This block executes for pubmatic only where there are no KLM's 
          // Adding this check for pubmatic only to send the correct tagId for Size Level mapping. UOE-6156
          if (videoSlotName && videoSlotName.length == 1) {
            generatedKey = videoSlotName[0];
          }
          callHandlerFunction = true;
        } else {
          if (isRegexMapping) {
            refThis.debugLogIsEnabled && refThis.log(console.time("Time for regexMatching for key " + generatedKey));
            var config = refThis.getConfigFromRegex(keyLookupMap, generatedKey);
            refThis.debugLogIsEnabled && refThis.log(console.timeEnd("Time for regexMatching for key " + generatedKey));
            if (config) {
              keyConfig = config.config;
              regexPattern = config.regexPattern;
            } else {
              // if klm_rx dosen't return any config and if partner is PubMatic alias we need to restrict call to handlerFunction
              // so adding flag regExMappingWithNoConfig below
              regExMappingWithNoConfig = isPubMaticAlias ? true : false;
            }
          } else {
            // Added Below Check Because of UOE-5600
            if (videoSlotName && videoSlotName.length == 1) {
              // Commented out normal lookup and added below check to remove case sensitive check on videoSlotName[0].
              // keyConfig = keyLookupMap[videoSlotName[0]];
              // keyConfig = keyLookupMap[Object.keys(keyLookupMap).find(key => key.toLowerCase() === videoSlotName[0].toLowerCase())];
              keyConfig = keyLookupMap[Object.keys(keyLookupMap).filter(function (key) {
                return key.toLowerCase() === videoSlotName[0].toLowerCase();
              })];
              // We are updating the generatedKey because we want to log kgpv as 0x0 in case of video 
              if (keyConfig) {
                generatedKey = videoSlotName[0];
              }
            }
            if (!keyConfig) {
              // Commented out normal lookup and added below check to remove case sensitive check on generatedKey.
              // keyConfig = keyLookupMap[generatedKey];
              keyConfig = keyLookupMap[Object.keys(keyLookupMap).filter(function (key) {
                return key.toLowerCase() === generatedKey.toLowerCase();
              })];
            }
          }
          // condition (!keyConfig && !isPubMaticAlias) will check if keyCofig is undefined and partner is not PubMatic alias then log message to console 
          // with "adapterID+": "+generatedKey+ config not found"
          // regExMappingWithNoConfig will be true only if klm_rx dosen't return config and partner is PubMatic alias then log message to console
          // with "adapterID+": "+generatedKey+ config not found" 
          if (!keyConfig && !isPubMaticAlias || regExMappingWithNoConfig) {
            refThis.log(adapterID + ": " + generatedKey + CONSTANTS.MESSAGES.M8);
          } else {
            callHandlerFunction = true;
          }
        }
    
        /* istanbul ignore else */
        if (callHandlerFunction) {
          /* istanbul ignore else */
          if (addZeroBids == true) {
            var bid = BID.createBid(adapterID, generatedKey);
            bid.setDefaultBidStatus(1).setReceivedTime(refThis.getCurrentTimestampInMs());
            bidManager.setBidFromBidder(activeSlot.getDivID(), bid);
            bid.setRegexPattern(regexPattern);
          }
          handlerFunction(adapterID, adUnits, adapterConfig, impressionID, generatedKey, kgpConsistsWidthAndHeight, activeSlot, refThis.getPartnerParams(keyConfig), sizeArray[j][0], sizeArray[j][1], regexPattern);
        }
      });
    }
    /* start-test-block */
    exports.callHandlerFunctionForMapping = callHandlerFunctionForMapping;
    /* end-test-block */
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    exports.resizeWindow = function (theDocument, width, height, divId) {
      /* istanbul ignore else */
      if (height && width) {
        try {
          var defaultViewFrame = theDocument.defaultView.frameElement;
          var elementArray = [];
          if (divId) {
            var adSlot = document.getElementById(divId);
            var adSlot_Div = adSlot.querySelector("div");
            elementArray.push(adSlot_Div);
            elementArray.push(adSlot_Div.querySelector("iframe"));
            defaultViewFrame = adSlot.querySelector("iframe");
          }
          elementArray.push(defaultViewFrame);
          elementArray.forEach(function (ele) {
            if (ele) {
              ele.width = "" + width;
              ele.height = "" + height;
              ele.style.width = "" + width + "px";
              ele.style.height = "" + height + "px";
            }
          });
        } catch (e) {
          refThis.logError("Creative-Resize; Error in resizing creative");
        } // eslint-disable-line no-empty
      }
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    exports.writeIframe = function (theDocument, src, width, height, style) {
      theDocument.write("<iframe" + " frameborder=\"0\" allowtransparency=\"true\" marginheight=\"0\" marginwidth=\"0\" scrolling=\"no\" width=\"" + width + "\" hspace=\"0\" vspace=\"0\" height=\"" + height + "\"" + (style ? " style=\"" + style + "\"" : "") + " src=\"" + src + "\"" + "></ifr" + "ame>");
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    exports.displayCreative = function (theDocument, bid) {
      if (bid && bid.pbbid && bid.pbbid.mediaType == "video" && bid.renderer && refThis.isObject(bid.renderer)) {
        if (refThis.isFunction(bid.renderer.render)) {
          bid.renderer.render(bid.getPbBid());
        }
      } else {
        refThis.resizeWindow(theDocument, bid.width, bid.height);
        if (bid.adHtml) {
          bid.adHtml = refThis.replaceAuctionPrice(bid.adHtml, bid.getGrossEcpm());
          theDocument.write(bid.adHtml);
        } else if (bid.adUrl) {
          bid.adUrl = refThis.replaceAuctionPrice(bid.adUrl, bid.getGrossEcpm());
          refThis.writeIframe(theDocument, bid.adUrl, bid.width, bid.height, "");
        } else {
          refThis.logError("creative details are not found");
          refThis.logError(bid);
        }
      }
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // todo: how about accepting array of arguments to be passed to callback function after key, value, arrayOfArguments
    exports.forEachOnObject = function (theObject, callback) {
      /* istanbul ignore else */
      if (!refThis.isObject(theObject)) {
        return;
      }
    
      /* istanbul ignore else */
      if (!refThis.isFunction(callback)) {
        return;
      }
      for (var key in theObject) {
        /* istanbul ignore else */
        if (refThis.isOwnProperty(theObject, key)) {
          callback(key, theObject[key]);
        }
      }
    };
    exports.forEachOnArray = function (theArray, callback) {
      /* istanbul ignore else */
      if (!refThis.isArray(theArray)) {
        return;
      }
    
      /* istanbul ignore else */
      if (!refThis.isFunction(callback)) {
        return;
      }
      for (var index = 0, arrayLength = theArray.length; index < arrayLength; index++) {
        callback(index, theArray[index]);
      }
    };
    exports.trim = function (s) {
      if (!refThis.isString(s)) {
        return s;
      } else {
        return s.replace(/^\s+/g, "").replace(/\s+$/g, "");
      }
    };
    exports.getTopFrameOfSameDomain = function (cWin) {
      try {
        /* istanbul ignore else */
        if (cWin.parent.document != cWin.document) {
          return refThis.getTopFrameOfSameDomain(cWin.parent);
        }
      } catch (e) {}
      return cWin;
    };
    exports.metaInfo = {};
    exports.getMetaInfo = function (cWin) {
      var obj = {},
        MAX_PAGE_URL_LEN = 512,
        frame;
      obj.pageURL = "";
      obj.refURL = "";
      obj.protocol = "https://";
      obj.secure = 1;
      obj.isInIframe = refThis.isIframe(cWin);
      try {
        frame = refThis.getTopFrameOfSameDomain(cWin);
        obj.refURL = (frame.refurl || frame.document.referrer || '').substr(0, MAX_PAGE_URL_LEN);
        obj.pageURL = (frame !== window.top && frame.document.referrer != "" ? frame.document.referrer : frame.location.href).substr(0, MAX_PAGE_URL_LEN);
        obj.protocol = function (frame) {
          /* istanbul ignore else */
          if (frame.location.protocol === "http:") {
            obj.secure = 0;
            return "http://";
          }
          obj.secure = 1;
          return "https://";
        }(frame);
      } catch (e) {}
      obj.pageDomain = refThis.getDomainFromURL(obj.pageURL);
      refThis.metaInfo = obj;
      return obj;
    };
    exports.isIframe = function (theWindow) {
      try {
        return theWindow.self !== theWindow.top;
      } catch (e) {
        return false;
      }
    };
    exports.findQueryParamInURL = function (url, name) {
      return refThis.isOwnProperty(refThis.parseQueryParams(url), name);
    };
    exports.parseQueryParams = function (url) {
      var parser = refThis.createDocElement(window, 'a');
      parser.href = url;
      var params = {};
    
      /* istanbul ignore else */
      if (parser.search) {
        var queryString = parser.search.replace('?', '');
        queryString = queryString.split('&');
        refThis.forEachOnArray(queryString, function (index, keyValue) {
          var keyValue = keyValue.split('=');
          var key = keyValue[0] || '';
          var value = keyValue[1] || '';
          params[key] = value;
        });
      }
      return params;
    };
    exports.createDocElement = function (win, elementName) {
      return win.document.createElement(elementName);
    };
    exports.addHookOnFunction = function (theObject, useProto, functionName, newFunction) {
      var callMethodOn = theObject;
      theObject = useProto ? theObject.__proto__ : theObject;
      if (refThis.isObject(theObject) && refThis.isFunction(theObject[functionName])) {
        var originalFunction = theObject[functionName];
        theObject[functionName] = newFunction(callMethodOn, originalFunction);
      } else {
        refThis.logWarning("in assignNewDefination: oldReference is not a function");
      }
    };
    exports.getBididForPMP = function (values, priorityArray) {
      values = values.split(',');
      var valuesLength = values.length,
        priorityArrayLength = priorityArray.length,
        selectedPMPDeal = '',
        bidID = '';
    
      /* istanbul ignore else */
      if (valuesLength == 0) {
        this.log('Error: Unable to find bidID as values array is empty.');
        return;
      }
      for (var i = 0; i < priorityArrayLength; i++) {
        for (var j = 0; j < valuesLength; j++) {
          if (values[j].indexOf(priorityArray[i]) >= 0) {
            selectedPMPDeal = values[j];
            break;
          }
        }
    
        /* istanbul ignore else */
        if (selectedPMPDeal != '') {
          break;
        }
      }
      if (selectedPMPDeal == '') {
        selectedPMPDeal = values[0];
        this.log('No PMP-Deal was found matching PriorityArray, So Selecting first PMP-Deal: ' + selectedPMPDeal);
      } else {
        this.log('Selecting PMP-Deal: ' + selectedPMPDeal);
      }
      var temp = selectedPMPDeal.split(CONSTANTS.COMMON.DEAL_KEY_VALUE_SEPARATOR);
      /* istanbul ignore else */
      if (temp.length == 3) {
        bidID = temp[2];
      }
    
      /* istanbul ignore else */
      if (!bidID) {
        this.log('Error: bidID not found in PMP-Deal: ' + selectedPMPDeal);
        return;
      }
      return bidID;
    };
    
    // removeIf(removeNativeRelatedCode)
    exports.createInvisibleIframe = function () {
      var f = refThis.createDocElement(window, 'iframe');
      f.id = refThis.getUniqueIdentifierStr();
      f.height = 0;
      f.width = 0;
      f.border = '0px';
      f.hspace = '0';
      f.vspace = '0';
      f.marginWidth = '0';
      f.marginHeight = '0';
      f.style.border = '0';
      f.scrolling = 'no';
      f.frameBorder = '0';
      //f.src = 'about:self';//todo: test by setting empty src on safari
      f.style = 'display:none';
      return f;
    };
    // endRemoveIf(removeNativeRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    exports.addMessageEventListener = function (theWindow, eventHandler) {
      /* istanbul ignore else */
      if (typeof eventHandler !== "function") {
        refThis.log("EventHandler should be a function");
        return false;
      }
      if (theWindow.addEventListener) {
        theWindow.addEventListener("message", eventHandler, false);
      } else {
        theWindow.attachEvent("onmessage", eventHandler);
      }
      return true;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    exports.safeFrameCommunicationProtocol = function (msg) {
      try {
        var bidSlotId;
        msgData = window.JSON.parse(msg.data);
        /* istanbul ignore else */
        if (!msgData.pwt_type) {
          return;
        }
        switch (window.parseInt(msgData.pwt_type)) {
          case 1:
            /* istanbul ignore else */
            if (window.PWT.isSafeFrame) {
              return;
            }
            var bidDetails = bidSlotId = bidManager.getBidById(msgData.pwt_bidID);
            /* istanbul ignore else */
            if (bidDetails) {
              var theBid = bidDetails.bid;
              var adapterID = theBid.getAdapterID(),
                divID = bidDetails.slotid,
                newMsgData = {
                  pwt_type: 2,
                  pwt_bid: theBid
                };
              refThis.vLogInfo(divID, {
                type: 'disp',
                adapter: adapterID
              });
              bidManager.executeMonetizationPixel(divID, theBid);
              // outstream video renderer for safe frame.
              if (theBid && theBid.pbbid && theBid.pbbid.mediaType == "video" && theBid.renderer && refThis.isObject(theBid.renderer)) {
                if (refThis.isFunction(theBid.renderer.render)) {
                  theBid.renderer.render(theBid.getPbBid());
                }
              } else {
                refThis.resizeWindow(window.document, theBid.width, theBid.height, divID);
                msg.source.postMessage(window.JSON.stringify(newMsgData), msgData.pwt_origin);
              }
            }
            break;
          case 2:
            /* istanbul ignore else */
            if (!window.PWT.isSafeFrame) {
              return;
            }
    
            /* istanbul ignore else */
            if (msgData.pwt_bid) {
              var theBid = msgData.pwt_bid;
              if (theBid.adHtml) {
                try {
                  var iframe = refThis.createInvisibleIframe(window.document);
                  /* istanbul ignore else */
                  if (!iframe) {
                    throw {
                      message: 'Failed to create invisible frame.',
                      name: ""
                    };
                  }
                  iframe.setAttribute('width', theBid.width);
                  iframe.setAttribute('height', theBid.height);
                  iframe.style = '';
                  window.document.body.appendChild(iframe);
    
                  /* istanbul ignore else */
                  if (!iframe.contentWindow) {
                    throw {
                      message: 'Unable to access frame window.',
                      name: ""
                    };
                  }
                  var iframeDoc = iframe.contentWindow.document;
                  /* istanbul ignore else */
                  if (!iframeDoc) {
                    throw {
                      message: 'Unable to access frame window document.',
                      name: ""
                    };
                  }
                  var content = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><base target="_top" /><scr' + 'ipt>inDapIF=true;</scr' + 'ipt></head>';
                  content += '<body>';
                  content += "<script>var $sf = window.parent.$sf;<\/script>";
                  content += "<script>setInterval(function(){try{var fr = window.document.defaultView.frameElement;fr.width = window.parent.document.defaultView.innerWidth;fr.height = window.parent.document.defaultView.innerHeight;}catch(e){}}, 200);</script>";
                  content += theBid.adHtml;
                  content += '</body></html>';
                  iframeDoc.write(content);
                  iframeDoc.close();
                } catch (e) {
                  refThis.logError('Error in rendering creative in safe frame.');
                  refThis.log(e);
                  refThis.log('Rendering synchronously.');
                  refThis.displayCreative(window.document, msgData.pwt_bid);
                }
              } else if (theBid.adUrl) {
                refThis.writeIframe(window.document, theBid.adUrl, theBid.width, theBid.height, "");
              } else {
                refThis.logWarning("creative details are not found");
                refThis.log(theBid);
              }
            }
            break;
    
          // removeIf(removeNativeRelatedCode)	
          case 3:
            if (CONFIG.isPrebidPubMaticAnalyticsEnabled()) {
              var msg = {
                message: 'Prebid Native',
                adId: msgData.pwt_bidID,
                action: msgData.pwt_action
              };
              window.postMessage(JSON.stringify(msg), "*");
            } else {
              var bidDetails = bidSlotId = bidManager.getBidById(msgData.pwt_bidID);
              /* istanbul ignore else */
              if (bidDetails) {
                var theBid = bidDetails.bid,
                  adapterID = theBid.getAdapterID(),
                  divID = bidDetails.slotid;
                refThis.vLogInfo(divID, {
                  type: 'disp',
                  adapter: adapterID
                });
                if (msgData.pwt_action && msgData.pwt_action == "imptrackers") {
                  bidManager.executeMonetizationPixel(divID, theBid);
                }
                bidManager.fireTracker(theBid, msgData.pwt_action);
              }
            }
            break;
          // endRemoveIf(removeNativeRelatedCode)	
        }
    
        // Check if browsers local storage has auction related data and update impression served count accordingly.
        var frequencyDepth = JSON.parse(localStorage.getItem('PROFILE_AUCTION_INFO_' + window.location.hostname)) || {};
        if (frequencyDepth !== null && frequencyDepth.slotLevelFrquencyDepth) {
          frequencyDepth.slotLevelFrquencyDepth[frequencyDepth.codeAdUnitMap[bidSlotId && bidSlotId.slotid]].impressionServed = frequencyDepth.slotLevelFrquencyDepth[frequencyDepth.codeAdUnitMap[bidSlotId && bidSlotId.slotid]].impressionServed + 1;
          frequencyDepth.impressionServed = frequencyDepth.impressionServed + 1;
        }
        localStorage.setItem('PROFILE_AUCTION_INFO_' + window.location.hostname, JSON.stringify(frequencyDepth));
      } catch (e) {}
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    exports.addMessageEventListenerForSafeFrame = function (theWindow) {
      refThis.addMessageEventListener(theWindow, refThis.safeFrameCommunicationProtocol);
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    exports.getElementLocation = function (el) {
      var rect,
        x = 0,
        y = 0;
      if (refThis.isFunction(el.getBoundingClientRect)) {
        rect = el.getBoundingClientRect();
        x = Math.floor(rect.left);
        y = Math.floor(rect.top);
      } else {
        while (el) {
          x += el.offsetLeft;
          y += el.offsetTop;
          el = el.offsetParent;
        }
      }
      return {
        x: x,
        y: y
      };
    };
    exports.createVLogInfoPanel = function (divID, dimensionArray) {
      var element,
        infoPanelElement,
        infoPanelElementID,
        doc = window.document;
    
      /* istanbul ignore else */
      if (refThis.visualDebugLogIsEnabled) {
        element = doc.getElementById(divID);
        /* istanbul ignore else */
        if (element && dimensionArray.length && dimensionArray[0][0] && dimensionArray[0][1]) {
          infoPanelElementID = divID + '-pwtc-info';
          /* istanbul ignore else */
          if (!refThis.isUndefined(doc.getElementById(infoPanelElementID))) {
            var pos = refThis.getElementLocation(element);
            infoPanelElement = doc.createElement('div');
            infoPanelElement.id = infoPanelElementID;
            infoPanelElement.style = 'position: absolute; /*top: ' + pos.y + 'px;*/ left: ' + pos.x + 'px; width: ' + dimensionArray[0][0] + 'px; height: ' + dimensionArray[0][1] + 'px; border: 1px solid rgb(255, 204, 52); padding-left: 11px; background: rgb(247, 248, 224) none repeat scroll 0% 0%; overflow: auto; z-index: 9999997; visibility: hidden;opacity:0.9;font-size:13px;font-family:monospace;';
            var closeImage = doc.createElement('img');
            closeImage.src = refThis.metaInfo.protocol + "ads.pubmatic.com/AdServer/js/pwt/close.png";
            closeImage.style = 'cursor:pointer; position: absolute; top: 2px; left: ' + (pos.x + dimensionArray[0][0] - 16 - 15) + 'px; z-index: 9999998;';
            closeImage.title = 'close';
            closeImage.onclick = function () {
              infoPanelElement.style.display = "none";
            };
            infoPanelElement.appendChild(closeImage);
            infoPanelElement.appendChild(doc.createElement('br'));
            var text = 'Slot: ' + divID + ' | ';
            for (var i = 0; i < dimensionArray.length; i++) {
              text += (i != 0 ? ', ' : '') + dimensionArray[i][0] + 'x' + dimensionArray[i][1];
            }
            infoPanelElement.appendChild(doc.createTextNode(text));
            infoPanelElement.appendChild(doc.createElement('br'));
            element.parentNode.insertBefore(infoPanelElement, element);
          }
        }
      }
    };
    exports.realignVLogInfoPanel = function (divID) {
      var element,
        infoPanelElement,
        infoPanelElementID,
        doc = window.document;
    
      /* istanbul ignore else */
      if (refThis.visualDebugLogIsEnabled) {
        element = doc.getElementById(divID);
        /* istanbul ignore else */
        if (element) {
          infoPanelElementID = divID + '-pwtc-info';
          infoPanelElement = doc.getElementById(infoPanelElementID);
          /* istanbul ignore else */
          if (infoPanelElement) {
            var pos = refThis.getElementLocation(element);
            infoPanelElement.style.visibility = 'visible';
            infoPanelElement.style.left = pos.x + 'px';
            infoPanelElement.style.height = element.clientHeight + 'px';
          }
        }
      }
    };
    exports.vLogInfo = function (divID, infoObject) {
      var infoPanelElement,
        message,
        doc = window.document;
      /* istanbul ignore else */
      if (refThis.visualDebugLogIsEnabled) {
        var infoPanelElementID = divID + "-pwtc-info";
        infoPanelElement = doc.getElementById(infoPanelElementID);
        /* istanbul ignore else */
        if (infoPanelElement) {
          switch (infoObject.type) {
            case "bid":
              var latency = infoObject.latency;
              var bidDetails = infoObject.bidDetails;
              var currencyMsg = "";
              /* istanbul ignore else */
              if (latency < 0) {
                latency = 0;
              }
              if (infoObject.hasOwnProperty("adServerCurrency") && infoObject["adServerCurrency"] !== undefined) {
                if (infoObject.adServerCurrency == 0) {
                  currencyMsg = 'USD';
                } else {
                  currencyMsg = infoObject.adServerCurrency;
                }
              } else {
                currencyMsg = 'USD';
              }
              message = "Bid: " + infoObject.bidder + (infoObject.s2s ? "(s2s)" : "") + ": " + bidDetails.getNetEcpm() + "(" + bidDetails.getGrossEcpm() + ")" + currencyMsg + " :" + latency + "ms";
              /* istanbul ignore else */
              if (bidDetails.getPostTimeoutStatus()) {
                message += ": POST-TIMEOUT";
              }
              break;
            case "win-bid":
              var bidDetails = infoObject.bidDetails;
              var currencyMsg = "";
              if (infoObject.hasOwnProperty("adServerCurrency") && infoObject["adServerCurrency"] !== undefined) {
                if (infoObject.adServerCurrency == 0) {
                  currencyMsg = 'USD';
                } else {
                  currencyMsg = infoObject.adServerCurrency;
                }
              } else {
                currencyMsg = 'USD';
              }
              message = "Winning Bid: " + bidDetails.getAdapterID() + ": " + bidDetails.getNetEcpm() + currencyMsg;
              break;
            case "win-bid-fail":
              message = "There are no bids from PWT";
              break;
            case "hr":
              message = "----------------------";
              break;
            case "disp":
              message = "Displaying creative from " + infoObject.adapter;
              break;
          }
          infoPanelElement.appendChild(doc.createTextNode(message));
          infoPanelElement.appendChild(doc.createElement("br"));
        }
      }
    };
    exports.getExternalBidderStatus = function (divIds) {
      var status = true;
      refThis.forEachOnArray(divIds, function (key, divId) {
        status = window.OWT.externalBidderStatuses[divId] ? status && window.OWT.externalBidderStatuses[divId].status : status;
      });
      return status;
    };
    exports.resetExternalBidderStatus = function (divIds) {
      refThis.forEachOnArray(divIds, function (key, divId) {
        refThis.log("resetExternalBidderStatus: " + divId);
        window.OWT.externalBidderStatuses[divId] = undefined;
      });
    };
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    exports.ajaxRequest = function (url, callback, data, options) {
      try {
        options = options || {};
        var x,
          XHR_DONE = 4,
          ajaxSupport = true,
          method = options.method || (data ? "POST" : "GET");
        if (!window.XMLHttpRequest) {
          ajaxSupport = false;
        } else {
          x = new window.XMLHttpRequest();
          if (refThis.isUndefined(x.responseType)) {
            ajaxSupport = false;
          }
        }
        if (!ajaxSupport) {
          refThis.log("Ajax is not supported");
          return;
        }
        x.onreadystatechange = function () {
          if (x.readyState === XHR_DONE && callback) {
            callback(x.responseText, x);
          }
        };
        x.open(method, url);
        if (options.withCredentials) {
          x.withCredentials = true;
        }
        if (options.preflight) {
          x.setRequestHeader("X-Requested-With", "XMLHttpRequest");
        }
        x.setRequestHeader("Content-Type", options.contentType || "text/plain");
        x.send(method === "POST" && data);
      } catch (error) {
        refThis.log("Failed in Ajax");
        refThis.log(error);
      }
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // Returns mediaTypes for adUnits which are sent to prebid
    exports.getAdUnitConfig = function (sizes, currentSlot) {
      function iskgpvpresent() {
        if (kgpv) {
          return Object.keys(slotConfig['config']).toString().toLowerCase().indexOf(kgpv.toLowerCase()) > -1 ? true : false;
        }
      }
      // checks if regex is present and enabled
      function isregexEnabled() {
        return slotConfig && slotConfig[CONSTANTS.COMMON.MCONF_REGEX] == true ? true : false;
      }
      // Returns regex-matched config for kgpv, if not found returns undefined
      function isAdunitRegex() {
        var regexKeys = Object.keys(slotConfig['config']);
        var matchedRegex;
        regexKeys.forEach(function (exp) {
          try {
            // Ignores "default" key and RegExp performs case insensitive check
            if (exp.length > 0 && exp != CONSTANTS.COMMON.DEFAULT && kgpv.match(new RegExp(exp, "i"))) {
              matchedRegex = exp;
              return;
            }
          } catch (ex) {
            refThis.log(CONSTANTS.MESSAGES.M32 + JSON.stringify(exp));
          }
        });
        if (matchedRegex) {
          return slotConfig["config"][matchedRegex];
        } else {
          return undefined;
        }
      }
      // returns selected MediaConfig
      function selectSlotConfig() {
        //exact-match else regex check
        if (iskgpvpresent()) {
          return slotConfig["config"][kgpv];
        } else if (isregexEnabled()) {
          return isAdunitRegex();
        }
      }
      var adUnitConfig = {};
      var mediaTypeObject = {};
      var slotConfig = CONFIG.getSlotConfiguration();
      if (slotConfig) {
        if (slotConfig.configPattern && slotConfig.configPattern.trim() != '' || (slotConfig["configPattern"] = "_AU_")) {
          var kgp = slotConfig.configPattern;
          var isVideo = true;
          var isNative = true;
          var isBanner = true;
          var config = undefined;
          var divId = refThis.isFunction(currentSlot.getDivID) ? currentSlot.getDivID() : currentSlot.getSlotId().getDomId();
    
          // TODO: Have to write logic if required in near future to support multiple kgpvs, right now 
          // as we are only supporting div and ad unit, taking the first slot name.
          // Implemented as per code review and discussion. 
    
          var kgpv = refThis.generateSlotNamesFromPattern(currentSlot, kgp, false)[0];
          // Global Default Enable is false then disable each 
          if (refThis.isOwnProperty(slotConfig['config'], CONSTANTS.COMMON.DEFAULT)) {
            if (slotConfig['config'][CONSTANTS.COMMON.DEFAULT].banner && refThis.isOwnProperty(slotConfig['config'][CONSTANTS.COMMON.DEFAULT].banner, 'enabled') && !slotConfig['config'][CONSTANTS.COMMON.DEFAULT].banner.enabled) {
              isBanner = false;
            }
            if (slotConfig['config'][CONSTANTS.COMMON.DEFAULT].native && refThis.isOwnProperty(slotConfig['config'][CONSTANTS.COMMON.DEFAULT].native, 'enabled') && !slotConfig['config'][CONSTANTS.COMMON.DEFAULT].native.enabled) {
              isNative = false;
            }
            if (slotConfig['config'][CONSTANTS.COMMON.DEFAULT].video && refThis.isOwnProperty(slotConfig['config'][CONSTANTS.COMMON.DEFAULT].video, 'enabled') && !slotConfig['config'][CONSTANTS.COMMON.DEFAULT].video.enabled) {
              isVideo = false;
            }
            config = slotConfig["config"][CONSTANTS.COMMON.DEFAULT];
            if (config.renderer && !refThis.isEmptyObject(config.renderer)) {
              adUnitConfig['renderer'] = config.renderer;
            }
          }
          if (refThis.isOwnProperty(slotConfig['config'], kgpv) || iskgpvpresent() || isregexEnabled()) {
            //populating slotlevel config 
            const slConfig = selectSlotConfig();
            // if SLConfig present then override default config
            if (slConfig) {
              config = slConfig;
            }
            if (!config) {
              config = slotConfig["config"][Object.keys(slotConfig["config"]).filter(function (key) {
                return key.toLocaleLowerCase() === kgpv.toLowerCase();
              })];
            }
            refThis.log("Config" + JSON.stringify(config) + " found for adSlot: " + JSON.stringify(currentSlot));
          } else {
            refThis.log("Considering Default Config for " + JSON.stringify(currentSlot));
          }
          if (config) {
            if (isNative && config.native && (!refThis.isOwnProperty(config.native, 'enabled') || config.native.enabled)) {
              if (config.native["config"]) {
                mediaTypeObject["native"] = config.native["config"];
              } else {
                refThis.logWarning("Native Config will not be considered as no config has been provided for slot" + JSON.stringify(currentSlot) + " or there is no configuration defined in default.");
              }
            }
            if (isVideo && config.video && (!refThis.isOwnProperty(config.video, 'enabled') || config.video.enabled)) {
              if (CONFIG.getAdServer() != CONSTANTS.AD_SERVER.DFP) {
                if (config.video["config"]) {
                  mediaTypeObject["video"] = config.video["config"];
                  if (config.video["partnerConfig"]) {
                    mediaTypeObject["partnerConfig"] = config.video["partnerConfig"];
                  }
                } else {
                  refThis.logWarning("Video Config will not be considered as no config has been provided for slot" + JSON.stringify(currentSlot) + " or there is no configuration defined in default.");
                }
              } else {
                refThis.logWarning("Video Config will not be considered with DFP selected as AdServer.");
              }
            }
            if (config.renderer && !refThis.isEmptyObject(config.renderer)) {
              adUnitConfig['renderer'] = config.renderer;
            }
            if (!isBanner || config.banner && refThis.isOwnProperty(config.banner, 'enabled') && !config.banner.enabled) {
              refThis.mediaTypeConfig[divId] = mediaTypeObject;
              adUnitConfig['mediaTypeObject'] = mediaTypeObject;
              return adUnitConfig;
            }
          } else {
            refThis.log("Config not found for adSlot: " + JSON.stringify(currentSlot));
          }
        } else {
          refThis.logWarning("Slot Type not found in config. Please provide slotType in configuration");
        }
      }
      mediaTypeObject["banner"] = {
        sizes: sizes
      };
      refThis.mediaTypeConfig[divId] = mediaTypeObject;
      adUnitConfig['mediaTypeObject'] = mediaTypeObject;
      return adUnitConfig;
    };
    
    // removeIf(removeNativeRelatedCode)
    exports.addEventListenerForClass = function (theWindow, theEvent, theClass, eventHandler) {
      if (typeof eventHandler !== "function") {
        refThis.log("EventHandler should be a function");
        return false;
      }
      var elems = refThis.findElementsByClass(theWindow, theClass);
      if (!theWindow.addEventListener) {
        theEvent = "on" + theEvent;
      }
      for (var i = 0; i < elems.length; i++) {
        elems[i].addEventListener(theEvent, eventHandler, true);
      }
      return true;
    };
    // endRemoveIf(removeNativeRelatedCode)
    
    // removeIf(removeNativeRelatedCode) 
    exports.findElementsByClass = function (theWindow, theClass) {
      return theWindow.document.getElementsByClassName(theClass) || [];
    };
    // endRemoveIf(removeNativeRelatedCode)
    
    // removeIf(removeNativeRelatedCode)
    exports.getBidFromEvent = function (theEvent) {
      return theEvent && theEvent.target && theEvent.target.attributes && theEvent.target.attributes[CONSTANTS.COMMON.BID_ID] && theEvent.target.attributes[CONSTANTS.COMMON.BID_ID].value || "";
    };
    // endRemoveIf(removeNativeRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    exports.getAdFormatFromBidAd = function (ad) {
      var format = undefined;
      if (ad && refThis.isString(ad)) {
        //TODO: Uncomment below code once video has been implemented 
        try {
          var videoRegex = new RegExp(/VAST\s+version/);
          if (videoRegex.test(ad)) {
            format = CONSTANTS.FORMAT_VALUES.VIDEO;
          } else {
            var adStr = JSON.parse(ad.replace(/\\/g, ""));
            if (adStr && adStr.native) {
              format = CONSTANTS.FORMAT_VALUES.NATIVE;
            }
          }
        } catch (ex) {
          format = CONSTANTS.FORMAT_VALUES.BANNER;
        }
        // }
      }
    
      return format;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // This common function can be used add hooks for publishers to make changes in flows
    exports.handleHook = function (hookName, arrayOfDataToPass) {
      // Adding a hook for publishers to modify the data we have
      if (refThis.isFunction(window.PWT[hookName])) {
        refThis.log('For Hook-name: ' + hookName + ', calling window.PWT.' + hookName + 'function.');
        window.PWT[hookName].apply(window.PWT, arrayOfDataToPass);
      }
      // else {
      // 	refThis.log('Hook-name: '+hookName+', window.PWT.'+hookName+' is not a function.' );
      // }
    };
    
    exports.getCurrencyToDisplay = function () {
      var defaultCurrency = CONFIG.getAdServerCurrency();
      if (defaultCurrency == 0) {
        defaultCurrency = 'USD';
      }
      if (CONFIG.getAdServerCurrency()) {
        if (window[CONSTANTS.COMMON.PREBID_NAMESPACE] && refThis.isFunction(window[CONSTANTS.COMMON.PREBID_NAMESPACE].getConfig)) {
          var pbConf = window[CONSTANTS.COMMON.PREBID_NAMESPACE].getConfig();
          if (pbConf && pbConf.currency && pbConf.currency.adServerCurrency) {
            return pbConf.currency.adServerCurrency;
          }
        }
      }
      return defaultCurrency;
    };
    exports.getConfigFromRegex = function (klmsForPartner, generatedKey) {
      // This function will return the config for the partner for specific slot.
      // KGP would always be AU@DIV@WXH
      // KLM would be an array of regex Config and regex pattern pairs where key would be regex pattern to match 
      // and value would be the config for that slot to be considered.
      /* Algo to match regex pattern 
          Start regex parttern matching  pattern -> ["ADUNIT", "DIV", "SIZE"]
          Then match the slot adUnit with pattern 
          if successful the match the div then size
          if all are true then return the config else match the next avaiable pattern
          if none of the pattern match then return the error config not found */
      var rxConfig = null;
      var keys = generatedKey.split("@");
      for (var i = 0; i < klmsForPartner.length; i++) {
        var klmv = klmsForPartner[i];
        var rxPattern = klmv.rx;
        if (keys.length == 3) {
          // Only execute if generated key length is 3 .
          try {
            // Added second parameter to RegExp to make case insenitive check on AU & DIV parameters. 
            if (keys[0].match(new RegExp(rxPattern.AU, "i")) && keys[1].match(new RegExp(rxPattern.DIV, "i")) && keys[2].match(new RegExp(rxPattern.SIZE, "i"))) {
              rxConfig = {
                config: klmv.rx_config,
                regexPattern: rxPattern.AU + "@" + rxPattern.DIV + "@" + rxPattern.SIZE
              };
              break;
            }
          } catch (ex) {
            refThis.logError(CONSTANTS.MESSAGES.M27 + JSON.stringify(rxPattern));
          }
        } else {
          refThis.logWarning(CONSTANTS.MESSAGES.M28 + generatedKey);
        }
      }
      return rxConfig;
    };
    
    // removeIf(removeUserIdRelatedCode)
    exports.getUserIdConfiguration = function () {
      var userIdConfs = [];
      window[pbNameSpace].onSSOLogin({});
      refThis.forEachOnObject(CONFIG.getIdentityPartners(), function (parterId, partnerValues) {
        if (CONSTANTS.EXCLUDE_PARTNER_LIST.indexOf(parterId) < 0) {
          userIdConfs.push(refThis.getUserIdParams(partnerValues));
        }
      });
      refThis.log(CONSTANTS.MESSAGES.IDENTITY.M4 + JSON.stringify(userIdConfs));
      return userIdConfs;
    };
    // endRemoveIf(removeUserIdRelatedCode)
    
    // removeIf(removeUserIdRelatedCode)
    exports.getUserIds = function () {
      if (refThis.isFunction(window[CONSTANTS.COMMON.PREBID_NAMESPACE].getUserIds)) {
        return window[CONSTANTS.COMMON.PREBID_NAMESPACE].getUserIds();
      } else {
        refThis.logWarning("getUserIds" + CONSTANTS.MESSAGES.IDENTITY.M6);
      }
      ;
    };
    // endRemoveIf(removeUserIdRelatedCode)
    
    // removeIf(removeUserIdRelatedCode)
    exports.getUserIdsAsEids = function () {
      if (refThis.isFunction(window[CONSTANTS.COMMON.PREBID_NAMESPACE].getUserIdsAsEids)) {
        return window[CONSTANTS.COMMON.PREBID_NAMESPACE].getUserIdsAsEids();
      } else {
        refThis.logWarning("getUserIdsAsEids" + CONSTANTS.MESSAGES.IDENTITY.M6);
      }
      ;
    };
    // endRemoveIf(removeUserIdRelatedCode)
    
    exports.getNestedObjectFromArray = function (sourceObject, sourceArray, valueOfLastNode) {
      var convertedObject = sourceObject;
      var referenceForNesting = convertedObject;
      for (var i = 0; i < sourceArray.length - 1; i++) {
        if (!referenceForNesting[sourceArray[i]]) {
          referenceForNesting[sourceArray[i]] = {};
        }
        referenceForNesting = referenceForNesting[sourceArray[i]];
      }
      referenceForNesting[sourceArray[sourceArray.length - 1]] = valueOfLastNode;
      return convertedObject;
    };
    exports.getNestedObjectFromString = function (sourceObject, separator, key, value) {
      var splitParams = key.split(separator);
      if (splitParams.length == 1) {
        sourceObject[key] = value;
      } else {
        sourceObject = refThis.getNestedObjectFromArray(sourceObject, splitParams, value);
      }
      return sourceObject;
    };
    exports.deleteCustomParams = function (params) {
      delete params.custom;
      return params;
    };
    exports.getUserIdParams = function (params) {
      var userIdParams = {};
      refThis.applyDataTypeChangesIfApplicable(params);
      refThis.applyCustomParamValuesfApplicable(params);
      for (var key in params) {
        try {
          if (CONSTANTS.EXCLUDE_IDENTITY_PARAMS.indexOf(key) == -1) {
            if (CONSTANTS.TOLOWERCASE_IDENTITY_PARAMS.indexOf(key) > -1) {
              params[key] = params[key].toLowerCase();
            }
            if (CONSTANTS.JSON_VALUE_KEYS.indexOf(key) > -1) {
              params[key] = JSON.parse(params[key]);
            }
            userIdParams = refThis.getNestedObjectFromString(userIdParams, ".", key, params[key]);
          }
        } catch (ex) {
          refThis.logWarning(CONSTANTS.MESSAGES.IDENTITY.M3, ex);
        }
      }
      if (userIdParams && userIdParams.params && userIdParams.params["loadATS"] == "true") {
        refThis.initLiveRampAts(userIdParams);
      }
      if (userIdParams && userIdParams.params && userIdParams.params['loadIDP'] == 'true') {
        refThis.initZeoTapJs(userIdParams);
      }
      if (userIdParams && userIdParams.params && userIdParams.params["loadLauncher"] == "true") {
        refThis.initLauncherJs(userIdParams);
      }
      if (userIdParams && userIdParams.custom && userIdParams.custom["loadLaunchPad"] == "true") {
        refThis.initLiveRampLaunchPad(userIdParams);
      }
      return refThis.deleteCustomParams(userIdParams);
    };
    exports.getPartnerParams = function (params) {
      var pparams = {};
      for (var key in params) {
        try {
          pparams = refThis.getNestedObjectFromString(pparams, ".", key, params[key]);
        } catch (ex) {
          refThis.logWarning(CONSTANTS.MESSAGES.M29, ex);
        }
      }
      return pparams;
    };
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    exports.generateMonetizationPixel = function (slotID, theBid) {
      var pixelURL = CONFIG.getMonetizationPixelURL(),
        pubId = CONFIG.getPublisherId();
      var netEcpm, grossEcpm, kgpv, bidId, adapterId, adapterName, adUnitId;
      var sspID = "";
      const isAnalytics = true; // this flag is required to get grossCpm and netCpm in dollars instead of adserver currency
      const prebidBidId = theBid.pbbid && theBid.pbbid.prebidBidId || theBid.prebidBidId;
    
      /* istanbul ignore else */
      if (!pixelURL) {
        return;
      }
      if (refThis.isFunction(theBid.getGrossEcpm)) {
        grossEcpm = theBid.getGrossEcpm(isAnalytics);
      } else {
        if (CONFIG.getAdServerCurrency() && refThis.isFunction(theBid.getCpmInNewCurrency)) {
          grossEcpm = window.parseFloat(theBid.getCpmInNewCurrency(CONSTANTS.COMMON.ANALYTICS_CURRENCY));
        } else {
          if (CONFIG.isPrebidPubMaticAnalyticsEnabled() && theBid.originalCpm) {
            grossEcpm = theBid.originalCpm;
          } else {
            grossEcpm = theBid.cpm;
          }
        }
      }
      if (refThis.isFunction(theBid.getAdapterID)) {
        adapterId = theBid.getAdapterID();
      } else {
        adapterId = theBid.bidderCode;
      }
      //Uncomment below code in case hybrid profile is supported 
      if (adapterId == "pubmaticServer") {
        adapterId = theBid.originalBidder || "pubmatic"; // in case of pubmaticServer we will get originalBidder, assigning pubmatic just in case originalBidder is not there.
      }
    
      adapterName = CONFIG.getAdapterNameForAlias(adapterId);
    
      // Do we need all checks or we can just use one check
      if (refThis.isFunction(theBid.getNetEcpm)) {
        netEcpm = theBid.getNetEcpm(isAnalytics);
      } else {
        // else would be executed in case this function is called from prebid for vast updation
        netEcpm = window.parseFloat((grossEcpm * CONFIG.getAdapterRevShare(adapterId)).toFixed(CONSTANTS.COMMON.BID_PRECISION));
      }
      if (refThis.isFunction(theBid.getBidID)) {
        bidId = theBid.getBidID();
      } else {
        if (CONFIG.isPrebidPubMaticAnalyticsEnabled() && theBid.adId) {
          bidId = theBid.adId;
        } else {
          bidId = window.PWT.bidMap[slotID].adapters[adapterId].bids[Object.keys(window.PWT.bidMap[slotID].adapters[adapterId].bids)[0]].bidID;
        }
      }
      if (refThis.isFunction(theBid.getKGPV)) {
        kgpv = theBid.getKGPV();
      } else {
        kgpv = window.PWT.bidMap[slotID].adapters[adapterId].bids[Object.keys(window.PWT.bidMap[slotID].adapters[adapterId].bids)[0]].getKGPV(false, theBid.mediaType);
      }
      if (refThis.isFunction(theBid.getsspID)) {
        sspID = theBid.getsspID();
      } else {
        sspID = theBid.sspID || "";
      }
      var origAdUnit = bidManager.getAdUnitInfo(slotID);
      adUnitId = origAdUnit.adUnitId || slotID;
      var iiid = window.PWT.bidMap[slotID].getImpressionID();
      var isRefreshed = window.PWT.newAdUnits && window.PWT.newAdUnits[iiid] && window.PWT.newAdUnits[iiid][slotID] && window.PWT.newAdUnits[iiid][slotID]['pubmaticAutoRefresh'] && window.PWT.newAdUnits[iiid][slotID]['pubmaticAutoRefresh']['isRefreshed'] ? 1 : 0;
      pixelURL += "pubid=" + pubId;
      pixelURL += "&purl=" + window.encodeURIComponent(refThis.metaInfo.pageURL);
      pixelURL += "&tst=" + refThis.getCurrentTimestamp();
      pixelURL += "&iid=" + window.encodeURIComponent(window.PWT.bidMap[slotID].getImpressionID());
      pixelURL += "&bidid=" + (prebidBidId ? window.encodeURIComponent(prebidBidId) : window.encodeURIComponent(bidId));
      pixelURL += "&origbidid=" + window.encodeURIComponent(bidId);
      pixelURL += "&pid=" + window.encodeURIComponent(CONFIG.getProfileID());
      pixelURL += "&pdvid=" + window.encodeURIComponent(CONFIG.getProfileDisplayVersionID());
      pixelURL += "&slot=" + window.encodeURIComponent(slotID);
      pixelURL += "&au=" + window.encodeURIComponent(adUnitId);
      pixelURL += "&bc=" + window.encodeURIComponent(adapterId);
      pixelURL += "&pn=" + window.encodeURIComponent(adapterName);
      pixelURL += "&en=" + window.encodeURIComponent(netEcpm);
      pixelURL += "&eg=" + window.encodeURIComponent(grossEcpm);
      pixelURL += "&kgpv=" + window.encodeURIComponent(kgpv);
      pixelURL += "&piid=" + window.encodeURIComponent(sspID);
      pixelURL += "&rf=" + window.encodeURIComponent(isRefreshed);
      return CONSTANTS.COMMON.PROTOCOL + pixelURL;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    exports.UpdateVastWithTracker = function (bid, vast) {
      try {
        var domParser = new DOMParser();
        var parsedVast = domParser.parseFromString(vast, "application/xml");
        var impEle = parsedVast.createElement("Impression");
        impEle.innerHTML = CONFIG.isPrebidPubMaticAnalyticsEnabled() ? "" : "<![CDATA[" + refThis.generateMonetizationPixel(bid.adUnitCode, bid) + "]]>";
        if (parsedVast.getElementsByTagName('Wrapper').length == 1) {
          parsedVast.getElementsByTagName('Wrapper')[0].appendChild(impEle);
        } else if (parsedVast.getElementsByTagName('InLine').length == 1) {
          parsedVast.getElementsByTagName('InLine')[0].appendChild(impEle);
        }
        return new XMLSerializer().serializeToString(parsedVast);
      } catch (ex) {
        return vast;
      }
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    exports.getDomainFromURL = function (url) {
      var a = window.document.createElement("a");
      a.href = url;
      return a.hostname;
    };
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    exports.replaceAuctionPrice = function (str, cpm) {
      if (!str) return;
      return str.replace(/\$\{AUCTION_PRICE\}/g, cpm);
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    // removeIf(removeInStreamRelatedCode)
    exports.getCustomParamsForDFPVideo = function (customParams, bid) {
      const adserverTargeting = bid && bid.adserverTargeting || {};
      var targetingKeys = {};
      for (var key in adserverTargeting) {
        if (refThis.isOwnProperty(adserverTargeting, key)) {
          if (refThis.isArray(adserverTargeting[key])) {
            targetingKeys[key] = adserverTargeting[key].join();
          } else {
            targetingKeys[key] = adserverTargeting[key];
          }
        }
      }
      var customParams = Object.assign({}, targetingKeys, customParams);
      return customParams;
    };
    // endRemoveIf(removeInStreamRelatedCode)
    
    // removeIf(removeLegacyAnalyticsRelatedCode)
    exports.getDevicePlatform = function () {
      var deviceType = 3;
      try {
        var ua = navigator.userAgent;
        if (ua && refThis.isString(ua) && ua.trim() != "") {
          ua = ua.toLowerCase().trim();
          var isMobileRegExp = new RegExp("(mobi|tablet|ios).*");
          if (ua.match(isMobileRegExp)) {
            deviceType = 2;
          } else {
            deviceType = 1;
          }
        }
      } catch (ex) {
        refThis.logError("Unable to get device platform", ex);
      }
      return deviceType;
    };
    // endRemoveIf(removeLegacyAnalyticsRelatedCode)
    
    exports.getOWConfig = function () {
      var obj = {
        "timeout": CONFIG.getTimeout(),
        "openwrap_version": CONFIG[CONSTANTS.COMMON.OWVERSION],
        "prebid_version": CONFIG[CONSTANTS.COMMON.PBVERSION],
        "profileId": CONFIG.getProfileID(),
        "profileVersionId": CONFIG.getProfileDisplayVersionID()
      };
      return obj;
    };
    
    // removeIf(removeIdHubOnlyRelatedCode)
    exports.updateAdUnits = function (adUnits) {
      if (refThis.isArray(adUnits)) {
        adUnits.forEach(function (adUnit) {
          adUnit.bids.forEach(function (bid) {
            refThis.updateUserIds(bid);
          });
        });
      } else if (!refThis.isEmptyObject(adUnits)) {
        adUnits.bids.forEach(function (bid) {
          refThis.updateUserIds(bid);
        });
      }
    };
    // endRemoveIf(removeIdHubOnlyRelatedCode)
    
    // removeIf(removeIdHubOnlyRelatedCode)
    exports.updateUserIds = function (bid) {
      // refThis.idsAppendedToAdUnits =true;
      if (refThis.isUndefined(bid.userId)) {
        bid["userId"] = refThis.getUserIds();
      } else if (bid.userId) {
        /* istanbul ignore next */
        bid.userId = Object.assign(bid.userId, refThis.getUserIds());
      }
      if (refThis.isUndefined(bid.userIdAsEids)) {
        bid["userIdAsEids"] = refThis.getUserIdsAsEids();
      } else if (refThis.isArray(bid.userIdAsEids)) {
        var idsPresent = new Set();
        var ids = refThis.getUserIdsAsEids().concat(bid.userIdAsEids);
        if (refThis.isArray(ids) && ids.length > 0) {
          ids = ids.filter(function (id) {
            if (id.source) {
              if (idsPresent.has(id.source)) {
                return false;
              }
              idsPresent.add(id.source);
            }
            return true;
          });
        }
        bid.userIdAsEids = ids;
      }
    };
    // endRemoveIf(removeIdHubOnlyRelatedCode)
    exports.getLiverampParams = function (params) {
      if (params.params.cssSelectors && params.params.cssSelectors.length > 0) {
        params.params.cssSelectors = params.params.cssSelectors.split(",");
      }
      var userIdentity = window[pbNameSpace].getUserIdentities() || {};
      var enableSSO = CONFIG.isSSOEnabled() || false;
      var detectionMechanism = params.params.detectionMechanism;
      var enableCustomId = params.params.enableCustomId === "true" ? true : false;
      var atsObject = {
        "placementID": params.params.pid,
        "storageType": params.params.storageType,
        "logging": params.params.logging //"error"
      };
    
      if (enableCustomId) {
        atsObject.accountID = params.params.accountID;
        atsObject.customerIDRegex = params.params.customerIDRegex;
        atsObject.detectionSubject = "customerIdentifier";
      }
      switch (detectionMechanism) {
        case undefined:
        case 'detect':
          atsObject.detectionType = params.params.detectionType;
          atsObject.urlParameter = params.params.urlParameter;
          atsObject.cssSelectors = params.params.cssSelectors;
          atsObject.detectDynamicNodes = params.params.detectDynamicNodes;
          atsObject.detectionEventType = params.params.detectionEventType;
          if (params.params.triggerElements && params.params.triggerElements.length > 0) {
            params.params.triggerElements = params.params.triggerElements.split(",");
            atsObject.triggerElements = params.params.triggerElements;
          }
          break;
        case 'direct':
          atsObject.emailHashes = undefined;
          if (window.PWT && window.PWT.OVERRIDES_SCRIPT_BASED_MODULES && window.PWT.OVERRIDES_SCRIPT_BASED_MODULES.includes("identityLink") || window.PWT.OVERRIDES_SCRIPT_BASED_MODULES === undefined) {
            var emailHash = enableSSO && userIdentity.emailHash ? userIdentity.emailHash : userIdentity.pubProvidedEmailHash ? userIdentity.pubProvidedEmailHash : undefined;
            atsObject.emailHashes = emailHash && [emailHash['MD5'], emailHash['SHA1'], emailHash['SHA256']] || undefined;
          }
          /* do we want to keep sso data under direct option?
          if yes, if sso is enabled and 'direct' is selected as detection mechanism, sso emails will be sent to ats script.
          if sso is disabled, and 'direct' is selected as detection mechanism, we will look for publisher provided email ids, and if available the hashes will be sent to ats script.
          */
          if (enableCustomId && refThis.isFunction(window[pbNameSpace].getUserIdentities) && window[pbNameSpace].getUserIdentities() !== undefined) {
            atsObject.customerID = window[pbNameSpace].getUserIdentities().customerID || undefined;
          }
          break;
      }
      ;
      return atsObject;
    };
    exports.getEmailHashes = function () {
      var userIdentity = window[pbNameSpace].getUserIdentities() || {};
      var enableSSO = CONFIG.isSSOEnabled() || false;
      var emailHash = enableSSO && userIdentity.emailHash ? userIdentity.emailHash : userIdentity.pubProvidedEmailHash ? userIdentity.pubProvidedEmailHash : undefined;
      var emailHashArr = [];
      refThis.forEachOnObject(emailHash, function (keyName, keyValue) {
        if (keyValue !== undefined) {
          emailHashArr.push(keyValue);
        }
      });
      return emailHashArr.length > 0 ? emailHashArr : undefined;
    };
    exports.initLiveRampLaunchPad = function (params) {
      var lpURL = "https://launchpad-wrapper.privacymanager.io/" + params.custom.configurationId + "/launchpad-liveramp.js";
      function addLaunchPad() {
        var launchPadScript = document.createElement("script");
        launchPadScript.onload = function () {
          __launchpad('addEventListener', 1, function () {
            var isDirectMode = !ats.outputCurrentConfiguration()['DETECTION_MODULE_INFO'] || ats.outputCurrentConfiguration()['ENVELOPE_MODULE_INFO']['ENVELOPE_MODULE_CONFIG']['startWithExternalId'];
            if (isDirectMode) {
              // If direct or detect/direct mode
              if (window.PWT && window.PWT.OVERRIDES_SCRIPT_BASED_MODULES && window.PWT.OVERRIDES_SCRIPT_BASED_MODULES.includes("identityLink") || window.PWT.OVERRIDES_SCRIPT_BASED_MODULES === undefined) {
                var emailHashes = refThis.getEmailHashes();
                emailHashes && window.ats.setAdditionalData({
                  'type': 'emailHashes',
                  'id': emailHashes
                });
              }
            }
          }, ['atsWrapperLoaded']);
        };
        launchPadScript.src = lpURL;
        document.body.appendChild(launchPadScript);
      }
      addLaunchPad();
    };
    exports.getPublinkLauncherParams = function (params) {
      if (params.params.cssSelectors && params.params.cssSelectors.length > 0) {
        params.params.cssSelectors = params.params.cssSelectors.split(",");
      }
      var userIdentity = window[pbNameSpace].getUserIdentities() || {};
      var enableSSO = CONFIG.isSSOEnabled() || false;
      var detectionMechanism = params.params.detectionMechanism;
      var lnchObject = {
        "apiKey": params.params.api_key,
        "siteId": params.params.site_id
      };
      switch (detectionMechanism) {
        case undefined:
        case 'detect':
          lnchObject.urlParameter = params.params.urlParameter;
          lnchObject.cssSelectors = params.params.cssSelectors;
          lnchObject.detectionSubject = "email";
          break;
        case 'direct':
          if (window.PWT && window.PWT.OVERRIDES_SCRIPT_BASED_MODULES && window.PWT.OVERRIDES_SCRIPT_BASED_MODULES.includes("publinkId") || window.PWT.OVERRIDES_SCRIPT_BASED_MODULES === undefined) {
            var emailHash = enableSSO && userIdentity.emailHash ? userIdentity.emailHash : userIdentity.pubProvidedEmailHash ? userIdentity.pubProvidedEmailHash : undefined;
            lnchObject.emailHashes = emailHash && [emailHash['MD5'], emailHash['SHA256']] || undefined;
          }
          /* do we want to keep sso data under direct option?
          if yes, if sso is enabled and 'direct' is selected as detection mechanism, sso emails will be sent to ats script.
          if sso is disabled, and 'direct' is selected as detection mechanism, we will look for publisher provided email ids, and if available the hashes will be sent to ats script.
          */
          break;
      }
      ;
      return lnchObject;
    };
    exports.initLiveRampAts = function (params) {
      function addATS() {
        var atsScript = document.createElement("script");
        var atsObject = refThis.getLiverampParams(params);
        atsScript.onload = function () {
          window.ats && window.ats.start(atsObject);
        };
        atsScript.src = "https://ats.rlcdn.com/ats.js";
        document.body.appendChild(atsScript);
      }
      if (document.readyState == 'complete') {
        addATS();
      } else {
        window.addEventListener("load", function () {
          setTimeout(addATS, 1000);
        });
      }
    };
    exports.initZeoTapJs = function (params) {
      function addZeoTapJs() {
        var n = document,
          t = window;
        var userIdentity = window[pbNameSpace].getUserIdentities() || {};
        var enableSSO = CONFIG.isSSOEnabled() || false;
        var userIdentityObject = {};
        if (window.PWT && window.PWT.OVERRIDES_SCRIPT_BASED_MODULES && window.PWT.OVERRIDES_SCRIPT_BASED_MODULES.includes("zeotapIdPlus") || window.PWT.OVERRIDES_SCRIPT_BASED_MODULES === undefined) {
          userIdentityObject = {
            email: enableSSO && userIdentity.emailHash ? userIdentity.emailHash['SHA256'] : userIdentity.pubProvidedEmailHash ? userIdentity.pubProvidedEmailHash['SHA256'] : undefined
          };
        }
        ;
        var e = n.createElement("script");
        e.type = "text/javascript", e.crossorigin = "anonymous";
        e.async = !0, e.src = "https://content.zeotap.com/sdk/idp.min.js", e.onload = function () {};
        n = n.getElementsByTagName("script")[0];
        var initialsationObject = {
          partnerId: params.partnerId,
          allowIDP: true,
          useConsent: CONFIG.getCCPA() || CONFIG.getGdpr(),
          checkForCMP: CONFIG.getCCPA() || CONFIG.getGdpr()
        };
        n.parentNode.insertBefore(e, n);
        n = t.zeotap || {
          _q: [],
          _qcmp: []
        };
        !function (n, t, e) {
          for (var o = 0; o < t.length; o++) !function (t) {
            n[t] = function () {
              n[e].push([t].concat(Array.prototype.slice.call(arguments, 0)));
            };
          }(t[o]);
        }(n, ["callMethod"], "_q"), t.zeotap = n, t.zeotap.callMethod("init", initialsationObject), t.zeotap.callMethod("setUserIdentities", userIdentityObject, true);
      }
      if (document.readyState == 'complete') {
        addZeoTapJs();
      } else {
        window.addEventListener("load", function () {
          setTimeout(addZeoTapJs, 1000);
        });
      }
    };
    exports.initLauncherJs = function (params) {
      window.cnvr_launcher_options = {
        lid: params.params.launcher_id
      };
      function loadLauncher() {
        var launchScript = document.createElement("script");
        var launchObject = refThis.getPublinkLauncherParams(params);
        launchScript.onload = function () {
          window.conversant.getLauncherObject = function () {
            return launchObject;
          };
          window.conversant && window.conversant.launch('publink', 'start', launchObject);
        };
        launchScript.src = "https://secure.cdn.fastclick.net/js/cnvr-launcher/latest/launcher-stub.min.js";
        document.body.appendChild(launchScript);
      }
      if (document.readyState == 'complete') {
        loadLauncher();
      } else {
        window.addEventListener("load", function () {
          setTimeout(loadLauncher, 1000);
        });
      }
    };
    exports.getRandomNumberBelow100 = function () {
      return Math.floor(Math.random() * 100);
    };
    exports.getUpdatedKGPVForVideo = function (kgpv, adFormat) {
      if (adFormat == CONSTANTS.FORMAT_VALUES.VIDEO) {
        var videoKgpv = ["", "0x0"];
        var splitKgpv = kgpv.split("@");
        // Adding this check for Div Mapping Only
        if (splitKgpv.length > 1) {
          if (splitKgpv.length == 2) {
            if (splitKgpv[1].indexOf(":") > -1) {
              var kgpvIndex = splitKgpv[1].split(":");
              videoKgpv[1] = videoKgpv[1] + ":" + kgpvIndex[1];
            }
            videoKgpv[0] = splitKgpv[0];
          }
          kgpv = videoKgpv.join("@");
        }
      }
      return kgpv;
    };
    exports.applyDataTypeChangesIfApplicable = function (params) {
      var value;
      if (params.name in CONSTANTS.SPECIAL_CASE_ID_PARTNERS) {
        for (partnerName in CONSTANTS.SPECIAL_CASE_ID_PARTNERS) {
          if (partnerName === params.name) {
            for (key in CONSTANTS.SPECIAL_CASE_ID_PARTNERS[partnerName]) {
              var paramValue = params[key];
              switch (CONSTANTS.SPECIAL_CASE_ID_PARTNERS[partnerName][key]) {
                case 'number':
                  if (paramValue && typeof paramValue !== 'number') {
                    value = parseInt(paramValue);
                    isNaN(value) ? refThis.logError(partnerName + ": Invalid parameter value '" + paramValue + "' for parameter " + key) : params[key] = value;
                  }
                  break;
                case 'array':
                  if (paramValue) {
                    if (typeof paramValue === 'string') {
                      var arr = paramValue.split(",").map(function (item) {
                        return item.trim();
                      });
                      if (arr.length > 0) {
                        params[key] = arr;
                      }
                    } else if (typeof paramValue === 'number') {
                      params[key] = [paramValue];
                    }
                  }
                  break;
                case "customObject":
                  if (paramValue) {
                    if (key === "params.requestedAttributesOverrides") {
                      params[key] = {
                        'uid2': paramValue === "true" || paramValue === "1"
                      };
                    }
                  }
                  break;
                default:
                  return;
              }
            }
          }
        }
      }
    };
    exports.applyCustomParamValuesfApplicable = function (params) {
      if (params.name in CONSTANTS.ID_PARTNERS_CUSTOM_VALUES) {
        var partnerValues = CONSTANTS.ID_PARTNERS_CUSTOM_VALUES[params.name];
        var i = 0;
        for (; i < partnerValues.length; i++) {
          if (!params[partnerValues[i]["key"]]) {
            params[partnerValues[i]["key"]] = partnerValues[i]["value"];
          }
        }
      }
    };
    exports.getBrowserDetails = function () {
      return bidManager.getBrowser().toString();
    };
    exports.getPltForFloor = function () {
      return refThis.getDevicePlatform().toString();
    };
    
    /***/ })
    
    /******/ });
    //# sourceMappingURL=owt.js.map